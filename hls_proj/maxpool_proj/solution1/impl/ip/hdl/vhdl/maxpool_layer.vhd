-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity maxpool_layer is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of maxpool_layer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "maxpool_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.779000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=92,HLS_SYN_FF=15678,HLS_SYN_LUT=6630}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (96 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (96 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (96 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (96 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (96 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (96 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (96 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (96 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C60CA000 : STD_LOGIC_VECTOR (31 downto 0) := "11000110000011001010000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal od : STD_LOGIC_VECTOR (31 downto 0);
    signal ox : STD_LOGIC_VECTOR (31 downto 0);
    signal oy : STD_LOGIC_VECTOR (31 downto 0);
    signal id : STD_LOGIC_VECTOR (31 downto 0);
    signal ix : STD_LOGIC_VECTOR (31 downto 0);
    signal iy : STD_LOGIC_VECTOR (31 downto 0);
    signal s : STD_LOGIC_VECTOR (31 downto 0);
    signal k : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_341 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_y1_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x1_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_373 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_read_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_read_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal iy_read_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ix_read_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_read_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal oy_read_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ox_read_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal od_read_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1217 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_reg_1222 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound1_reg_1237 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_431_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound2_reg_1254 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal p_mid_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_2_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_5_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound3_reg_1285 : STD_LOGIC_VECTOR (127 downto 0);
    signal smax16_mid_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax16_mid_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_mid_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_mid_reg_1296 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten45_m_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten45_m_reg_1302 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_cast_mid1_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_cast_mid1_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal exitcond_flatten3_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_490_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next3_reg_1317 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal i_d_cast_mid1_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_cast_mid1_reg_1328 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp9_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_cast_mid1_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_cast_mid1_reg_1338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_reg_1361 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_1366 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1371 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_s_4_fu_539_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_s_4_reg_1376 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten1_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_1382 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_cast_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal exitcond_flatten45_m_1_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten45_m_1_reg_1411 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_mid2_fu_573_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_mid2_reg_1424 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1429 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal tmp_10_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1434 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_mid2_fu_594_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_mid2_reg_1447 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1463 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal indvars_iv14_mid_fu_619_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv14_mid_reg_1468 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid1_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid1_reg_1474 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv17_mid_fu_637_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv17_mid_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal p_mid2_fu_644_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid2_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next1_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next1_reg_1498 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next2_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next2_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal p_mid3_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid3_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv14_mid2_fu_666_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv14_mid2_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid2_fu_671_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid2_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_mid_fu_676_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_d_mid_reg_1526 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal p_mid4_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid4_reg_1532 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv17_mid2_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv17_mid2_reg_1537 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_mid1_reg_1542 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid1_reg_1548 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_fu_698_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_d_reg_1554 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_mid5_fu_703_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid5_reg_1560 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_mid1_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_mid1_reg_1565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp9_mid1_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_mid1_reg_1570 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_mid2_fu_733_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_d_mid2_reg_1575 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp5_mid2_v_fu_747_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid2_v_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal o_y_mid_fu_767_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_mid_reg_1585 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal indvars_iv19_mid1_fu_774_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_mid1_reg_1591 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid_reg_1596 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid1_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_1_fu_787_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_1_reg_1608 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv21_mid2_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv21_mid2_reg_1614 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_mid2_fu_799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_mid2_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid2_reg_1628 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal tmp1_mid289_v_fu_827_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_mid289_v_reg_1633 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_cast_fu_840_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv24_mid2_fu_843_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv24_mid2_reg_1643 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_mid1_fu_855_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_mid1_reg_1649 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_cast_mid2_fu_861_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_cast_mid2_reg_1654 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_mid2_fu_868_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_mid2_reg_1659 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_12_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1664 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_mid2_v_fu_877_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_mid2_v_reg_1669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal o_x_cast_mid2_cast_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_cast_mid2_cast_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_890_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal grp_fu_850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_mid1_reg_1695 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal i_y_mid2_fu_922_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_mid2_reg_1700 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_895_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x_reg_1705 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_mid2_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal tmp_7_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1717 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_910_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_1722 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state86_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state89_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state92_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state95_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state98_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state101_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state104_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state107_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_1727 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1731 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_y_s_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_s_reg_1737 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_937_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_reg_1742 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state87_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state90_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state93_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state96_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state99_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state102_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state105_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state108_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal i_x1_mid2_fu_954_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x1_mid2_reg_1747 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_v_v_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_v_v_reg_1753 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_v_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_v_reg_1759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state88_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state91_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state94_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state97_pp0_stage2_iter3 : BOOLEAN;
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal ap_block_state97_io : BOOLEAN;
    signal ap_block_state100_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state103_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state106_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal tmp2_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1764 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_tmp2_reg_1764 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter2_tmp2_reg_1764 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x_1_fu_974_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x_1_reg_1769 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_reg_1774 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1779 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_temp_reg_1790 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_1797 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_1802 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_1807 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_reg_1812 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_element_fu_1072_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal tmp1_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal o_x_op_fu_1083_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_op_reg_1827 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv_next3_fu_1089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next3_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next4_fu_1093_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next4_reg_1837 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next5_fu_1097_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next5_reg_1842 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1847 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal o_x_1_fu_1123_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_1_reg_1852 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1101_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten43_op_reg_1857 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1107_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal indvar_flatten95_op_reg_1862 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal indvar_flatten_next1_fu_1136_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_reg_1872 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next2_fu_1142_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal indvar_flatten_next2_reg_1877 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state87 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal indvar_flatten1_reg_189 : STD_LOGIC_VECTOR (127 downto 0);
    signal b_s_reg_201 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_d_reg_213 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_reg_225 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten2_reg_237 : STD_LOGIC_VECTOR (95 downto 0);
    signal indvar_flatten3_reg_249 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv1_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv2_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv3_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv4_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv5_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_reg_329 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_phi_fu_345_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_y1_phi_fu_356_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x1_phi_fu_366_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_phi_fu_378_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal cast1_fu_411_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast2_fu_415_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_480_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_505_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_517_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_cast_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_563_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_mid1_fu_585_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid_fu_600_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1_fu_632_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax16_mid1_fu_683_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_mid2_fu_708_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_cast_fu_718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid2_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid2127_v_fu_738_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal indvars_iv19_mid_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv21_mid_fu_780_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid3_fu_804_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_mid2157_v_fu_809_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv24_mid_fu_814_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_850_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp7_mid2_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_cast_mid_fu_833_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax1_fu_885_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_895_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_910_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_mid_fu_916_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_to_int_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_to_int_fu_1010_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_996_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1006_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_17_fu_1014_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1024_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_19_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1060_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_x_mid265_op_fu_1117_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_386_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_flag00000001 : BOOLEAN;
    signal grp_fu_937_ce : STD_LOGIC;
    signal grp_fu_979_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_419_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_419_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_431_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_431_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_443_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_443_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_480_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_517_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_895_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_910_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_910_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_2010 : BOOLEAN;

    component maxpool_layer_fcmbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component maxpool_layer_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component maxpool_layer_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component maxpool_layer_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component maxpool_layer_mulfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_layer_addg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component maxpool_layer_mulhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_layer_mulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_layer_addjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component maxpool_layer_addkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component maxpool_layer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        od : OUT STD_LOGIC_VECTOR (31 downto 0);
        ox : OUT STD_LOGIC_VECTOR (31 downto 0);
        oy : OUT STD_LOGIC_VECTOR (31 downto 0);
        id : OUT STD_LOGIC_VECTOR (31 downto 0);
        ix : OUT STD_LOGIC_VECTOR (31 downto 0);
        iy : OUT STD_LOGIC_VECTOR (31 downto 0);
        s : OUT STD_LOGIC_VECTOR (31 downto 0);
        k : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component maxpool_layer_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    maxpool_layer_CTRL_BUS_s_axi_U : component maxpool_layer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_offset => input_offset,
        output_offset => output_offset,
        b => b,
        od => od,
        ox => ox,
        oy => oy,
        id => id,
        ix => ix,
        iy => iy,
        s => s,
        k => k);

    maxpool_layer_mem_m_axi_U : component maxpool_layer_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => tmp_14_reg_1779,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => tmp_11_reg_1847,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => tmp_s_reg_373,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    maxpool_layer_fcmbkb_U0 : component maxpool_layer_fcmbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => temp_reg_1790,
        din1 => tmp_s_phi_fu_378_p4,
        ce => grp_fu_386_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_386_p2);

    maxpool_layer_mulcud_U1 : component maxpool_layer_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_419_p0,
        din1 => grp_fu_419_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p2);

    maxpool_layer_muldEe_U2 : component maxpool_layer_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_431_p0,
        din1 => grp_fu_431_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p2);

    maxpool_layer_muleOg_U3 : component maxpool_layer_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 96,
        din1_WIDTH => 32,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_443_p0,
        din1 => grp_fu_443_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p2);

    maxpool_layer_mulfYi_U4 : component maxpool_layer_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => od_read_reg_1205,
        din1 => grp_fu_480_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_480_p2);

    maxpool_layer_addg8j_U5 : component maxpool_layer_addg8j
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 128,
        din1_WIDTH => 128,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten1_reg_189,
        din1 => ap_const_lv128_lc_2,
        ce => ap_const_logic_1,
        dout => grp_fu_490_p2);

    maxpool_layer_mulfYi_U6 : component maxpool_layer_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => id_read_reg_1185,
        din1 => grp_fu_505_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_505_p2);

    maxpool_layer_mulhbi_U7 : component maxpool_layer_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => oy_read_reg_1191,
        din1 => tmp9_reg_1333,
        ce => ap_const_logic_1,
        dout => grp_fu_509_p2);

    maxpool_layer_mulfYi_U8 : component maxpool_layer_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => s_read_reg_1162,
        din1 => grp_fu_517_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_517_p2);

    maxpool_layer_mulibs_U9 : component maxpool_layer_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_558_p0,
        din1 => id_read_reg_1185,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);

    maxpool_layer_mulibs_U10 : component maxpool_layer_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_563_p0,
        din1 => od_read_reg_1205,
        ce => ap_const_logic_1,
        dout => grp_fu_563_p2);

    maxpool_layer_mulhbi_U11 : component maxpool_layer_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_4_mid1_reg_1548,
        din1 => oy_read_reg_1191,
        ce => ap_const_logic_1,
        dout => grp_fu_743_p2);

    maxpool_layer_mulhbi_U12 : component maxpool_layer_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp9_mid1_reg_1570,
        din1 => oy_read_reg_1191,
        ce => ap_const_logic_1,
        dout => grp_fu_753_p2);

    maxpool_layer_mulhbi_U13 : component maxpool_layer_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp5_mid2_v_reg_1580,
        din1 => iy_read_reg_1175,
        ce => ap_const_logic_1,
        dout => grp_fu_757_p2);

    maxpool_layer_mulibs_U14 : component maxpool_layer_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_850_p0,
        din1 => s_read_reg_1162,
        ce => ap_const_logic_1,
        dout => grp_fu_850_p2);

    maxpool_layer_mulibs_U15 : component maxpool_layer_mulibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_895_p0,
        din1 => s_read_reg_1162,
        ce => ap_const_logic_1,
        dout => grp_fu_895_p2);

    maxpool_layer_mulhbi_U16 : component maxpool_layer_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp1_mid2_v_reg_1669,
        din1 => ox_read_reg_1198,
        ce => ap_const_logic_1,
        dout => grp_fu_900_p2);

    maxpool_layer_mulcud_U17 : component maxpool_layer_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_910_p0,
        din1 => grp_fu_910_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_910_p2);

    maxpool_layer_addjbC_U18 : component maxpool_layer_addjbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten_phi_fu_345_p4,
        din1 => ap_const_lv64_1,
        ce => grp_fu_937_ce,
        dout => grp_fu_937_p2);

    maxpool_layer_mulhbi_U19 : component maxpool_layer_mulhbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ix_read_reg_1180,
        din1 => tmp6_mid2_v_reg_1759,
        ce => grp_fu_979_ce,
        dout => grp_fu_979_p2);

    maxpool_layer_addjbC_U20 : component maxpool_layer_addjbC
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten3_reg_249,
        din1 => ap_const_lv64_1,
        ce => ap_const_logic_1,
        dout => grp_fu_1101_p2);

    maxpool_layer_addkbM_U21 : component maxpool_layer_addkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten2_reg_237,
        din1 => ap_const_lv96_1,
        ce => ap_const_logic_1,
        dout => grp_fu_1107_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state87))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state87)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state87 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_condition_2010 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = mem_ARREADY) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state111)) then
                    if ((ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = mem_AWREADY)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                    if ((ap_sig_ioackin_mem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = mem_WREADY)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    b_s_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                b_s_reg_201 <= b_mid2_reg_1424;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                b_s_reg_201 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_d_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                i_d_reg_213 <= i_d_mid2_reg_1575;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i_d_reg_213 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_x1_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_x1_reg_363 <= i_x_1_reg_1769;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                i_x1_reg_363 <= i_x_reg_1705;
            end if; 
        end if;
    end process;

    i_y1_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_y1_reg_353 <= tmp6_mid2_v_v_reg_1753;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                i_y1_reg_353 <= i_y_mid2_reg_1700;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvar_flatten1_reg_189 <= indvar_flatten_next3_reg_1317;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten1_reg_189 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvar_flatten2_reg_237 <= indvar_flatten_next2_reg_1877;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten2_reg_237 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvar_flatten3_reg_249 <= indvar_flatten_next1_reg_1872;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten3_reg_249 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                indvar_flatten_reg_341 <= indvar_flatten_next_reg_1742;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                indvar_flatten_reg_341 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv1_reg_273 <= indvars_iv14_mid2_reg_1516;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv1_reg_273 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv2_reg_285 <= indvars_iv12_mid2_reg_1521;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv2_reg_285 <= k_read_reg_1148;
            end if; 
        end if;
    end process;

    indvars_iv3_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv3_reg_295 <= indvars_iv_next5_reg_1842;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv3_reg_295 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv4_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv4_reg_307 <= indvars_iv_next4_reg_1837;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv4_reg_307 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv5_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv5_reg_319 <= indvars_iv_next3_reg_1832;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv5_reg_319 <= k_read_reg_1148;
            end if; 
        end if;
    end process;

    indvars_iv_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv_reg_261 <= indvars_iv17_mid2_reg_1537;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    o_x_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                o_x_reg_329 <= o_x_1_reg_1852;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                o_x_reg_329 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_y_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
                o_y_reg_225 <= o_y_mid2_reg_1659;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                o_y_reg_225 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    tmp_s_reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_1727))) then 
                tmp_s_reg_373 <= output_element_fu_1072_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                tmp_s_reg_373 <= ap_const_lv32_C60CA000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_1727 <= exitcond_flatten_reg_1727;
                ap_reg_pp0_iter2_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1727;
                ap_reg_pp0_iter3_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter2_exitcond_flatten_reg_1727;
                ap_reg_pp0_iter4_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter3_exitcond_flatten_reg_1727;
                ap_reg_pp0_iter5_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter4_exitcond_flatten_reg_1727;
                ap_reg_pp0_iter6_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter5_exitcond_flatten_reg_1727;
                ap_reg_pp0_iter7_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter6_exitcond_flatten_reg_1727;
                ap_reg_pp0_iter7_temp_reg_1790 <= temp_reg_1790;
                exitcond_flatten_reg_1727 <= exitcond_flatten_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp2_reg_1764 <= tmp2_reg_1764;
                ap_reg_pp0_iter2_tmp2_reg_1764 <= ap_reg_pp0_iter1_tmp2_reg_1764;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                    b_cast_mid1_reg_1307(30 downto 0) <= b_cast_mid1_fu_476_p1(30 downto 0);
                exitcond_flatten3_reg_1313 <= exitcond_flatten3_fu_485_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                b_mid2_reg_1424 <= b_mid2_fu_573_p3;
                exitcond_flatten45_m_1_reg_1411 <= exitcond_flatten45_m_1_fu_568_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                b_read_reg_1212 <= b;
                id_read_reg_1185 <= id;
                ix_read_reg_1180 <= ix;
                iy_read_reg_1175 <= iy;
                k_read_reg_1148 <= k;
                od_read_reg_1205 <= od;
                ox_read_reg_1198 <= ox;
                oy_read_reg_1191 <= oy;
                s_read_reg_1162 <= s;
                tmp_1_reg_1222 <= output_offset(31 downto 2);
                tmp_reg_1217 <= input_offset(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_const_lv1_0 = exitcond_flatten3_reg_1313))) then
                b_s_4_reg_1376 <= b_s_4_fu_539_p2;
                exitcond_flatten1_reg_1382 <= exitcond_flatten1_fu_545_p2;
                exitcond_flatten2_reg_1400 <= exitcond_flatten2_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                bound1_reg_1237 <= grp_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                bound2_reg_1254 <= grp_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                bound3_reg_1285 <= grp_fu_443_p2;
                exitcond_flatten45_m_reg_1302 <= exitcond_flatten45_m_fu_471_p2;
                smax16_mid_reg_1290 <= smax16_mid_fu_460_p3;
                    tmp_2_reg_1275(29 downto 0) <= tmp_2_fu_454_p1(29 downto 0);
                    tmp_5_reg_1280(29 downto 0) <= tmp_5_fu_457_p1(29 downto 0);
                tmp_6_mid_reg_1296 <= tmp_6_mid_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                bound_reg_1722 <= grp_fu_910_p2;
                tmp1_mid2_reg_1712 <= grp_fu_900_p2;
                tmp_7_reg_1717 <= tmp_7_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                    i_d_cast_mid1_reg_1328(30 downto 0) <= i_d_cast_mid1_fu_496_p1(30 downto 0);
                tmp9_reg_1333 <= tmp9_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                i_d_mid2_reg_1575 <= i_d_mid2_fu_733_p3;
                tmp9_mid1_reg_1570 <= tmp9_mid1_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                i_d_mid_reg_1526 <= i_d_mid_fu_676_p3;
                indvars_iv17_mid2_reg_1537 <= indvars_iv17_mid2_fu_693_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0))) then
                i_x1_mid2_reg_1747 <= i_x1_mid2_fu_954_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                i_x_1_reg_1769 <= i_x_1_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                i_x_reg_1705 <= grp_fu_895_p2;
                i_y_mid2_reg_1700 <= i_y_mid2_fu_922_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_6_mid2_reg_1447) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                i_y_mid1_reg_1695 <= grp_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_y_reg_1361 <= grp_fu_517_p2;
                tmp4_reg_1356 <= tmp4_fu_522_p2;
                tmp8_reg_1366 <= tmp8_fu_526_p2;
                tmp_6_reg_1371 <= tmp_6_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_932_p2))) then
                i_y_s_reg_1737 <= i_y_s_fu_948_p2;
                tmp_18_reg_1731 <= tmp_18_fu_943_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_10_reg_1434) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                indvar_flatten43_op_reg_1857 <= grp_fu_1101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten1_reg_1382) and (ap_const_logic_1 = ap_CS_fsm_state110))) then
                indvar_flatten95_op_reg_1862 <= grp_fu_1107_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state111) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                indvar_flatten_next1_reg_1872 <= indvar_flatten_next1_fu_1136_p3;
                indvar_flatten_next2_reg_1877 <= indvar_flatten_next2_fu_1142_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                indvar_flatten_next3_reg_1317 <= grp_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                indvar_flatten_next_reg_1742 <= grp_fu_937_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                indvars_iv12_mid1_reg_1474 <= indvars_iv12_mid1_fu_626_p3;
                indvars_iv14_mid_reg_1468 <= indvars_iv14_mid_fu_619_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                indvars_iv12_mid2_reg_1521 <= indvars_iv12_mid2_fu_671_p3;
                indvars_iv14_mid2_reg_1516 <= indvars_iv14_mid2_fu_666_p3;
                indvars_iv_next2_reg_1505 <= indvars_iv_next2_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                indvars_iv17_mid_reg_1480 <= indvars_iv17_mid_fu_637_p3;
                indvars_iv_next1_reg_1498 <= indvars_iv_next1_fu_654_p2;
                indvars_iv_next_reg_1491 <= indvars_iv_next_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_mid2_reg_1447 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                indvars_iv19_mid1_reg_1591 <= indvars_iv19_mid1_fu_774_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                indvars_iv19_mid2_reg_1621 <= indvars_iv19_mid2_fu_799_p3;
                indvars_iv21_mid2_reg_1614 <= indvars_iv21_mid2_fu_792_p3;
                o_y_1_reg_1608 <= o_y_1_fu_787_p2;
                tmp7_mid1_reg_1602 <= grp_fu_753_p2;
                tmp7_mid_reg_1596 <= grp_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                indvars_iv24_mid2_reg_1643 <= indvars_iv24_mid2_fu_843_p3;
                o_x_cast_mid2_reg_1654 <= o_x_cast_mid2_fu_861_p3;
                o_y_mid2_reg_1659 <= o_y_mid2_fu_868_p3;
                tmp5_mid2_reg_1628 <= grp_fu_757_p2;
                tmp_12_reg_1664 <= tmp_12_fu_873_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                indvars_iv_next3_reg_1832 <= indvars_iv_next3_fu_1089_p2;
                indvars_iv_next4_reg_1837 <= indvars_iv_next4_fu_1093_p2;
                indvars_iv_next5_reg_1842 <= indvars_iv_next5_fu_1097_p2;
                tmp1_reg_1822 <= tmp1_fu_1079_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter6_exitcond_flatten_reg_1727))) then
                notlhs1_reg_1807 <= notlhs1_fu_1040_p2;
                notlhs_reg_1797 <= notlhs_fu_1028_p2;
                notrhs1_reg_1812 <= notrhs1_fu_1046_p2;
                notrhs_reg_1802 <= notrhs_fu_1034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                o_d_reg_1554 <= o_d_fu_698_p2;
                p_mid5_reg_1560 <= p_mid5_fu_703_p3;
                tmp_3_mid1_reg_1542 <= grp_fu_558_p2;
                tmp_4_mid1_reg_1548 <= grp_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state110)) then
                o_x_1_reg_1852 <= o_x_1_fu_1123_p3;
                tmp_11_reg_1847 <= tmp_11_fu_1113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                    o_x_cast_mid2_cast_reg_1674(30 downto 0) <= o_x_cast_mid2_cast_fu_882_p1(30 downto 0);
                tmp1_mid2_v_reg_1669 <= tmp1_mid2_v_fu_877_p3;
                tmp_16_reg_1680 <= tmp_16_fu_890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_mid2_reg_1447 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state109) and (ap_const_lv1_0 = tmp_10_reg_1434))) then
                o_x_op_reg_1827 <= o_x_op_fu_1083_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                    o_y_cast_mid1_reg_1338(30 downto 0) <= o_y_cast_mid1_fu_513_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                o_y_mid_reg_1585 <= o_y_mid_fu_767_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_mid2_reg_1447 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                p_mid2_reg_1486 <= p_mid2_fu_644_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_lv1_0 = tmp_6_mid2_reg_1447))) then
                p_mid3_reg_1511 <= p_mid3_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_6_mid2_reg_1447) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                p_mid4_reg_1532 <= p_mid4_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                p_mid_reg_1270 <= p_mid_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_1727) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                temp_reg_1790 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_mid2_reg_1447 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                tmp1_mid289_v_reg_1633 <= tmp1_mid289_v_fu_827_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                tmp2_reg_1764 <= tmp2_fu_970_p2;
                tmp6_mid2_v_reg_1759 <= tmp6_mid2_v_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (exitcond_flatten45_m_1_reg_1411 = ap_const_lv1_1))) then
                tmp4_mid1_reg_1565 <= tmp4_mid1_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                tmp5_mid2_v_reg_1580 <= tmp5_mid2_v_fu_747_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1727))) then
                tmp6_mid2_reg_1774 <= grp_fu_979_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0))) then
                tmp6_mid2_v_v_reg_1753 <= tmp6_mid2_v_v_fu_960_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                tmp7_reg_1350 <= grp_fu_509_p2;
                tmp_3_reg_1344 <= grp_fu_505_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_6_mid2_reg_1447) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                tmp8_mid1_reg_1649 <= tmp8_mid1_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                tmp_10_reg_1434 <= tmp_10_fu_590_p2;
                tmp_6_mid2_reg_1447 <= tmp_6_mid2_fu_594_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                tmp_14_reg_1779 <= tmp_14_fu_983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                tmp_4_reg_1322 <= grp_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_const_lv1_0 = exitcond_flatten45_m_1_reg_1411) and (ap_const_lv1_0 = exitcond_flatten1_reg_1382))) then
                tmp_8_reg_1429 <= tmp_8_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten45_m_1_reg_1411) and (ap_const_lv1_0 = exitcond_flatten1_reg_1382) and (ap_const_logic_1 = ap_CS_fsm_state64) and (tmp_6_mid2_reg_1447 = ap_const_lv1_1))) then
                tmp_9_reg_1463 <= tmp_9_fu_613_p2;
            end if;
        end if;
    end process;
    tmp_2_reg_1275(31 downto 30) <= "00";
    tmp_5_reg_1280(31 downto 30) <= "00";
    b_cast_mid1_reg_1307(31) <= '0';
    i_d_cast_mid1_reg_1328(31) <= '0';
    o_y_cast_mid1_reg_1338(31) <= '0';
    o_x_cast_mid2_cast_reg_1674(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_reg_1727, ap_enable_reg_pp0_iter6, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state117, mem_BVALID, exitcond_flatten3_reg_1313, ap_CS_fsm_state61, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_sig_ioackin_mem_AWREADY, ap_block_pp0_stage1_flag00011011, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_flag00011011, ap_sig_ioackin_mem_WREADY, ap_block_pp0_stage0_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_flatten3_reg_1313 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state111) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state112;
                else
                    ap_NS_fsm <= ap_ST_fsm_state111;
                end if;
            when ap_ST_fsm_state112 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state112) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state112;
                end if;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state117;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(85);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(86);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(87);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state109 <= ap_CS_fsm(88);
    ap_CS_fsm_state110 <= ap_CS_fsm(89);
    ap_CS_fsm_state111 <= ap_CS_fsm(90);
    ap_CS_fsm_state112 <= ap_CS_fsm(91);
    ap_CS_fsm_state117 <= ap_CS_fsm(96);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_exitcond_flatten_reg_1727, mem_RVALID)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_1727) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_exitcond_flatten_reg_1727, mem_RVALID)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_1727) and (ap_const_logic_0 = mem_RVALID));
    end process;

        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state97_io)
    begin
                ap_block_pp0_stage2_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_boolean_1 = ap_block_state97_io));
    end process;


    ap_block_pp0_stage2_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state97_io)
    begin
                ap_block_pp0_stage2_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_boolean_1 = ap_block_state97_io));
    end process;

        ap_block_state100_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state104_pp0_stage0_iter6_assign_proc : process(ap_reg_pp0_iter5_exitcond_flatten_reg_1727, mem_RVALID)
    begin
                ap_block_state104_pp0_stage0_iter6 <= ((ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_1727) and (ap_const_logic_0 = mem_RVALID));
    end process;

        ap_block_state105_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state97_io_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten_reg_1727, ap_sig_ioackin_mem_ARREADY)
    begin
                ap_block_state97_io <= ((ap_reg_pp0_iter3_exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY));
    end process;

        ap_block_state97_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_2010_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter3_exitcond_flatten_reg_1727)
    begin
                ap_condition_2010 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_reg_pp0_iter3_exitcond_flatten_reg_1727 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state87_assign_proc : process(exitcond_flatten_reg_1727)
    begin
        if ((exitcond_flatten_reg_1727 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state87 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state87 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(exitcond_flatten3_reg_1313, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_flatten3_reg_1313 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond_flatten3_reg_1313, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_flatten3_reg_1313 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_s_4_reg_1376),32));
    b_cast_mid1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_s_reg_201),32));
    b_mid2_fu_573_p3 <= 
        b_s_4_reg_1376 when (exitcond_flatten1_reg_1382(0) = '1') else 
        b_s_reg_201;
    b_s_4_fu_539_p2 <= std_logic_vector(unsigned(b_s_reg_201) + unsigned(ap_const_lv31_1));
    cast1_fu_411_p0 <= oy;
    cast2_fu_415_p0 <= ox;
    exitcond_flatten1_fu_545_p2 <= "1" when (indvar_flatten2_reg_237 = bound2_reg_1254) else "0";
    exitcond_flatten2_fu_550_p2 <= "1" when (indvar_flatten3_reg_249 = bound1_reg_1237) else "0";
    exitcond_flatten3_fu_485_p2 <= "1" when (indvar_flatten1_reg_189 = bound3_reg_1285) else "0";
    exitcond_flatten45_m_1_fu_568_p3 <= 
        exitcond_flatten45_m_reg_1302 when (exitcond_flatten1_reg_1382(0) = '1') else 
        exitcond_flatten2_reg_1400;
    exitcond_flatten45_m_fu_471_p2 <= "1" when (bound1_reg_1237 = ap_const_lv64_0) else "0";
    exitcond_flatten_fu_932_p2 <= "1" when (indvar_flatten_phi_fu_345_p4 = bound_reg_1722) else "0";

    grp_fu_386_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_386_ce <= ap_const_logic_1;
        else 
            grp_fu_386_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_419_p0 <= grp_fu_419_p00(32 - 1 downto 0);
    grp_fu_419_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast2_fu_415_p0),64));
    grp_fu_419_p1 <= grp_fu_419_p10(32 - 1 downto 0);
    grp_fu_419_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast1_fu_411_p0),64));
    grp_fu_431_p0 <= grp_fu_431_p00(64 - 1 downto 0);
    grp_fu_431_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound1_reg_1237),96));
    grp_fu_431_p1 <= grp_fu_431_p10(32 - 1 downto 0);
    grp_fu_431_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(od_read_reg_1205),96));
    grp_fu_443_p0 <= grp_fu_443_p00(96 - 1 downto 0);
    grp_fu_443_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound2_reg_1254),128));
    grp_fu_443_p1 <= grp_fu_443_p10(32 - 1 downto 0);
    grp_fu_443_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_read_reg_1212),128));
    grp_fu_480_p1 <= grp_fu_480_p10(31 - 1 downto 0);
    grp_fu_480_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_s_reg_201),32));
    grp_fu_505_p1 <= b_cast_mid1_reg_1307(31 - 1 downto 0);
    grp_fu_517_p1 <= grp_fu_517_p10(31 - 1 downto 0);
    grp_fu_517_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_y_reg_225),32));
    grp_fu_558_p0 <= b_cast_fu_555_p1(31 - 1 downto 0);
    grp_fu_563_p0 <= b_cast_fu_555_p1(31 - 1 downto 0);
    grp_fu_850_p0 <= o_y_cast_fu_840_p1(31 - 1 downto 0);
    grp_fu_895_p0 <= grp_fu_895_p00(31 - 1 downto 0);
    grp_fu_895_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_cast_mid2_reg_1654),32));
    grp_fu_910_p0 <= grp_fu_910_p00(32 - 1 downto 0);
    grp_fu_910_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid5_reg_1560),64));
    grp_fu_910_p1 <= grp_fu_910_p10(32 - 1 downto 0);
    grp_fu_910_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_1680),64));

    grp_fu_937_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_937_ce <= ap_const_logic_1;
        else 
            grp_fu_937_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_979_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_979_ce <= ap_const_logic_1;
        else 
            grp_fu_979_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_d_cast_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_d_reg_1554),32));
    i_d_cast_mid1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_d_reg_213),32));
    i_d_mid2_fu_733_p3 <= 
        o_d_reg_1554 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        i_d_mid_reg_1526;
    i_d_mid_fu_676_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten1_reg_1382(0) = '1') else 
        i_d_reg_213;
    i_x1_mid2_fu_954_p3 <= 
        i_x1_reg_363 when (tmp_18_reg_1731(0) = '1') else 
        i_x_reg_1705;

    i_x1_phi_fu_366_p4_assign_proc : process(exitcond_flatten_reg_1727, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, i_x1_reg_363, i_x_1_reg_1769, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_x1_phi_fu_366_p4 <= i_x_1_reg_1769;
        else 
            i_x1_phi_fu_366_p4 <= i_x1_reg_363;
        end if; 
    end process;

    i_x_1_fu_974_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_x1_mid2_reg_1747));

    i_y1_phi_fu_356_p4_assign_proc : process(exitcond_flatten_reg_1727, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, i_y1_reg_353, tmp6_mid2_v_v_reg_1753, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_y1_phi_fu_356_p4 <= tmp6_mid2_v_v_reg_1753;
        else 
            i_y1_phi_fu_356_p4 <= i_y1_reg_353;
        end if; 
    end process;

    i_y_mid2_fu_922_p3 <= 
        i_y_mid_fu_916_p3 when (tmp_6_mid2_reg_1447(0) = '1') else 
        i_y_mid1_reg_1695;
    i_y_mid_fu_916_p3 <= 
        ap_const_lv32_0 when (tmp_10_reg_1434(0) = '1') else 
        i_y_reg_1361;
    i_y_s_fu_948_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_y1_phi_fu_356_p4));
    indvar_flatten_next1_fu_1136_p3 <= 
        ap_const_lv64_1 when (tmp_10_reg_1434(0) = '1') else 
        indvar_flatten43_op_reg_1857;
    indvar_flatten_next2_fu_1142_p3 <= 
        ap_const_lv96_1 when (exitcond_flatten1_reg_1382(0) = '1') else 
        indvar_flatten95_op_reg_1862;

    indvar_flatten_phi_fu_345_p4_assign_proc : process(exitcond_flatten_reg_1727, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, indvar_flatten_reg_341, indvar_flatten_next_reg_1742, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            indvar_flatten_phi_fu_345_p4 <= indvar_flatten_next_reg_1742;
        else 
            indvar_flatten_phi_fu_345_p4 <= indvar_flatten_reg_341;
        end if; 
    end process;

    indvars_iv12_mid1_fu_626_p3 <= 
        k_read_reg_1148 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        indvars_iv12_mid_fu_600_p3;
    indvars_iv12_mid2_fu_671_p3 <= 
        indvars_iv12_mid1_reg_1474 when (tmp_6_mid2_reg_1447(0) = '1') else 
        indvars_iv_next_reg_1491;
    indvars_iv12_mid_fu_600_p3 <= 
        k_read_reg_1148 when (exitcond_flatten1_reg_1382(0) = '1') else 
        indvars_iv2_reg_285;
    indvars_iv14_mid2_fu_666_p3 <= 
        indvars_iv14_mid_reg_1468 when (tmp_6_mid2_reg_1447(0) = '1') else 
        indvars_iv_next1_reg_1498;
    indvars_iv14_mid_fu_619_p3 <= 
        ap_const_lv32_0 when (tmp_10_reg_1434(0) = '1') else 
        indvars_iv1_reg_273;
    indvars_iv17_mid2_fu_693_p3 <= 
        indvars_iv17_mid_reg_1480 when (tmp_6_mid2_reg_1447(0) = '1') else 
        indvars_iv_next2_reg_1505;
    indvars_iv17_mid_fu_637_p3 <= 
        ap_const_lv32_0 when (tmp_10_reg_1434(0) = '1') else 
        indvars_iv_reg_261;
    indvars_iv19_mid1_fu_774_p3 <= 
        k_read_reg_1148 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        indvars_iv19_mid_fu_761_p3;
    indvars_iv19_mid2_fu_799_p3 <= 
        indvars_iv19_mid1_reg_1591 when (tmp_6_mid2_reg_1447(0) = '1') else 
        k_read_reg_1148;
    indvars_iv19_mid_fu_761_p3 <= 
        k_read_reg_1148 when (exitcond_flatten1_reg_1382(0) = '1') else 
        indvars_iv5_reg_319;
    indvars_iv21_mid2_fu_792_p3 <= 
        indvars_iv21_mid_fu_780_p3 when (tmp_6_mid2_reg_1447(0) = '1') else 
        ap_const_lv32_0;
    indvars_iv21_mid_fu_780_p3 <= 
        ap_const_lv32_0 when (tmp_10_reg_1434(0) = '1') else 
        indvars_iv4_reg_307;
    indvars_iv24_mid2_fu_843_p3 <= 
        indvars_iv24_mid_fu_814_p3 when (tmp_6_mid2_reg_1447(0) = '1') else 
        ap_const_lv32_0;
    indvars_iv24_mid_fu_814_p3 <= 
        ap_const_lv32_0 when (tmp_10_reg_1434(0) = '1') else 
        indvars_iv3_reg_295;
    indvars_iv_next1_fu_654_p2 <= std_logic_vector(unsigned(indvars_iv14_mid_reg_1468) + unsigned(s_read_reg_1162));
    indvars_iv_next2_fu_658_p2 <= std_logic_vector(unsigned(indvars_iv17_mid_reg_1480) - unsigned(s_read_reg_1162));
    indvars_iv_next3_fu_1089_p2 <= std_logic_vector(unsigned(indvars_iv19_mid2_reg_1621) + unsigned(s_read_reg_1162));
    indvars_iv_next4_fu_1093_p2 <= std_logic_vector(unsigned(indvars_iv21_mid2_reg_1614) + unsigned(s_read_reg_1162));
    indvars_iv_next5_fu_1097_p2 <= std_logic_vector(unsigned(indvars_iv24_mid2_reg_1643) - unsigned(s_read_reg_1162));
    indvars_iv_next_fu_650_p2 <= std_logic_vector(unsigned(indvars_iv12_mid1_reg_1474) + unsigned(s_read_reg_1162));

    mem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter3_exitcond_flatten_reg_1727, ap_reg_ioackin_mem_ARREADY, ap_block_pp0_stage2_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_reg_pp0_iter3_exitcond_flatten_reg_1727 = ap_const_lv1_0) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(ap_CS_fsm_state111, ap_reg_ioackin_mem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state111) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state117, mem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state117) and (mem_BVALID = ap_const_logic_1))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_exitcond_flatten_reg_1727, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_1727) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state112, ap_reg_ioackin_mem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state112) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage2_flag00000000, ap_reg_pp0_iter3_exitcond_flatten_reg_1727)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0) and (ap_reg_pp0_iter3_exitcond_flatten_reg_1727 = ap_const_lv1_0))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state117)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_flag00000000, ap_reg_pp0_iter5_exitcond_flatten_reg_1727)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter6) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten_reg_1727))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state112)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    notlhs1_fu_1040_p2 <= "0" when (tmp_17_fu_1014_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1028_p2 <= "0" when (tmp_15_fu_996_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_1046_p2 <= "1" when (tmp_25_fu_1024_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1034_p2 <= "1" when (tmp_24_fu_1006_p1 = ap_const_lv23_0) else "0";
    o_d_fu_698_p2 <= std_logic_vector(unsigned(i_d_mid_reg_1526) + unsigned(ap_const_lv31_1));
    o_x_1_fu_1123_p3 <= 
        o_x_mid265_op_fu_1117_p3 when (tmp_6_mid2_reg_1447(0) = '1') else 
        ap_const_lv31_1;
    o_x_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_reg_329),32));
    o_x_cast_mid2_cast_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_cast_mid2_reg_1654),32));
    o_x_cast_mid2_fu_861_p3 <= 
        o_x_cast_mid_fu_833_p3 when (tmp_6_mid2_reg_1447(0) = '1') else 
        ap_const_lv31_0;
    o_x_cast_mid_fu_833_p3 <= 
        ap_const_lv31_0 when (tmp_10_reg_1434(0) = '1') else 
        o_x_reg_329;
    o_x_mid265_op_fu_1117_p3 <= 
        ap_const_lv31_1 when (tmp_10_reg_1434(0) = '1') else 
        o_x_op_reg_1827;
    o_x_op_fu_1083_p2 <= std_logic_vector(unsigned(o_x_reg_329) + unsigned(ap_const_lv31_1));
    o_y_1_fu_787_p2 <= std_logic_vector(unsigned(o_y_mid_reg_1585) + unsigned(ap_const_lv31_1));
    o_y_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_y_1_reg_1608),32));
    o_y_cast_mid1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_y_reg_225),32));
    o_y_mid2_fu_868_p3 <= 
        o_y_mid_reg_1585 when (tmp_6_mid2_reg_1447(0) = '1') else 
        o_y_1_reg_1608;
    o_y_mid_fu_767_p3 <= 
        ap_const_lv31_0 when (tmp_10_reg_1434(0) = '1') else 
        o_y_reg_225;
    output_element_fu_1072_p3 <= 
        tmp_s_reg_373 when (tmp_23_fu_1066_p2(0) = '1') else 
        ap_reg_pp0_iter7_temp_reg_1790;
    p_mid1_fu_632_p3 <= 
        smax16_mid_reg_1290 when (exitcond_flatten1_reg_1382(0) = '1') else 
        tmp_9_reg_1463;
    p_mid2_fu_644_p3 <= 
        smax16_mid_reg_1290 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        p_mid1_fu_632_p3;
    p_mid3_fu_662_p2 <= "1" when (signed(indvars_iv_next_reg_1491) > signed(indvars_iv_next1_reg_1498)) else "0";
    p_mid4_fu_688_p2 <= std_logic_vector(unsigned(smax16_mid1_fu_683_p3) + unsigned(indvars_iv_next2_reg_1505));
    p_mid5_fu_703_p3 <= 
        p_mid2_reg_1486 when (tmp_6_mid2_reg_1447(0) = '1') else 
        p_mid4_reg_1532;
    p_mid_fu_449_p2 <= "1" when (signed(k_read_reg_1148) > signed(ap_const_lv32_0)) else "0";
    smax16_mid1_fu_683_p3 <= 
        indvars_iv_next_reg_1491 when (p_mid3_reg_1511(0) = '1') else 
        indvars_iv_next1_reg_1498;
    smax16_mid_fu_460_p3 <= 
        k_read_reg_1148 when (p_mid_reg_1270(0) = '1') else 
        ap_const_lv32_0;
    smax1_fu_885_p3 <= 
        indvars_iv19_mid2_reg_1621 when (tmp_12_reg_1664(0) = '1') else 
        indvars_iv21_mid2_reg_1614;
    smax_fu_606_p3 <= 
        indvars_iv2_reg_285 when (tmp_8_reg_1429(0) = '1') else 
        indvars_iv1_reg_273;
    temp_to_int_fu_993_p1 <= temp_reg_1790;
    tmp1_fu_1079_p2 <= std_logic_vector(unsigned(o_x_cast_mid2_cast_reg_1674) + unsigned(tmp_5_reg_1280));
    tmp1_mid2157_v_fu_809_p3 <= 
        tmp7_mid_reg_1596 when (exitcond_flatten1_reg_1382(0) = '1') else 
        tmp8_reg_1366;
    tmp1_mid289_v_fu_827_p3 <= 
        tmp7_mid1_reg_1602 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        tmp1_mid2157_v_fu_809_p3;
    tmp1_mid2_v_fu_877_p3 <= 
        tmp1_mid289_v_reg_1633 when (tmp_6_mid2_reg_1447(0) = '1') else 
        tmp8_mid1_reg_1649;
    tmp2_fu_970_p2 <= std_logic_vector(unsigned(tmp_2_reg_1275) + unsigned(i_x1_mid2_reg_1747));
    tmp4_fu_522_p2 <= std_logic_vector(unsigned(tmp_3_reg_1344) + unsigned(i_d_cast_mid1_reg_1328));
    tmp4_mid1_fu_721_p2 <= std_logic_vector(unsigned(tmp_3_mid2_fu_708_p3) + unsigned(i_d_cast_fu_718_p1));
    tmp5_mid2127_v_fu_738_p3 <= 
        tmp_3_mid1_reg_1542 when (exitcond_flatten1_reg_1382(0) = '1') else 
        tmp4_reg_1356;
    tmp5_mid2_v_fu_747_p3 <= 
        tmp4_mid1_reg_1565 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        tmp5_mid2127_v_fu_738_p3;
    tmp6_mid2_v_fu_966_p2 <= std_logic_vector(unsigned(tmp6_mid2_v_v_reg_1753) + unsigned(tmp5_mid2_reg_1628));
    tmp6_mid2_v_v_fu_960_p3 <= 
        i_y1_reg_353 when (tmp_18_reg_1731(0) = '1') else 
        i_y_s_reg_1737;
    tmp7_mid2_fu_821_p3 <= 
        tmp7_mid1_reg_1602 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        tmp7_mid3_fu_804_p3;
    tmp7_mid3_fu_804_p3 <= 
        tmp7_mid_reg_1596 when (exitcond_flatten1_reg_1382(0) = '1') else 
        tmp7_reg_1350;
    tmp8_fu_526_p2 <= std_logic_vector(unsigned(tmp7_reg_1350) + unsigned(o_y_cast_mid1_reg_1338));
    tmp8_mid1_fu_855_p2 <= std_logic_vector(unsigned(tmp7_mid2_fu_821_p3) + unsigned(o_y_cast_fu_840_p1));
    tmp9_fu_500_p2 <= std_logic_vector(unsigned(tmp_4_reg_1322) + unsigned(i_d_cast_mid1_fu_496_p1));
    tmp9_mid1_fu_727_p2 <= std_logic_vector(unsigned(tmp_4_mid2_fu_713_p3) + unsigned(i_d_cast_fu_718_p1));
    tmp_10_fu_590_p2 <= (exitcond_flatten45_m_1_reg_1411 or exitcond_flatten1_reg_1382);
    tmp_11_fu_1113_p2 <= std_logic_vector(unsigned(tmp1_mid2_reg_1712) + unsigned(tmp1_reg_1822));
    tmp_12_fu_873_p2 <= "1" when (signed(indvars_iv19_mid2_reg_1621) > signed(indvars_iv21_mid2_reg_1614)) else "0";
    tmp_13_to_int_fu_1010_p1 <= tmp_s_reg_373;
    tmp_14_fu_983_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter2_tmp2_reg_1764) + unsigned(tmp6_mid2_reg_1774));
    tmp_15_fu_996_p4 <= temp_to_int_fu_993_p1(30 downto 23);
    tmp_16_fu_890_p2 <= std_logic_vector(unsigned(smax1_fu_885_p3) + unsigned(indvars_iv24_mid2_reg_1643));
    tmp_17_fu_1014_p4 <= tmp_13_to_int_fu_1010_p1(30 downto 23);
    tmp_18_fu_943_p2 <= "1" when (signed(i_x1_phi_fu_366_p4) < signed(tmp_7_reg_1717)) else "0";
    tmp_19_fu_1052_p2 <= (notrhs_reg_1802 or notlhs_reg_1797);
    tmp_20_fu_1056_p2 <= (notrhs1_reg_1812 or notlhs1_reg_1807);
    tmp_21_fu_1060_p2 <= (tmp_19_fu_1052_p2 and tmp_20_fu_1056_p2);
    tmp_23_fu_1066_p2 <= (tmp_21_fu_1060_p2 and grp_fu_386_p2);
    tmp_24_fu_1006_p1 <= temp_to_int_fu_993_p1(23 - 1 downto 0);
    tmp_25_fu_1024_p1 <= tmp_13_to_int_fu_1010_p1(23 - 1 downto 0);
    tmp_2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1217),32));
    tmp_3_mid2_fu_708_p3 <= 
        tmp_3_mid1_reg_1542 when (exitcond_flatten1_reg_1382(0) = '1') else 
        tmp_3_reg_1344;
    tmp_4_mid2_fu_713_p3 <= 
        tmp_4_mid1_reg_1548 when (exitcond_flatten1_reg_1382(0) = '1') else 
        tmp_4_reg_1322;
    tmp_5_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_1222),32));
    tmp_6_fu_534_p2 <= "1" when (signed(o_x_cast_fu_530_p1) < signed(ox_read_reg_1198)) else "0";
    tmp_6_mid1_fu_585_p3 <= 
        tmp_6_mid_reg_1296 when (exitcond_flatten1_reg_1382(0) = '1') else 
        tmp_6_reg_1371;
    tmp_6_mid2_fu_594_p3 <= 
        tmp_6_mid_reg_1296 when (exitcond_flatten45_m_1_reg_1411(0) = '1') else 
        tmp_6_mid1_fu_585_p3;
    tmp_6_mid_fu_466_p2 <= "1" when (signed(ox_read_reg_1198) > signed(ap_const_lv32_0)) else "0";
    tmp_7_fu_928_p2 <= std_logic_vector(unsigned(i_x_reg_1705) + unsigned(k_read_reg_1148));
    tmp_8_fu_579_p2 <= "1" when (signed(indvars_iv2_reg_285) > signed(indvars_iv1_reg_273)) else "0";
    tmp_9_fu_613_p2 <= std_logic_vector(unsigned(indvars_iv_reg_261) + unsigned(smax_fu_606_p3));

    tmp_s_phi_fu_378_p4_assign_proc : process(tmp_s_reg_373, ap_reg_pp0_iter7_exitcond_flatten_reg_1727, ap_CS_fsm_pp0_stage1, output_element_fu_1072_p3, ap_enable_reg_pp0_iter7, ap_block_pp0_stage1_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter7) and (ap_const_lv1_0 = ap_reg_pp0_iter7_exitcond_flatten_reg_1727) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            tmp_s_phi_fu_378_p4 <= output_element_fu_1072_p3;
        else 
            tmp_s_phi_fu_378_p4 <= tmp_s_reg_373;
        end if; 
    end process;

end behav;
