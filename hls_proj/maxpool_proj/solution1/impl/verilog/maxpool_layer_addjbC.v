// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


`timescale 1 ns / 1 ps

module maxpool_layer_addjbC_AddSubnS_1(clk, reset, ce, a, b, s);

// ---- input/output ports list here ----
input clk;
input reset;
input ce;
input [64 - 1 : 0] a;
input [64 - 1 : 0] b;
output [64 - 1 : 0] s;

// ---- register and wire type variables list here ----

// wire for the primary inputs
wire [64 - 1 : 0] a_reg;
wire [64 - 1 : 0] b_reg;

// wires for each small adder
wire [32 - 1 : 0] a0_cb;
wire [32 - 1 : 0] b0_cb;
wire [64 - 1 : 32] a1_cb;
wire [64 - 1 : 32] b1_cb;

// registers for input register array
reg [32 - 1 : 0] a1_cb_regi1[1 - 1 : 0];
reg [32 - 1 : 0] b1_cb_regi1[1 - 1 : 0];

// wires for each full adder sum
wire [64 - 1 : 0] fas;

// wires and register for carry out bit
wire faccout_ini;
wire faccout0_co0; 
wire faccout1_co1;

reg faccout0_co0_reg; 

// registers for output register array
reg [32 - 1 : 0] s0_ca_rego0[0 - 0 : 0]; 

// wire for the temporary output
wire [64 - 1 : 0] s_tmp;

// ---- RTL code for assignment statements/always blocks/module instantiations here ----
assign a_reg = a;
assign b_reg = b;

// small adder input assigments
assign a0_cb = a_reg[32 - 1 : 0];
assign b0_cb = b_reg[32 - 1 : 0];
assign a1_cb = a_reg[64 - 1 : 32];
assign b1_cb = b_reg[64 - 1 : 32];

// input register array
always @ (posedge clk) begin
    if (ce) begin
        a1_cb_regi1 [0] <= a1_cb;
        b1_cb_regi1 [0] <= b1_cb;
    end
end

// carry out bit processing
always @ (posedge clk) begin
    if (ce) begin
        faccout0_co0_reg <= faccout0_co0;
    end
end

// small adder generation 
        maxpool_layer_addjbC_AddSubnS_1_fadder u0 (
            .faa    ( a0_cb ),
            .fab    ( b0_cb ),
            .facin  ( faccout_ini ),
            .fas    ( fas[31:0] ),
            .facout ( faccout0_co0 )
        );
        maxpool_layer_addjbC_AddSubnS_1_fadder_f u1 (
            .faa    ( a1_cb_regi1[0] ),
            .fab    ( b1_cb_regi1[0] ),
            .facin  ( faccout0_co0_reg ),
            .fas    ( fas[63 :32] ),
            .facout ( faccout1_co1 )
        );

assign faccout_ini = 1'b0;

// output register array
always @ (posedge clk) begin
    if (ce) begin
        s0_ca_rego0 [0] <= fas[32-1 : 0];
    end
end

// get the s_tmp, assign it to the primary output
assign s_tmp[32-1 : 0] = s0_ca_rego0[0];
assign s_tmp[64 - 1 : 32] = fas[63 :32];

assign s = s_tmp;

endmodule

// short adder
module maxpool_layer_addjbC_AddSubnS_1_fadder 
#(parameter
    N = 32
)(
    input  [N-1 : 0]  faa,
    input  [N-1 : 0]  fab,
    input  wire  facin,
    output [N-1 : 0]  fas,
    output wire  facout
);
assign {facout, fas} = faa + fab + facin;

endmodule

// the final stage short adder
module maxpool_layer_addjbC_AddSubnS_1_fadder_f 
#(parameter
    N = 32
)(
    input  [N-1 : 0]  faa,
    input  [N-1 : 0]  fab,
    input  wire  facin,
    output [N-1 : 0]  fas,
    output wire  facout
);
assign {facout, fas} = faa + fab + facin;

endmodule

`timescale 1 ns / 1 ps
module maxpool_layer_addjbC(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



maxpool_layer_addjbC_AddSubnS_1 maxpool_layer_addjbC_AddSubnS_1_U(
    .clk( clk ),
    .reset( reset ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .s( dout ));

endmodule

