// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="maxpool_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=16,HLS_SYN_FF=5620,HLS_SYN_LUT=2777}" *)

module maxpool_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] b;
wire   [31:0] od;
wire   [31:0] ox;
wire   [31:0] oy;
wire   [31:0] id;
wire   [31:0] ix;
wire   [31:0] iy;
wire   [31:0] s;
wire   [31:0] k;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state30;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state37;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state45;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state46;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state51;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg   [31:0] k_read_reg_601;
reg   [31:0] s_read_reg_607;
reg  signed [31:0] iy_read_reg_613;
reg  signed [31:0] ix_read_reg_618;
reg   [31:0] id_read_reg_623;
reg  signed [31:0] oy_read_reg_628;
reg  signed [31:0] ox_read_reg_634;
reg   [31:0] od_read_reg_640;
reg   [31:0] b_read_reg_646;
wire   [31:0] tmp_3_fu_320_p1;
reg   [31:0] tmp_3_reg_651;
wire   [31:0] tmp_4_fu_334_p1;
reg   [31:0] tmp_4_reg_656;
wire   [31:0] next_mul6_fu_338_p2;
reg   [31:0] next_mul6_reg_661;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul4_fu_343_p2;
reg   [31:0] next_mul4_reg_666;
wire   [30:0] b_1_fu_357_p2;
reg   [30:0] b_1_reg_674;
wire   [30:0] o_d_fu_372_p2;
reg   [30:0] o_d_reg_682;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp4_fu_378_p2;
reg  signed [31:0] tmp4_reg_687;
wire   [0:0] tmp_5_fu_367_p2;
wire  signed [31:0] tmp9_fu_384_p2;
reg  signed [31:0] tmp9_reg_692;
wire   [31:0] grp_fu_390_p2;
reg   [31:0] tmp5_reg_697;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_394_p2;
reg   [31:0] tmp7_reg_702;
wire   [31:0] next_mul2_fu_398_p2;
reg   [31:0] next_mul2_reg_707;
wire    ap_CS_fsm_state11;
wire   [30:0] o_y_1_fu_412_p2;
reg   [30:0] o_y_1_reg_715;
wire  signed [31:0] tmp8_fu_418_p2;
reg  signed [31:0] tmp8_reg_720;
wire   [0:0] tmp_9_fu_407_p2;
wire   [31:0] tmp_s_fu_427_p2;
reg   [31:0] tmp_s_reg_725;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_423_p2;
reg   [31:0] tmp1_reg_730;
wire   [31:0] next_mul_fu_432_p2;
reg   [31:0] next_mul_reg_735;
wire    ap_CS_fsm_state19;
wire   [31:0] o_x_cast_fu_437_p1;
reg   [31:0] o_x_cast_reg_740;
wire   [30:0] o_x_1_fu_446_p2;
reg   [30:0] o_x_1_reg_748;
wire   [31:0] tmp_7_fu_452_p2;
reg   [31:0] tmp_7_reg_753;
wire   [0:0] tmp_6_fu_441_p2;
wire  signed [31:0] tmp3_fu_462_p2;
reg  signed [31:0] tmp3_reg_761;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_10_fu_457_p2;
wire   [31:0] tmp10_fu_467_p2;
reg   [31:0] tmp10_reg_766;
wire   [31:0] grp_fu_471_p2;
reg   [31:0] tmp6_reg_771;
wire    ap_CS_fsm_state27;
wire   [31:0] tmp2_fu_480_p2;
reg   [31:0] tmp2_reg_779;
wire    ap_CS_fsm_state28;
wire   [0:0] tmp_13_fu_475_p2;
wire   [31:0] i_x_1_fu_485_p2;
reg   [31:0] i_x_1_reg_784;
wire   [31:0] i_y_1_fu_491_p2;
wire   [31:0] tmp_14_fu_497_p2;
reg   [31:0] tmp_14_reg_794;
wire    ap_CS_fsm_state29;
reg    ap_sig_ioackin_mem_ARREADY;
reg   [31:0] temp_reg_805;
wire   [0:0] notlhs_fu_542_p2;
reg   [0:0] notlhs_reg_812;
wire    ap_CS_fsm_state41;
wire   [0:0] notrhs_fu_548_p2;
reg   [0:0] notrhs_reg_817;
wire   [0:0] notlhs1_fu_554_p2;
reg   [0:0] notlhs1_reg_822;
wire   [0:0] notrhs1_fu_560_p2;
reg   [0:0] notrhs1_reg_827;
wire   [0:0] grp_fu_305_p2;
reg   [0:0] tmp_22_reg_832;
wire   [0:0] tmp_23_fu_580_p2;
reg   [0:0] tmp_23_reg_837;
wire    ap_CS_fsm_state42;
wire   [31:0] output_element_fu_585_p3;
wire    ap_CS_fsm_state43;
wire   [31:0] tmp_11_fu_591_p2;
reg   [31:0] tmp_11_reg_847;
wire    ap_CS_fsm_state44;
reg    ap_sig_ioackin_mem_AWREADY;
reg   [30:0] b_s_reg_167;
reg   [31:0] phi_mul3_reg_178;
reg   [31:0] phi_mul5_reg_190;
reg   [30:0] i_d_reg_202;
wire   [0:0] tmp_2_fu_352_p2;
reg   [30:0] o_y_reg_213;
reg   [31:0] i_y_reg_224;
reg   [30:0] o_x_reg_236;
reg   [31:0] i_x_reg_247;
reg   [31:0] tmp_8_reg_259;
reg   [31:0] i_y1_reg_272;
reg   [31:0] tmp_12_reg_283;
reg   [31:0] i_x1_reg_295;
reg    ap_reg_ioackin_mem_ARREADY;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
wire    ap_CS_fsm_state38;
wire   [29:0] tmp_fu_310_p4;
wire   [29:0] tmp_1_fu_324_p4;
wire   [31:0] b_cast_fu_348_p1;
wire   [31:0] i_d_cast_fu_363_p1;
wire    ap_CS_fsm_state4;
wire   [31:0] o_y_cast_fu_403_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state21;
wire   [31:0] temp_to_int_fu_507_p1;
wire   [31:0] tmp_13_to_int_fu_524_p1;
wire   [7:0] tmp_15_fu_510_p4;
wire   [22:0] tmp_16_fu_520_p1;
wire   [7:0] tmp_17_fu_528_p4;
wire   [22:0] tmp_18_fu_538_p1;
wire   [0:0] tmp_19_fu_566_p2;
wire   [0:0] tmp_20_fu_570_p2;
wire   [0:0] tmp_21_fu_574_p2;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

maxpool_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
maxpool_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .b(b),
    .od(od),
    .ox(ox),
    .oy(oy),
    .id(id),
    .ix(ix),
    .iy(iy),
    .s(s),
    .k(k)
);

maxpool_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
maxpool_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(tmp_14_reg_794),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(tmp_11_reg_847),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(tmp_8_reg_259),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

maxpool_layer_fcmbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
maxpool_layer_fcmbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(temp_reg_805),
    .din1(tmp_12_reg_283),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_305_p2)
);

maxpool_layer_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulcud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp4_reg_687),
    .din1(iy_read_reg_613),
    .ce(1'b1),
    .dout(grp_fu_390_p2)
);

maxpool_layer_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulcud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp9_reg_692),
    .din1(oy_read_reg_628),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

maxpool_layer_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulcud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp8_reg_720),
    .din1(ox_read_reg_634),
    .ce(1'b1),
    .dout(grp_fu_423_p2)
);

maxpool_layer_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulcud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp3_reg_761),
    .din1(ix_read_reg_618),
    .ce(1'b1),
    .dout(grp_fu_471_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            if ((ap_sig_ioackin_mem_ARREADY == 1'b1)) begin
                ap_reg_ioackin_mem_ARREADY <= 1'b0;
            end else if ((1'b1 == mem_ARREADY)) begin
                ap_reg_ioackin_mem_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            if ((ap_sig_ioackin_mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b0;
            end else if ((1'b1 == mem_AWREADY)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            if ((ap_sig_ioackin_mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b0;
            end else if ((1'b1 == mem_WREADY)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_367_p2 == 1'd0))) begin
        b_s_reg_167 <= b_1_reg_674;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_s_reg_167 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_2_fu_352_p2))) begin
        i_d_reg_202 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (tmp_9_fu_407_p2 == 1'd0))) begin
        i_d_reg_202 <= o_d_reg_682;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_x1_reg_295 <= i_x_1_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        i_x1_reg_295 <= i_x_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_x_reg_247 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state51) & (mem_BVALID == 1'b1))) begin
        i_x_reg_247 <= next_mul_reg_735;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == tmp_13_fu_475_p2))) begin
        i_y1_reg_272 <= i_y_1_fu_491_p2;
    end else if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == tmp_6_fu_441_p2))) begin
        i_y1_reg_272 <= i_y_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (tmp_6_fu_441_p2 == 1'd0))) begin
        i_y_reg_224 <= next_mul2_reg_707;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_y_reg_224 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        o_x_reg_236 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state51) & (mem_BVALID == 1'b1))) begin
        o_x_reg_236 <= o_x_1_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (tmp_6_fu_441_p2 == 1'd0))) begin
        o_y_reg_213 <= o_y_1_reg_715;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        o_y_reg_213 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_367_p2 == 1'd0))) begin
        phi_mul3_reg_178 <= next_mul4_reg_666;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul3_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_367_p2 == 1'd0))) begin
        phi_mul5_reg_190 <= next_mul6_reg_661;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul5_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        tmp_12_reg_283 <= output_element_fu_585_p3;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp_12_reg_283 <= tmp_8_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == tmp_13_fu_475_p2))) begin
        tmp_8_reg_259 <= tmp_12_reg_283;
    end else if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == tmp_6_fu_441_p2))) begin
        tmp_8_reg_259 <= 32'd3322716160;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_1_reg_674 <= b_1_fu_357_p2;
        next_mul4_reg_666 <= next_mul4_fu_343_p2;
        next_mul6_reg_661 <= next_mul6_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_read_reg_646 <= b;
        id_read_reg_623 <= id;
        ix_read_reg_618 <= ix;
        iy_read_reg_613 <= iy;
        k_read_reg_601 <= k;
        od_read_reg_640 <= od;
        ox_read_reg_634 <= ox;
        oy_read_reg_628 <= oy;
        s_read_reg_607 <= s;
        tmp_3_reg_651[29 : 0] <= tmp_3_fu_320_p1[29 : 0];
        tmp_4_reg_656[29 : 0] <= tmp_4_fu_334_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (1'd1 == tmp_13_fu_475_p2))) begin
        i_x_1_reg_784 <= i_x_1_fu_485_p2;
        tmp2_reg_779 <= tmp2_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        next_mul2_reg_707 <= next_mul2_fu_398_p2;
        o_y_1_reg_715 <= o_y_1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        next_mul_reg_735 <= next_mul_fu_432_p2;
        o_x_1_reg_748 <= o_x_1_fu_446_p2;
        o_x_cast_reg_740[30 : 0] <= o_x_cast_fu_437_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        notlhs1_reg_822 <= notlhs1_fu_554_p2;
        notlhs_reg_812 <= notlhs_fu_542_p2;
        notrhs1_reg_827 <= notrhs1_fu_560_p2;
        notrhs_reg_817 <= notrhs_fu_548_p2;
        tmp_22_reg_832 <= grp_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        o_d_reg_682 <= o_d_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (mem_RVALID == 1'b1))) begin
        temp_reg_805 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (tmp_10_fu_457_p2 == 1'd0))) begin
        tmp10_reg_766 <= tmp10_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp1_reg_730 <= grp_fu_423_p2;
        tmp_s_reg_725 <= tmp_s_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == tmp_10_fu_457_p2))) begin
        tmp3_reg_761 <= tmp3_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_367_p2 == 1'd1))) begin
        tmp4_reg_687 <= tmp4_fu_378_p2;
        tmp9_reg_692 <= tmp9_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp5_reg_697 <= grp_fu_390_p2;
        tmp7_reg_702 <= grp_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        tmp6_reg_771 <= grp_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd1 == tmp_9_fu_407_p2))) begin
        tmp8_reg_720 <= tmp8_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_11_reg_847 <= tmp_11_fu_591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_14_reg_794 <= tmp_14_fu_497_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_23_reg_837 <= tmp_23_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (1'd1 == tmp_6_fu_441_p2))) begin
        tmp_7_reg_753 <= tmp_7_fu_452_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_2_fu_352_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_2_fu_352_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_AWREADY)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (1'b0 == ap_reg_ioackin_mem_ARREADY))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'b0 == ap_reg_ioackin_mem_AWREADY))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (mem_BVALID == 1'b1))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) & (mem_RVALID == 1'b1))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (1'b0 == ap_reg_ioackin_mem_WREADY))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_2_fu_352_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_fu_367_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_9_fu_407_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (tmp_6_fu_441_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (tmp_10_fu_457_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (1'd0 == tmp_13_fu_475_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (mem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_357_p2 = (b_s_reg_167 + 31'd1);

assign b_cast_fu_348_p1 = b_s_reg_167;

assign i_d_cast_fu_363_p1 = i_d_reg_202;

assign i_x_1_fu_485_p2 = (32'd1 + i_x1_reg_295);

assign i_y_1_fu_491_p2 = (i_y1_reg_272 + 32'd1);

assign next_mul2_fu_398_p2 = (i_y_reg_224 + s_read_reg_607);

assign next_mul4_fu_343_p2 = (phi_mul3_reg_178 + id_read_reg_623);

assign next_mul6_fu_338_p2 = (phi_mul5_reg_190 + od_read_reg_640);

assign next_mul_fu_432_p2 = (i_x_reg_247 + s_read_reg_607);

assign notlhs1_fu_554_p2 = ((tmp_17_fu_528_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_542_p2 = ((tmp_15_fu_510_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_560_p2 = ((tmp_18_fu_538_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_548_p2 = ((tmp_16_fu_520_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_d_fu_372_p2 = (i_d_reg_202 + 31'd1);

assign o_x_1_fu_446_p2 = (o_x_reg_236 + 31'd1);

assign o_x_cast_fu_437_p1 = o_x_reg_236;

assign o_y_1_fu_412_p2 = (o_y_reg_213 + 31'd1);

assign o_y_cast_fu_403_p1 = o_y_reg_213;

assign output_element_fu_585_p3 = ((tmp_23_reg_837[0:0] === 1'b1) ? tmp_12_reg_283 : temp_reg_805);

assign temp_to_int_fu_507_p1 = temp_reg_805;

assign tmp10_fu_467_p2 = (tmp_4_reg_656 + o_x_cast_reg_740);

assign tmp2_fu_480_p2 = (tmp_3_reg_651 + i_x1_reg_295);

assign tmp3_fu_462_p2 = (i_y1_reg_272 + tmp5_reg_697);

assign tmp4_fu_378_p2 = (i_d_cast_fu_363_p1 + phi_mul3_reg_178);

assign tmp8_fu_418_p2 = (o_y_cast_fu_403_p1 + tmp7_reg_702);

assign tmp9_fu_384_p2 = (i_d_cast_fu_363_p1 + phi_mul5_reg_190);

assign tmp_10_fu_457_p2 = (($signed(i_y1_reg_272) < $signed(tmp_s_reg_725)) ? 1'b1 : 1'b0);

assign tmp_11_fu_591_p2 = (tmp10_reg_766 + tmp1_reg_730);

assign tmp_13_fu_475_p2 = (($signed(i_x1_reg_295) < $signed(tmp_7_reg_753)) ? 1'b1 : 1'b0);

assign tmp_13_to_int_fu_524_p1 = tmp_12_reg_283;

assign tmp_14_fu_497_p2 = (tmp2_reg_779 + tmp6_reg_771);

assign tmp_15_fu_510_p4 = {{temp_to_int_fu_507_p1[30:23]}};

assign tmp_16_fu_520_p1 = temp_to_int_fu_507_p1[22:0];

assign tmp_17_fu_528_p4 = {{tmp_13_to_int_fu_524_p1[30:23]}};

assign tmp_18_fu_538_p1 = tmp_13_to_int_fu_524_p1[22:0];

assign tmp_19_fu_566_p2 = (notrhs_reg_817 | notlhs_reg_812);

assign tmp_1_fu_324_p4 = {{output_offset[31:2]}};

assign tmp_20_fu_570_p2 = (notrhs1_reg_827 | notlhs1_reg_822);

assign tmp_21_fu_574_p2 = (tmp_19_fu_566_p2 & tmp_20_fu_570_p2);

assign tmp_23_fu_580_p2 = (tmp_21_fu_574_p2 & tmp_22_reg_832);

assign tmp_2_fu_352_p2 = (($signed(b_cast_fu_348_p1) < $signed(b_read_reg_646)) ? 1'b1 : 1'b0);

assign tmp_3_fu_320_p1 = tmp_fu_310_p4;

assign tmp_4_fu_334_p1 = tmp_1_fu_324_p4;

assign tmp_5_fu_367_p2 = (($signed(i_d_cast_fu_363_p1) < $signed(od_read_reg_640)) ? 1'b1 : 1'b0);

assign tmp_6_fu_441_p2 = (($signed(o_x_cast_fu_437_p1) < $signed(ox_read_reg_634)) ? 1'b1 : 1'b0);

assign tmp_7_fu_452_p2 = (i_x_reg_247 + k_read_reg_601);

assign tmp_9_fu_407_p2 = (($signed(o_y_cast_fu_403_p1) < $signed(oy_read_reg_628)) ? 1'b1 : 1'b0);

assign tmp_fu_310_p4 = {{input_offset[31:2]}};

assign tmp_s_fu_427_p2 = (i_y_reg_224 + k_read_reg_601);

always @ (posedge ap_clk) begin
    tmp_3_reg_651[31:30] <= 2'b00;
    tmp_4_reg_656[31:30] <= 2'b00;
    o_x_cast_reg_740[31] <= 1'b0;
end

endmodule //maxpool_layer
