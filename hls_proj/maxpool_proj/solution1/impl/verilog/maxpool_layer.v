// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="maxpool_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.779000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=92,HLS_SYN_FF=15678,HLS_SYN_LUT=6630}" *)

module maxpool_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_state3 = 97'd4;
parameter    ap_ST_fsm_state4 = 97'd8;
parameter    ap_ST_fsm_state5 = 97'd16;
parameter    ap_ST_fsm_state6 = 97'd32;
parameter    ap_ST_fsm_state7 = 97'd64;
parameter    ap_ST_fsm_state8 = 97'd128;
parameter    ap_ST_fsm_state9 = 97'd256;
parameter    ap_ST_fsm_state10 = 97'd512;
parameter    ap_ST_fsm_state11 = 97'd1024;
parameter    ap_ST_fsm_state12 = 97'd2048;
parameter    ap_ST_fsm_state13 = 97'd4096;
parameter    ap_ST_fsm_state14 = 97'd8192;
parameter    ap_ST_fsm_state15 = 97'd16384;
parameter    ap_ST_fsm_state16 = 97'd32768;
parameter    ap_ST_fsm_state17 = 97'd65536;
parameter    ap_ST_fsm_state18 = 97'd131072;
parameter    ap_ST_fsm_state19 = 97'd262144;
parameter    ap_ST_fsm_state20 = 97'd524288;
parameter    ap_ST_fsm_state21 = 97'd1048576;
parameter    ap_ST_fsm_state22 = 97'd2097152;
parameter    ap_ST_fsm_state23 = 97'd4194304;
parameter    ap_ST_fsm_state24 = 97'd8388608;
parameter    ap_ST_fsm_state25 = 97'd16777216;
parameter    ap_ST_fsm_state26 = 97'd33554432;
parameter    ap_ST_fsm_state27 = 97'd67108864;
parameter    ap_ST_fsm_state28 = 97'd134217728;
parameter    ap_ST_fsm_state29 = 97'd268435456;
parameter    ap_ST_fsm_state30 = 97'd536870912;
parameter    ap_ST_fsm_state31 = 97'd1073741824;
parameter    ap_ST_fsm_state32 = 97'd2147483648;
parameter    ap_ST_fsm_state33 = 97'd4294967296;
parameter    ap_ST_fsm_state34 = 97'd8589934592;
parameter    ap_ST_fsm_state35 = 97'd17179869184;
parameter    ap_ST_fsm_state36 = 97'd34359738368;
parameter    ap_ST_fsm_state37 = 97'd68719476736;
parameter    ap_ST_fsm_state38 = 97'd137438953472;
parameter    ap_ST_fsm_state39 = 97'd274877906944;
parameter    ap_ST_fsm_state40 = 97'd549755813888;
parameter    ap_ST_fsm_state41 = 97'd1099511627776;
parameter    ap_ST_fsm_state42 = 97'd2199023255552;
parameter    ap_ST_fsm_state43 = 97'd4398046511104;
parameter    ap_ST_fsm_state44 = 97'd8796093022208;
parameter    ap_ST_fsm_state45 = 97'd17592186044416;
parameter    ap_ST_fsm_state46 = 97'd35184372088832;
parameter    ap_ST_fsm_state47 = 97'd70368744177664;
parameter    ap_ST_fsm_state48 = 97'd140737488355328;
parameter    ap_ST_fsm_state49 = 97'd281474976710656;
parameter    ap_ST_fsm_state50 = 97'd562949953421312;
parameter    ap_ST_fsm_state51 = 97'd1125899906842624;
parameter    ap_ST_fsm_state52 = 97'd2251799813685248;
parameter    ap_ST_fsm_state53 = 97'd4503599627370496;
parameter    ap_ST_fsm_state54 = 97'd9007199254740992;
parameter    ap_ST_fsm_state55 = 97'd18014398509481984;
parameter    ap_ST_fsm_state56 = 97'd36028797018963968;
parameter    ap_ST_fsm_state57 = 97'd72057594037927936;
parameter    ap_ST_fsm_state58 = 97'd144115188075855872;
parameter    ap_ST_fsm_state59 = 97'd288230376151711744;
parameter    ap_ST_fsm_state60 = 97'd576460752303423488;
parameter    ap_ST_fsm_state61 = 97'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 97'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 97'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 97'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 97'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 97'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 97'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 97'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 97'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 97'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_pp0_stage0 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_pp0_stage1 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_pp0_stage2 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_state109 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_state110 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_state111 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_state112 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_state113 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_state114 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_state115 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_state116 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state117 = 97'd79228162514264337593543950336;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] b;
wire   [31:0] od;
wire   [31:0] ox;
wire   [31:0] oy;
wire   [31:0] id;
wire   [31:0] ix;
wire   [31:0] iy;
wire   [31:0] s;
wire   [31:0] k;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage2_flag00000000;
reg   [0:0] exitcond_flatten_reg_1727;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_1727;
reg    mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_1727;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state111;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state112;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state117;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg   [63:0] indvar_flatten_reg_341;
reg   [31:0] i_y1_reg_353;
reg   [31:0] i_x1_reg_363;
reg   [31:0] tmp_s_reg_373;
reg   [31:0] k_read_reg_1148;
reg  signed [31:0] s_read_reg_1162;
reg  signed [31:0] iy_read_reg_1175;
reg  signed [31:0] ix_read_reg_1180;
reg  signed [31:0] id_read_reg_1185;
reg  signed [31:0] oy_read_reg_1191;
reg  signed [31:0] ox_read_reg_1198;
reg  signed [31:0] od_read_reg_1205;
reg   [31:0] b_read_reg_1212;
reg   [29:0] tmp_reg_1217;
reg   [29:0] tmp_1_reg_1222;
wire   [63:0] grp_fu_419_p2;
reg   [63:0] bound1_reg_1237;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [95:0] grp_fu_431_p2;
reg   [95:0] bound2_reg_1254;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire   [0:0] p_mid_fu_449_p2;
reg   [0:0] p_mid_reg_1270;
wire    ap_CS_fsm_state44;
wire   [31:0] tmp_2_fu_454_p1;
reg   [31:0] tmp_2_reg_1275;
wire    ap_CS_fsm_state45;
wire   [31:0] tmp_5_fu_457_p1;
reg   [31:0] tmp_5_reg_1280;
wire   [127:0] grp_fu_443_p2;
reg   [127:0] bound3_reg_1285;
wire   [31:0] smax16_mid_fu_460_p3;
reg   [31:0] smax16_mid_reg_1290;
wire   [0:0] tmp_6_mid_fu_466_p2;
reg   [0:0] tmp_6_mid_reg_1296;
wire   [0:0] exitcond_flatten45_m_fu_471_p2;
reg   [0:0] exitcond_flatten45_m_reg_1302;
wire   [31:0] b_cast_mid1_fu_476_p1;
reg   [31:0] b_cast_mid1_reg_1307;
wire    ap_CS_fsm_state46;
wire   [0:0] exitcond_flatten3_fu_485_p2;
reg   [0:0] exitcond_flatten3_reg_1313;
wire   [127:0] grp_fu_490_p2;
reg   [127:0] indvar_flatten_next3_reg_1317;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_480_p2;
reg   [31:0] tmp_4_reg_1322;
wire    ap_CS_fsm_state52;
wire   [31:0] i_d_cast_mid1_fu_496_p1;
reg   [31:0] i_d_cast_mid1_reg_1328;
wire    ap_CS_fsm_state53;
wire  signed [31:0] tmp9_fu_500_p2;
reg  signed [31:0] tmp9_reg_1333;
wire   [31:0] o_y_cast_mid1_fu_513_p1;
reg   [31:0] o_y_cast_mid1_reg_1338;
wire    ap_CS_fsm_state55;
wire   [31:0] grp_fu_505_p2;
reg   [31:0] tmp_3_reg_1344;
wire    ap_CS_fsm_state60;
wire   [31:0] grp_fu_509_p2;
reg   [31:0] tmp7_reg_1350;
wire   [31:0] tmp4_fu_522_p2;
reg   [31:0] tmp4_reg_1356;
wire    ap_CS_fsm_state61;
wire   [31:0] grp_fu_517_p2;
reg   [31:0] i_y_reg_1361;
wire   [31:0] tmp8_fu_526_p2;
reg   [31:0] tmp8_reg_1366;
wire   [0:0] tmp_6_fu_534_p2;
reg   [0:0] tmp_6_reg_1371;
wire   [30:0] b_s_4_fu_539_p2;
reg   [30:0] b_s_4_reg_1376;
wire   [0:0] exitcond_flatten1_fu_545_p2;
reg   [0:0] exitcond_flatten1_reg_1382;
wire   [0:0] exitcond_flatten2_fu_550_p2;
reg   [0:0] exitcond_flatten2_reg_1400;
wire   [31:0] b_cast_fu_555_p1;
wire    ap_CS_fsm_state62;
wire   [0:0] exitcond_flatten45_m_1_fu_568_p3;
reg   [0:0] exitcond_flatten45_m_1_reg_1411;
wire   [30:0] b_mid2_fu_573_p3;
reg   [30:0] b_mid2_reg_1424;
wire   [0:0] tmp_8_fu_579_p2;
reg   [0:0] tmp_8_reg_1429;
wire    ap_CS_fsm_state63;
wire   [0:0] tmp_10_fu_590_p2;
reg   [0:0] tmp_10_reg_1434;
wire   [0:0] tmp_6_mid2_fu_594_p3;
reg   [0:0] tmp_6_mid2_reg_1447;
wire   [31:0] tmp_9_fu_613_p2;
reg   [31:0] tmp_9_reg_1463;
wire    ap_CS_fsm_state64;
wire   [31:0] indvars_iv14_mid_fu_619_p3;
reg   [31:0] indvars_iv14_mid_reg_1468;
wire   [31:0] indvars_iv12_mid1_fu_626_p3;
reg   [31:0] indvars_iv12_mid1_reg_1474;
wire   [31:0] indvars_iv17_mid_fu_637_p3;
reg   [31:0] indvars_iv17_mid_reg_1480;
wire    ap_CS_fsm_state65;
wire   [31:0] p_mid2_fu_644_p3;
reg   [31:0] p_mid2_reg_1486;
wire   [31:0] indvars_iv_next_fu_650_p2;
reg   [31:0] indvars_iv_next_reg_1491;
wire   [31:0] indvars_iv_next1_fu_654_p2;
reg   [31:0] indvars_iv_next1_reg_1498;
wire   [31:0] indvars_iv_next2_fu_658_p2;
reg   [31:0] indvars_iv_next2_reg_1505;
wire    ap_CS_fsm_state66;
wire   [0:0] p_mid3_fu_662_p2;
reg   [0:0] p_mid3_reg_1511;
wire   [31:0] indvars_iv14_mid2_fu_666_p3;
reg   [31:0] indvars_iv14_mid2_reg_1516;
wire   [31:0] indvars_iv12_mid2_fu_671_p3;
reg   [31:0] indvars_iv12_mid2_reg_1521;
wire   [30:0] i_d_mid_fu_676_p3;
reg   [30:0] i_d_mid_reg_1526;
wire    ap_CS_fsm_state67;
wire   [31:0] p_mid4_fu_688_p2;
reg   [31:0] p_mid4_reg_1532;
wire   [31:0] indvars_iv17_mid2_fu_693_p3;
reg   [31:0] indvars_iv17_mid2_reg_1537;
wire   [31:0] grp_fu_558_p2;
reg   [31:0] tmp_3_mid1_reg_1542;
wire    ap_CS_fsm_state68;
wire  signed [31:0] grp_fu_563_p2;
reg  signed [31:0] tmp_4_mid1_reg_1548;
wire   [30:0] o_d_fu_698_p2;
reg   [30:0] o_d_reg_1554;
wire   [31:0] p_mid5_fu_703_p3;
reg   [31:0] p_mid5_reg_1560;
wire   [31:0] tmp4_mid1_fu_721_p2;
reg   [31:0] tmp4_mid1_reg_1565;
wire    ap_CS_fsm_state69;
wire  signed [31:0] tmp9_mid1_fu_727_p2;
reg  signed [31:0] tmp9_mid1_reg_1570;
wire   [30:0] i_d_mid2_fu_733_p3;
reg   [30:0] i_d_mid2_reg_1575;
wire  signed [31:0] tmp5_mid2_v_fu_747_p3;
reg  signed [31:0] tmp5_mid2_v_reg_1580;
wire    ap_CS_fsm_state70;
wire   [30:0] o_y_mid_fu_767_p3;
reg   [30:0] o_y_mid_reg_1585;
wire    ap_CS_fsm_state75;
wire   [31:0] indvars_iv19_mid1_fu_774_p3;
reg   [31:0] indvars_iv19_mid1_reg_1591;
wire   [31:0] grp_fu_743_p2;
reg   [31:0] tmp7_mid_reg_1596;
wire    ap_CS_fsm_state76;
wire   [31:0] grp_fu_753_p2;
reg   [31:0] tmp7_mid1_reg_1602;
wire   [30:0] o_y_1_fu_787_p2;
reg   [30:0] o_y_1_reg_1608;
wire   [31:0] indvars_iv21_mid2_fu_792_p3;
reg   [31:0] indvars_iv21_mid2_reg_1614;
wire   [31:0] indvars_iv19_mid2_fu_799_p3;
reg   [31:0] indvars_iv19_mid2_reg_1621;
wire   [31:0] grp_fu_757_p2;
reg   [31:0] tmp5_mid2_reg_1628;
wire    ap_CS_fsm_state77;
wire   [31:0] tmp1_mid289_v_fu_827_p3;
reg   [31:0] tmp1_mid289_v_reg_1633;
wire   [31:0] o_y_cast_fu_840_p1;
wire   [31:0] indvars_iv24_mid2_fu_843_p3;
reg   [31:0] indvars_iv24_mid2_reg_1643;
wire   [31:0] tmp8_mid1_fu_855_p2;
reg   [31:0] tmp8_mid1_reg_1649;
wire   [30:0] o_x_cast_mid2_fu_861_p3;
reg   [30:0] o_x_cast_mid2_reg_1654;
wire   [30:0] o_y_mid2_fu_868_p3;
reg   [30:0] o_y_mid2_reg_1659;
wire   [0:0] tmp_12_fu_873_p2;
reg   [0:0] tmp_12_reg_1664;
wire  signed [31:0] tmp1_mid2_v_fu_877_p3;
reg  signed [31:0] tmp1_mid2_v_reg_1669;
wire    ap_CS_fsm_state78;
wire   [31:0] o_x_cast_mid2_cast_fu_882_p1;
reg   [31:0] o_x_cast_mid2_cast_reg_1674;
wire   [31:0] tmp_16_fu_890_p2;
reg   [31:0] tmp_16_reg_1680;
wire    ap_CS_fsm_state79;
wire   [31:0] grp_fu_850_p2;
reg   [31:0] i_y_mid1_reg_1695;
wire    ap_CS_fsm_state83;
wire   [31:0] i_y_mid2_fu_922_p3;
reg   [31:0] i_y_mid2_reg_1700;
wire    ap_CS_fsm_state84;
wire   [31:0] grp_fu_895_p2;
reg   [31:0] i_x_reg_1705;
wire   [31:0] grp_fu_900_p2;
reg   [31:0] tmp1_mid2_reg_1712;
wire    ap_CS_fsm_state85;
wire   [31:0] tmp_7_fu_928_p2;
reg   [31:0] tmp_7_reg_1717;
wire   [63:0] grp_fu_910_p2;
reg   [63:0] bound_reg_1722;
wire   [0:0] exitcond_flatten_fu_932_p2;
wire    ap_block_state86_pp0_stage0_iter0;
wire    ap_block_state89_pp0_stage0_iter1;
wire    ap_block_state92_pp0_stage0_iter2;
wire    ap_block_state95_pp0_stage0_iter3;
wire    ap_block_state98_pp0_stage0_iter4;
wire    ap_block_state101_pp0_stage0_iter5;
reg    ap_block_state104_pp0_stage0_iter6;
wire    ap_block_state107_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_1727;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_1727;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_1727;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_1727;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_1727;
wire   [0:0] tmp_18_fu_943_p2;
reg   [0:0] tmp_18_reg_1731;
wire   [31:0] i_y_s_fu_948_p2;
reg   [31:0] i_y_s_reg_1737;
wire   [63:0] grp_fu_937_p2;
reg   [63:0] indvar_flatten_next_reg_1742;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state87_pp0_stage1_iter0;
wire    ap_block_state90_pp0_stage1_iter1;
wire    ap_block_state93_pp0_stage1_iter2;
wire    ap_block_state96_pp0_stage1_iter3;
wire    ap_block_state99_pp0_stage1_iter4;
wire    ap_block_state102_pp0_stage1_iter5;
wire    ap_block_state105_pp0_stage1_iter6;
wire    ap_block_state108_pp0_stage1_iter7;
wire    ap_block_pp0_stage1_flag00011001;
wire   [31:0] i_x1_mid2_fu_954_p3;
reg   [31:0] i_x1_mid2_reg_1747;
wire   [31:0] tmp6_mid2_v_v_fu_960_p3;
reg   [31:0] tmp6_mid2_v_v_reg_1753;
wire  signed [31:0] tmp6_mid2_v_fu_966_p2;
reg  signed [31:0] tmp6_mid2_v_reg_1759;
wire    ap_block_state88_pp0_stage2_iter0;
wire    ap_block_state91_pp0_stage2_iter1;
wire    ap_block_state94_pp0_stage2_iter2;
wire    ap_block_state97_pp0_stage2_iter3;
reg    ap_sig_ioackin_mem_ARREADY;
reg    ap_block_state97_io;
wire    ap_block_state100_pp0_stage2_iter4;
wire    ap_block_state103_pp0_stage2_iter5;
wire    ap_block_state106_pp0_stage2_iter6;
reg    ap_block_pp0_stage2_flag00011001;
wire   [31:0] tmp2_fu_970_p2;
reg   [31:0] tmp2_reg_1764;
reg   [31:0] ap_reg_pp0_iter1_tmp2_reg_1764;
reg   [31:0] ap_reg_pp0_iter2_tmp2_reg_1764;
wire   [31:0] i_x_1_fu_974_p2;
reg   [31:0] i_x_1_reg_1769;
wire   [31:0] grp_fu_979_p2;
reg   [31:0] tmp6_mid2_reg_1774;
wire   [31:0] tmp_14_fu_983_p2;
reg   [31:0] tmp_14_reg_1779;
reg   [31:0] temp_reg_1790;
reg   [31:0] ap_reg_pp0_iter7_temp_reg_1790;
wire   [0:0] notlhs_fu_1028_p2;
reg   [0:0] notlhs_reg_1797;
wire   [0:0] notrhs_fu_1034_p2;
reg   [0:0] notrhs_reg_1802;
wire   [0:0] notlhs1_fu_1040_p2;
reg   [0:0] notlhs1_reg_1807;
wire   [0:0] notrhs1_fu_1046_p2;
reg   [0:0] notrhs1_reg_1812;
wire   [31:0] output_element_fu_1072_p3;
reg    ap_enable_reg_pp0_iter7;
wire   [31:0] tmp1_fu_1079_p2;
reg   [31:0] tmp1_reg_1822;
wire    ap_CS_fsm_state109;
wire   [30:0] o_x_op_fu_1083_p2;
reg   [30:0] o_x_op_reg_1827;
wire   [31:0] indvars_iv_next3_fu_1089_p2;
reg   [31:0] indvars_iv_next3_reg_1832;
wire   [31:0] indvars_iv_next4_fu_1093_p2;
reg   [31:0] indvars_iv_next4_reg_1837;
wire   [31:0] indvars_iv_next5_fu_1097_p2;
reg   [31:0] indvars_iv_next5_reg_1842;
wire   [31:0] tmp_11_fu_1113_p2;
reg   [31:0] tmp_11_reg_1847;
wire    ap_CS_fsm_state110;
wire   [30:0] o_x_1_fu_1123_p3;
reg   [30:0] o_x_1_reg_1852;
wire   [63:0] grp_fu_1101_p2;
reg   [63:0] indvar_flatten43_op_reg_1857;
wire   [95:0] grp_fu_1107_p2;
reg   [95:0] indvar_flatten95_op_reg_1862;
reg    ap_sig_ioackin_mem_AWREADY;
wire   [63:0] indvar_flatten_next1_fu_1136_p3;
reg   [63:0] indvar_flatten_next1_reg_1872;
wire   [95:0] indvar_flatten_next2_fu_1142_p3;
reg   [95:0] indvar_flatten_next2_reg_1877;
wire    ap_block_pp0_stage1_flag00011011;
reg    ap_condition_pp0_exit_iter0_state87;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage2_flag00011011;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [127:0] indvar_flatten1_reg_189;
reg   [30:0] b_s_reg_201;
reg   [30:0] i_d_reg_213;
reg   [30:0] o_y_reg_225;
reg   [95:0] indvar_flatten2_reg_237;
reg   [63:0] indvar_flatten3_reg_249;
reg   [31:0] indvars_iv_reg_261;
reg   [31:0] indvars_iv1_reg_273;
reg   [31:0] indvars_iv2_reg_285;
reg   [31:0] indvars_iv3_reg_295;
reg   [31:0] indvars_iv4_reg_307;
reg   [31:0] indvars_iv5_reg_319;
reg   [30:0] o_x_reg_329;
reg   [63:0] indvar_flatten_phi_fu_345_p4;
reg   [31:0] i_y1_phi_fu_356_p4;
reg   [31:0] i_x1_phi_fu_366_p4;
reg   [31:0] tmp_s_phi_fu_378_p4;
wire    ap_block_pp0_stage1_flag00000000;
reg    ap_reg_ioackin_mem_ARREADY;
wire    ap_block_pp0_stage2_flag00001001;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
wire  signed [31:0] cast1_fu_411_p0;
wire  signed [31:0] cast2_fu_415_p0;
wire   [31:0] grp_fu_419_p0;
wire   [31:0] grp_fu_419_p1;
wire   [63:0] grp_fu_431_p0;
wire   [31:0] grp_fu_431_p1;
wire   [95:0] grp_fu_443_p0;
wire   [31:0] grp_fu_443_p1;
wire   [30:0] grp_fu_480_p1;
wire   [30:0] grp_fu_505_p1;
wire    ap_CS_fsm_state54;
wire   [30:0] grp_fu_517_p1;
wire   [31:0] o_x_cast_fu_530_p1;
wire   [30:0] grp_fu_558_p0;
wire   [30:0] grp_fu_563_p0;
wire   [0:0] tmp_6_mid1_fu_585_p3;
wire   [31:0] smax_fu_606_p3;
wire   [31:0] indvars_iv12_mid_fu_600_p3;
wire   [31:0] p_mid1_fu_632_p3;
wire   [31:0] smax16_mid1_fu_683_p3;
wire   [31:0] tmp_3_mid2_fu_708_p3;
wire   [31:0] i_d_cast_fu_718_p1;
wire   [31:0] tmp_4_mid2_fu_713_p3;
wire   [31:0] tmp5_mid2127_v_fu_738_p3;
wire    ap_CS_fsm_state71;
wire   [31:0] indvars_iv19_mid_fu_761_p3;
wire   [31:0] indvars_iv21_mid_fu_780_p3;
wire   [31:0] tmp7_mid3_fu_804_p3;
wire   [31:0] tmp1_mid2157_v_fu_809_p3;
wire   [31:0] indvars_iv24_mid_fu_814_p3;
wire   [30:0] grp_fu_850_p0;
wire   [31:0] tmp7_mid2_fu_821_p3;
wire   [30:0] o_x_cast_mid_fu_833_p3;
wire   [31:0] smax1_fu_885_p3;
wire   [30:0] grp_fu_895_p0;
wire   [31:0] grp_fu_910_p0;
wire   [31:0] grp_fu_910_p1;
wire   [31:0] i_y_mid_fu_916_p3;
wire   [31:0] temp_to_int_fu_993_p1;
wire   [31:0] tmp_13_to_int_fu_1010_p1;
wire   [7:0] tmp_15_fu_996_p4;
wire   [22:0] tmp_24_fu_1006_p1;
wire   [7:0] tmp_17_fu_1014_p4;
wire   [22:0] tmp_25_fu_1024_p1;
wire   [0:0] tmp_19_fu_1052_p2;
wire   [0:0] tmp_20_fu_1056_p2;
wire   [0:0] tmp_21_fu_1060_p2;
wire   [0:0] grp_fu_386_p2;
wire   [0:0] tmp_23_fu_1066_p2;
wire   [30:0] o_x_mid265_op_fu_1117_p3;
reg    grp_fu_386_ce;
wire    ap_block_pp0_stage1_flag00000001;
reg    grp_fu_937_ce;
reg    grp_fu_979_ce;
reg   [96:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_419_p00;
wire   [63:0] grp_fu_419_p10;
wire   [95:0] grp_fu_431_p00;
wire   [95:0] grp_fu_431_p10;
wire   [127:0] grp_fu_443_p00;
wire   [127:0] grp_fu_443_p10;
wire   [31:0] grp_fu_480_p10;
wire   [31:0] grp_fu_517_p10;
wire   [31:0] grp_fu_895_p00;
wire   [63:0] grp_fu_910_p00;
wire   [63:0] grp_fu_910_p10;
reg    ap_condition_2010;

// power-on initialization
initial begin
#0 ap_CS_fsm = 97'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

maxpool_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
maxpool_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .b(b),
    .od(od),
    .ox(ox),
    .oy(oy),
    .id(id),
    .ix(ix),
    .iy(iy),
    .s(s),
    .k(k)
);

maxpool_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
maxpool_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(tmp_14_reg_1779),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(tmp_11_reg_1847),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(tmp_s_reg_373),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

maxpool_layer_fcmbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
maxpool_layer_fcmbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(temp_reg_1790),
    .din1(tmp_s_phi_fu_378_p4),
    .ce(grp_fu_386_ce),
    .opcode(5'd4),
    .dout(grp_fu_386_p2)
);

maxpool_layer_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
maxpool_layer_mulcud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_419_p0),
    .din1(grp_fu_419_p1),
    .ce(1'b1),
    .dout(grp_fu_419_p2)
);

maxpool_layer_muldEe #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
maxpool_layer_muldEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_431_p0),
    .din1(grp_fu_431_p1),
    .ce(1'b1),
    .dout(grp_fu_431_p2)
);

maxpool_layer_muleOg #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 128 ))
maxpool_layer_muleOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_443_p0),
    .din1(grp_fu_443_p1),
    .ce(1'b1),
    .dout(grp_fu_443_p2)
);

maxpool_layer_mulfYi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(od_read_reg_1205),
    .din1(grp_fu_480_p1),
    .ce(1'b1),
    .dout(grp_fu_480_p2)
);

maxpool_layer_addg8j #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .dout_WIDTH( 128 ))
maxpool_layer_addg8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten1_reg_189),
    .din1(128'd1),
    .ce(1'b1),
    .dout(grp_fu_490_p2)
);

maxpool_layer_mulfYi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulfYi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(id_read_reg_1185),
    .din1(grp_fu_505_p1),
    .ce(1'b1),
    .dout(grp_fu_505_p2)
);

maxpool_layer_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulhbi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(oy_read_reg_1191),
    .din1(tmp9_reg_1333),
    .ce(1'b1),
    .dout(grp_fu_509_p2)
);

maxpool_layer_mulfYi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulfYi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(s_read_reg_1162),
    .din1(grp_fu_517_p1),
    .ce(1'b1),
    .dout(grp_fu_517_p2)
);

maxpool_layer_mulibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulibs_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_558_p0),
    .din1(id_read_reg_1185),
    .ce(1'b1),
    .dout(grp_fu_558_p2)
);

maxpool_layer_mulibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulibs_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_563_p0),
    .din1(od_read_reg_1205),
    .ce(1'b1),
    .dout(grp_fu_563_p2)
);

maxpool_layer_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulhbi_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_4_mid1_reg_1548),
    .din1(oy_read_reg_1191),
    .ce(1'b1),
    .dout(grp_fu_743_p2)
);

maxpool_layer_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulhbi_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp9_mid1_reg_1570),
    .din1(oy_read_reg_1191),
    .ce(1'b1),
    .dout(grp_fu_753_p2)
);

maxpool_layer_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulhbi_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp5_mid2_v_reg_1580),
    .din1(iy_read_reg_1175),
    .ce(1'b1),
    .dout(grp_fu_757_p2)
);

maxpool_layer_mulibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulibs_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_850_p0),
    .din1(s_read_reg_1162),
    .ce(1'b1),
    .dout(grp_fu_850_p2)
);

maxpool_layer_mulibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulibs_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_895_p0),
    .din1(s_read_reg_1162),
    .ce(1'b1),
    .dout(grp_fu_895_p2)
);

maxpool_layer_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulhbi_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp1_mid2_v_reg_1669),
    .din1(ox_read_reg_1198),
    .ce(1'b1),
    .dout(grp_fu_900_p2)
);

maxpool_layer_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
maxpool_layer_mulcud_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_910_p0),
    .din1(grp_fu_910_p1),
    .ce(1'b1),
    .dout(grp_fu_910_p2)
);

maxpool_layer_addjbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
maxpool_layer_addjbC_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten_phi_fu_345_p4),
    .din1(64'd1),
    .ce(grp_fu_937_ce),
    .dout(grp_fu_937_p2)
);

maxpool_layer_mulhbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
maxpool_layer_mulhbi_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ix_read_reg_1180),
    .din1(tmp6_mid2_v_reg_1759),
    .ce(grp_fu_979_ce),
    .dout(grp_fu_979_p2)
);

maxpool_layer_addjbC #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
maxpool_layer_addjbC_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten3_reg_249),
    .din1(64'd1),
    .ce(1'b1),
    .dout(grp_fu_1101_p2)
);

maxpool_layer_addkbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 96 ))
maxpool_layer_addkbM_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten2_reg_237),
    .din1(96'd1),
    .ce(1'b1),
    .dout(grp_fu_1107_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state87))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state87)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state87 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((ap_condition_2010 == 1'b1)) begin
            if ((ap_block_pp0_stage2_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_mem_ARREADY <= 1'b0;
            end else if (((1'b1 == mem_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_mem_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state111)) begin
            if ((ap_sig_ioackin_mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b0;
            end else if ((1'b1 == mem_AWREADY)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state112)) begin
            if ((ap_sig_ioackin_mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b0;
            end else if ((1'b1 == mem_WREADY)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        b_s_reg_201 <= b_mid2_reg_1424;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        b_s_reg_201 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        i_d_reg_213 <= i_d_mid2_reg_1575;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        i_d_reg_213 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_x1_reg_363 <= i_x_1_reg_1769;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        i_x1_reg_363 <= i_x_reg_1705;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_y1_reg_353 <= tmp6_mid2_v_v_reg_1753;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        i_y1_reg_353 <= i_y_mid2_reg_1700;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvar_flatten1_reg_189 <= indvar_flatten_next3_reg_1317;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten1_reg_189 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvar_flatten2_reg_237 <= indvar_flatten_next2_reg_1877;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten2_reg_237 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvar_flatten3_reg_249 <= indvar_flatten_next1_reg_1872;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten3_reg_249 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_reg_341 <= indvar_flatten_next_reg_1742;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        indvar_flatten_reg_341 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvars_iv1_reg_273 <= indvars_iv14_mid2_reg_1516;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv1_reg_273 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvars_iv2_reg_285 <= indvars_iv12_mid2_reg_1521;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv2_reg_285 <= k_read_reg_1148;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvars_iv3_reg_295 <= indvars_iv_next5_reg_1842;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv3_reg_295 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvars_iv4_reg_307 <= indvars_iv_next4_reg_1837;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv4_reg_307 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvars_iv5_reg_319 <= indvars_iv_next3_reg_1832;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv5_reg_319 <= k_read_reg_1148;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        indvars_iv_reg_261 <= indvars_iv17_mid2_reg_1537;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv_reg_261 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        o_x_reg_329 <= o_x_1_reg_1852;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        o_x_reg_329 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        o_y_reg_225 <= o_y_mid2_reg_1659;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        o_y_reg_225 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_1727))) begin
        tmp_s_reg_373 <= output_element_fu_1072_p3;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        tmp_s_reg_373 <= 32'd3322716160;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_1727 <= exitcond_flatten_reg_1727;
        ap_reg_pp0_iter2_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1727;
        ap_reg_pp0_iter3_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter2_exitcond_flatten_reg_1727;
        ap_reg_pp0_iter4_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter3_exitcond_flatten_reg_1727;
        ap_reg_pp0_iter5_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter4_exitcond_flatten_reg_1727;
        ap_reg_pp0_iter6_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter5_exitcond_flatten_reg_1727;
        ap_reg_pp0_iter7_exitcond_flatten_reg_1727 <= ap_reg_pp0_iter6_exitcond_flatten_reg_1727;
        ap_reg_pp0_iter7_temp_reg_1790 <= temp_reg_1790;
        exitcond_flatten_reg_1727 <= exitcond_flatten_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp2_reg_1764 <= tmp2_reg_1764;
        ap_reg_pp0_iter2_tmp2_reg_1764 <= ap_reg_pp0_iter1_tmp2_reg_1764;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        b_cast_mid1_reg_1307[30 : 0] <= b_cast_mid1_fu_476_p1[30 : 0];
        exitcond_flatten3_reg_1313 <= exitcond_flatten3_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        b_mid2_reg_1424 <= b_mid2_fu_573_p3;
        exitcond_flatten45_m_1_reg_1411 <= exitcond_flatten45_m_1_fu_568_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_read_reg_1212 <= b;
        id_read_reg_1185 <= id;
        ix_read_reg_1180 <= ix;
        iy_read_reg_1175 <= iy;
        k_read_reg_1148 <= k;
        od_read_reg_1205 <= od;
        ox_read_reg_1198 <= ox;
        oy_read_reg_1191 <= oy;
        s_read_reg_1162 <= s;
        tmp_1_reg_1222 <= {{output_offset[31:2]}};
        tmp_reg_1217 <= {{input_offset[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (1'd0 == exitcond_flatten3_reg_1313))) begin
        b_s_4_reg_1376 <= b_s_4_fu_539_p2;
        exitcond_flatten1_reg_1382 <= exitcond_flatten1_fu_545_p2;
        exitcond_flatten2_reg_1400 <= exitcond_flatten2_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bound1_reg_1237 <= grp_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        bound2_reg_1254 <= grp_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        bound3_reg_1285 <= grp_fu_443_p2;
        exitcond_flatten45_m_reg_1302 <= exitcond_flatten45_m_fu_471_p2;
        smax16_mid_reg_1290 <= smax16_mid_fu_460_p3;
        tmp_2_reg_1275[29 : 0] <= tmp_2_fu_454_p1[29 : 0];
        tmp_5_reg_1280[29 : 0] <= tmp_5_fu_457_p1[29 : 0];
        tmp_6_mid_reg_1296 <= tmp_6_mid_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        bound_reg_1722 <= grp_fu_910_p2;
        tmp1_mid2_reg_1712 <= grp_fu_900_p2;
        tmp_7_reg_1717 <= tmp_7_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        i_d_cast_mid1_reg_1328[30 : 0] <= i_d_cast_mid1_fu_496_p1[30 : 0];
        tmp9_reg_1333 <= tmp9_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        i_d_mid2_reg_1575 <= i_d_mid2_fu_733_p3;
        tmp9_mid1_reg_1570 <= tmp9_mid1_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        i_d_mid_reg_1526 <= i_d_mid_fu_676_p3;
        indvars_iv17_mid2_reg_1537 <= indvars_iv17_mid2_fu_693_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0))) begin
        i_x1_mid2_reg_1747 <= i_x1_mid2_fu_954_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_1727 == 1'd0) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        i_x_1_reg_1769 <= i_x_1_fu_974_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        i_x_reg_1705 <= grp_fu_895_p2;
        i_y_mid2_reg_1700 <= i_y_mid2_fu_922_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_mid2_reg_1447) & (1'b1 == ap_CS_fsm_state83))) begin
        i_y_mid1_reg_1695 <= grp_fu_850_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        i_y_reg_1361 <= grp_fu_517_p2;
        tmp4_reg_1356 <= tmp4_fu_522_p2;
        tmp8_reg_1366 <= tmp8_fu_526_p2;
        tmp_6_reg_1371 <= tmp_6_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_932_p2))) begin
        i_y_s_reg_1737 <= i_y_s_fu_948_p2;
        tmp_18_reg_1731 <= tmp_18_fu_943_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_10_reg_1434) & (1'b1 == ap_CS_fsm_state110))) begin
        indvar_flatten43_op_reg_1857 <= grp_fu_1101_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten1_reg_1382) & (1'b1 == ap_CS_fsm_state110))) begin
        indvar_flatten95_op_reg_1862 <= grp_fu_1107_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state111) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
        indvar_flatten_next1_reg_1872 <= indvar_flatten_next1_fu_1136_p3;
        indvar_flatten_next2_reg_1877 <= indvar_flatten_next2_fu_1142_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        indvar_flatten_next3_reg_1317 <= grp_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        indvar_flatten_next_reg_1742 <= grp_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        indvars_iv12_mid1_reg_1474 <= indvars_iv12_mid1_fu_626_p3;
        indvars_iv14_mid_reg_1468 <= indvars_iv14_mid_fu_619_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        indvars_iv12_mid2_reg_1521 <= indvars_iv12_mid2_fu_671_p3;
        indvars_iv14_mid2_reg_1516 <= indvars_iv14_mid2_fu_666_p3;
        indvars_iv_next2_reg_1505 <= indvars_iv_next2_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        indvars_iv17_mid_reg_1480 <= indvars_iv17_mid_fu_637_p3;
        indvars_iv_next1_reg_1498 <= indvars_iv_next1_fu_654_p2;
        indvars_iv_next_reg_1491 <= indvars_iv_next_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_mid2_reg_1447 == 1'd1) & (1'b1 == ap_CS_fsm_state75))) begin
        indvars_iv19_mid1_reg_1591 <= indvars_iv19_mid1_fu_774_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        indvars_iv19_mid2_reg_1621 <= indvars_iv19_mid2_fu_799_p3;
        indvars_iv21_mid2_reg_1614 <= indvars_iv21_mid2_fu_792_p3;
        o_y_1_reg_1608 <= o_y_1_fu_787_p2;
        tmp7_mid1_reg_1602 <= grp_fu_753_p2;
        tmp7_mid_reg_1596 <= grp_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        indvars_iv24_mid2_reg_1643 <= indvars_iv24_mid2_fu_843_p3;
        o_x_cast_mid2_reg_1654 <= o_x_cast_mid2_fu_861_p3;
        o_y_mid2_reg_1659 <= o_y_mid2_fu_868_p3;
        tmp5_mid2_reg_1628 <= grp_fu_757_p2;
        tmp_12_reg_1664 <= tmp_12_fu_873_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        indvars_iv_next3_reg_1832 <= indvars_iv_next3_fu_1089_p2;
        indvars_iv_next4_reg_1837 <= indvars_iv_next4_fu_1093_p2;
        indvars_iv_next5_reg_1842 <= indvars_iv_next5_fu_1097_p2;
        tmp1_reg_1822 <= tmp1_fu_1079_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter6_exitcond_flatten_reg_1727))) begin
        notlhs1_reg_1807 <= notlhs1_fu_1040_p2;
        notlhs_reg_1797 <= notlhs_fu_1028_p2;
        notrhs1_reg_1812 <= notrhs1_fu_1046_p2;
        notrhs_reg_1802 <= notrhs_fu_1034_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        o_d_reg_1554 <= o_d_fu_698_p2;
        p_mid5_reg_1560 <= p_mid5_fu_703_p3;
        tmp_3_mid1_reg_1542 <= grp_fu_558_p2;
        tmp_4_mid1_reg_1548 <= grp_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        o_x_1_reg_1852 <= o_x_1_fu_1123_p3;
        tmp_11_reg_1847 <= tmp_11_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        o_x_cast_mid2_cast_reg_1674[30 : 0] <= o_x_cast_mid2_cast_fu_882_p1[30 : 0];
        tmp1_mid2_v_reg_1669 <= tmp1_mid2_v_fu_877_p3;
        tmp_16_reg_1680 <= tmp_16_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_mid2_reg_1447 == 1'd1) & (1'b1 == ap_CS_fsm_state109) & (1'd0 == tmp_10_reg_1434))) begin
        o_x_op_reg_1827 <= o_x_op_fu_1083_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        o_y_cast_mid1_reg_1338[30 : 0] <= o_y_cast_mid1_fu_513_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        o_y_mid_reg_1585 <= o_y_mid_fu_767_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_mid2_reg_1447 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
        p_mid2_reg_1486 <= p_mid2_fu_644_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (1'd0 == tmp_6_mid2_reg_1447))) begin
        p_mid3_reg_1511 <= p_mid3_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_mid2_reg_1447) & (1'b1 == ap_CS_fsm_state67))) begin
        p_mid4_reg_1532 <= p_mid4_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        p_mid_reg_1270 <= p_mid_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_1727) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        temp_reg_1790 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_mid2_reg_1447 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        tmp1_mid289_v_reg_1633 <= tmp1_mid289_v_fu_827_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (exitcond_flatten_reg_1727 == 1'd0) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp2_reg_1764 <= tmp2_fu_970_p2;
        tmp6_mid2_v_reg_1759 <= tmp6_mid2_v_fu_966_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (exitcond_flatten45_m_1_reg_1411 == 1'd1))) begin
        tmp4_mid1_reg_1565 <= tmp4_mid1_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        tmp5_mid2_v_reg_1580 <= tmp5_mid2_v_fu_747_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_1727))) begin
        tmp6_mid2_reg_1774 <= grp_fu_979_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0))) begin
        tmp6_mid2_v_v_reg_1753 <= tmp6_mid2_v_v_fu_960_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp7_reg_1350 <= grp_fu_509_p2;
        tmp_3_reg_1344 <= grp_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_6_mid2_reg_1447) & (1'b1 == ap_CS_fsm_state77))) begin
        tmp8_mid1_reg_1649 <= tmp8_mid1_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_10_reg_1434 <= tmp_10_fu_590_p2;
        tmp_6_mid2_reg_1447 <= tmp_6_mid2_fu_594_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten_reg_1727 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp_14_reg_1779 <= tmp_14_fu_983_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        tmp_4_reg_1322 <= grp_fu_480_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (1'd0 == exitcond_flatten45_m_1_reg_1411) & (1'd0 == exitcond_flatten1_reg_1382))) begin
        tmp_8_reg_1429 <= tmp_8_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten45_m_1_reg_1411) & (1'd0 == exitcond_flatten1_reg_1382) & (1'b1 == ap_CS_fsm_state64) & (tmp_6_mid2_reg_1447 == 1'd1))) begin
        tmp_9_reg_1463 <= tmp_9_fu_613_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_reg_1727 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state87 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state87 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_reg_1313 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_reg_1313 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_AWREADY)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_386_ce = 1'b1;
    end else begin
        grp_fu_386_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        grp_fu_937_ce = 1'b1;
    end else begin
        grp_fu_937_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_979_ce = 1'b1;
    end else begin
        grp_fu_979_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_x1_phi_fu_366_p4 = i_x_1_reg_1769;
    end else begin
        i_x1_phi_fu_366_p4 = i_x1_reg_363;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_y1_phi_fu_356_p4 = tmp6_mid2_v_v_reg_1753;
    end else begin
        i_y1_phi_fu_356_p4 = i_y1_reg_353;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        indvar_flatten_phi_fu_345_p4 = indvar_flatten_next_reg_1742;
    end else begin
        indvar_flatten_phi_fu_345_p4 = indvar_flatten_reg_341;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter3_exitcond_flatten_reg_1727 == 1'd0) & (ap_block_pp0_stage2_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_mem_ARREADY))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) & (1'b0 == ap_reg_ioackin_mem_AWREADY))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter6) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_1727) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state112) & (1'b0 == ap_reg_ioackin_mem_WREADY))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (ap_reg_pp0_iter3_exitcond_flatten_reg_1727 == 1'd0))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state111)) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter6) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_1727))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state112)) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter7) & (1'd0 == ap_reg_pp0_iter7_exitcond_flatten_reg_1727) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        tmp_s_phi_fu_378_p4 = output_element_fu_1072_p3;
    end else begin
        tmp_s_phi_fu_378_p4 = tmp_s_reg_373;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_reg_1313 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (exitcond_flatten_reg_1727 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            if (((1'b1 == ap_CS_fsm_state111) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state112 : begin
            if (((1'b1 == ap_CS_fsm_state112) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state113;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            if (((1'b1 == ap_CS_fsm_state117) & (mem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state117;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter6) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_1727) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter6) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_1727) & (1'b0 == mem_RVALID));
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state97_io));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_block_state97_io));
end

assign ap_block_state100_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state104_pp0_stage0_iter6 = ((1'd0 == ap_reg_pp0_iter5_exitcond_flatten_reg_1727) & (1'b0 == mem_RVALID));
end

assign ap_block_state105_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state97_io = ((ap_reg_pp0_iter3_exitcond_flatten_reg_1727 == 1'd0) & (1'b0 == ap_sig_ioackin_mem_ARREADY));
end

assign ap_block_state97_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_2010 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_reg_pp0_iter3_exitcond_flatten_reg_1727 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_cast_fu_555_p1 = b_s_4_reg_1376;

assign b_cast_mid1_fu_476_p1 = b_s_reg_201;

assign b_mid2_fu_573_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? b_s_4_reg_1376 : b_s_reg_201);

assign b_s_4_fu_539_p2 = (b_s_reg_201 + 31'd1);

assign cast1_fu_411_p0 = oy;

assign cast2_fu_415_p0 = ox;

assign exitcond_flatten1_fu_545_p2 = ((indvar_flatten2_reg_237 == bound2_reg_1254) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_550_p2 = ((indvar_flatten3_reg_249 == bound1_reg_1237) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_485_p2 = ((indvar_flatten1_reg_189 == bound3_reg_1285) ? 1'b1 : 1'b0);

assign exitcond_flatten45_m_1_fu_568_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? exitcond_flatten45_m_reg_1302 : exitcond_flatten2_reg_1400);

assign exitcond_flatten45_m_fu_471_p2 = ((bound1_reg_1237 == 64'd0) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_932_p2 = ((indvar_flatten_phi_fu_345_p4 == bound_reg_1722) ? 1'b1 : 1'b0);

assign grp_fu_419_p0 = grp_fu_419_p00;

assign grp_fu_419_p00 = $unsigned(cast2_fu_415_p0);

assign grp_fu_419_p1 = grp_fu_419_p10;

assign grp_fu_419_p10 = $unsigned(cast1_fu_411_p0);

assign grp_fu_431_p0 = grp_fu_431_p00;

assign grp_fu_431_p00 = bound1_reg_1237;

assign grp_fu_431_p1 = grp_fu_431_p10;

assign grp_fu_431_p10 = $unsigned(od_read_reg_1205);

assign grp_fu_443_p0 = grp_fu_443_p00;

assign grp_fu_443_p00 = bound2_reg_1254;

assign grp_fu_443_p1 = grp_fu_443_p10;

assign grp_fu_443_p10 = b_read_reg_1212;

assign grp_fu_480_p1 = grp_fu_480_p10;

assign grp_fu_480_p10 = b_s_reg_201;

assign grp_fu_505_p1 = b_cast_mid1_reg_1307;

assign grp_fu_517_p1 = grp_fu_517_p10;

assign grp_fu_517_p10 = o_y_reg_225;

assign grp_fu_558_p0 = b_cast_fu_555_p1;

assign grp_fu_563_p0 = b_cast_fu_555_p1;

assign grp_fu_850_p0 = o_y_cast_fu_840_p1;

assign grp_fu_895_p0 = grp_fu_895_p00;

assign grp_fu_895_p00 = o_x_cast_mid2_reg_1654;

assign grp_fu_910_p0 = grp_fu_910_p00;

assign grp_fu_910_p00 = p_mid5_reg_1560;

assign grp_fu_910_p1 = grp_fu_910_p10;

assign grp_fu_910_p10 = tmp_16_reg_1680;

assign i_d_cast_fu_718_p1 = o_d_reg_1554;

assign i_d_cast_mid1_fu_496_p1 = i_d_reg_213;

assign i_d_mid2_fu_733_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? o_d_reg_1554 : i_d_mid_reg_1526);

assign i_d_mid_fu_676_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? 31'd0 : i_d_reg_213);

assign i_x1_mid2_fu_954_p3 = ((tmp_18_reg_1731[0:0] === 1'b1) ? i_x1_reg_363 : i_x_reg_1705);

assign i_x_1_fu_974_p2 = (32'd1 + i_x1_mid2_reg_1747);

assign i_y_mid2_fu_922_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? i_y_mid_fu_916_p3 : i_y_mid1_reg_1695);

assign i_y_mid_fu_916_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 32'd0 : i_y_reg_1361);

assign i_y_s_fu_948_p2 = (32'd1 + i_y1_phi_fu_356_p4);

assign indvar_flatten_next1_fu_1136_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 64'd1 : indvar_flatten43_op_reg_1857);

assign indvar_flatten_next2_fu_1142_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? 96'd1 : indvar_flatten95_op_reg_1862);

assign indvars_iv12_mid1_fu_626_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? k_read_reg_1148 : indvars_iv12_mid_fu_600_p3);

assign indvars_iv12_mid2_fu_671_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? indvars_iv12_mid1_reg_1474 : indvars_iv_next_reg_1491);

assign indvars_iv12_mid_fu_600_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? k_read_reg_1148 : indvars_iv2_reg_285);

assign indvars_iv14_mid2_fu_666_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? indvars_iv14_mid_reg_1468 : indvars_iv_next1_reg_1498);

assign indvars_iv14_mid_fu_619_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 32'd0 : indvars_iv1_reg_273);

assign indvars_iv17_mid2_fu_693_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? indvars_iv17_mid_reg_1480 : indvars_iv_next2_reg_1505);

assign indvars_iv17_mid_fu_637_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 32'd0 : indvars_iv_reg_261);

assign indvars_iv19_mid1_fu_774_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? k_read_reg_1148 : indvars_iv19_mid_fu_761_p3);

assign indvars_iv19_mid2_fu_799_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? indvars_iv19_mid1_reg_1591 : k_read_reg_1148);

assign indvars_iv19_mid_fu_761_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? k_read_reg_1148 : indvars_iv5_reg_319);

assign indvars_iv21_mid2_fu_792_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? indvars_iv21_mid_fu_780_p3 : 32'd0);

assign indvars_iv21_mid_fu_780_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 32'd0 : indvars_iv4_reg_307);

assign indvars_iv24_mid2_fu_843_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? indvars_iv24_mid_fu_814_p3 : 32'd0);

assign indvars_iv24_mid_fu_814_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 32'd0 : indvars_iv3_reg_295);

assign indvars_iv_next1_fu_654_p2 = ($signed(indvars_iv14_mid_reg_1468) + $signed(s_read_reg_1162));

assign indvars_iv_next2_fu_658_p2 = ($signed(indvars_iv17_mid_reg_1480) - $signed(s_read_reg_1162));

assign indvars_iv_next3_fu_1089_p2 = ($signed(indvars_iv19_mid2_reg_1621) + $signed(s_read_reg_1162));

assign indvars_iv_next4_fu_1093_p2 = ($signed(indvars_iv21_mid2_reg_1614) + $signed(s_read_reg_1162));

assign indvars_iv_next5_fu_1097_p2 = ($signed(indvars_iv24_mid2_reg_1643) - $signed(s_read_reg_1162));

assign indvars_iv_next_fu_650_p2 = ($signed(indvars_iv12_mid1_reg_1474) + $signed(s_read_reg_1162));

assign notlhs1_fu_1040_p2 = ((tmp_17_fu_1014_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_1028_p2 = ((tmp_15_fu_996_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_1046_p2 = ((tmp_25_fu_1024_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_1034_p2 = ((tmp_24_fu_1006_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_d_fu_698_p2 = (i_d_mid_reg_1526 + 31'd1);

assign o_x_1_fu_1123_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? o_x_mid265_op_fu_1117_p3 : 31'd1);

assign o_x_cast_fu_530_p1 = o_x_reg_329;

assign o_x_cast_mid2_cast_fu_882_p1 = o_x_cast_mid2_reg_1654;

assign o_x_cast_mid2_fu_861_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? o_x_cast_mid_fu_833_p3 : 31'd0);

assign o_x_cast_mid_fu_833_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 31'd0 : o_x_reg_329);

assign o_x_mid265_op_fu_1117_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 31'd1 : o_x_op_reg_1827);

assign o_x_op_fu_1083_p2 = (o_x_reg_329 + 31'd1);

assign o_y_1_fu_787_p2 = (o_y_mid_reg_1585 + 31'd1);

assign o_y_cast_fu_840_p1 = o_y_1_reg_1608;

assign o_y_cast_mid1_fu_513_p1 = o_y_reg_225;

assign o_y_mid2_fu_868_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? o_y_mid_reg_1585 : o_y_1_reg_1608);

assign o_y_mid_fu_767_p3 = ((tmp_10_reg_1434[0:0] === 1'b1) ? 31'd0 : o_y_reg_225);

assign output_element_fu_1072_p3 = ((tmp_23_fu_1066_p2[0:0] === 1'b1) ? tmp_s_reg_373 : ap_reg_pp0_iter7_temp_reg_1790);

assign p_mid1_fu_632_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? smax16_mid_reg_1290 : tmp_9_reg_1463);

assign p_mid2_fu_644_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? smax16_mid_reg_1290 : p_mid1_fu_632_p3);

assign p_mid3_fu_662_p2 = (($signed(indvars_iv_next_reg_1491) > $signed(indvars_iv_next1_reg_1498)) ? 1'b1 : 1'b0);

assign p_mid4_fu_688_p2 = (smax16_mid1_fu_683_p3 + indvars_iv_next2_reg_1505);

assign p_mid5_fu_703_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? p_mid2_reg_1486 : p_mid4_reg_1532);

assign p_mid_fu_449_p2 = (($signed(k_read_reg_1148) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign smax16_mid1_fu_683_p3 = ((p_mid3_reg_1511[0:0] === 1'b1) ? indvars_iv_next_reg_1491 : indvars_iv_next1_reg_1498);

assign smax16_mid_fu_460_p3 = ((p_mid_reg_1270[0:0] === 1'b1) ? k_read_reg_1148 : 32'd0);

assign smax1_fu_885_p3 = ((tmp_12_reg_1664[0:0] === 1'b1) ? indvars_iv19_mid2_reg_1621 : indvars_iv21_mid2_reg_1614);

assign smax_fu_606_p3 = ((tmp_8_reg_1429[0:0] === 1'b1) ? indvars_iv2_reg_285 : indvars_iv1_reg_273);

assign temp_to_int_fu_993_p1 = temp_reg_1790;

assign tmp1_fu_1079_p2 = (o_x_cast_mid2_cast_reg_1674 + tmp_5_reg_1280);

assign tmp1_mid2157_v_fu_809_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? tmp7_mid_reg_1596 : tmp8_reg_1366);

assign tmp1_mid289_v_fu_827_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? tmp7_mid1_reg_1602 : tmp1_mid2157_v_fu_809_p3);

assign tmp1_mid2_v_fu_877_p3 = ((tmp_6_mid2_reg_1447[0:0] === 1'b1) ? tmp1_mid289_v_reg_1633 : tmp8_mid1_reg_1649);

assign tmp2_fu_970_p2 = (tmp_2_reg_1275 + i_x1_mid2_reg_1747);

assign tmp4_fu_522_p2 = (tmp_3_reg_1344 + i_d_cast_mid1_reg_1328);

assign tmp4_mid1_fu_721_p2 = (tmp_3_mid2_fu_708_p3 + i_d_cast_fu_718_p1);

assign tmp5_mid2127_v_fu_738_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? tmp_3_mid1_reg_1542 : tmp4_reg_1356);

assign tmp5_mid2_v_fu_747_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? tmp4_mid1_reg_1565 : tmp5_mid2127_v_fu_738_p3);

assign tmp6_mid2_v_fu_966_p2 = (tmp6_mid2_v_v_reg_1753 + tmp5_mid2_reg_1628);

assign tmp6_mid2_v_v_fu_960_p3 = ((tmp_18_reg_1731[0:0] === 1'b1) ? i_y1_reg_353 : i_y_s_reg_1737);

assign tmp7_mid2_fu_821_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? tmp7_mid1_reg_1602 : tmp7_mid3_fu_804_p3);

assign tmp7_mid3_fu_804_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? tmp7_mid_reg_1596 : tmp7_reg_1350);

assign tmp8_fu_526_p2 = (tmp7_reg_1350 + o_y_cast_mid1_reg_1338);

assign tmp8_mid1_fu_855_p2 = (tmp7_mid2_fu_821_p3 + o_y_cast_fu_840_p1);

assign tmp9_fu_500_p2 = (tmp_4_reg_1322 + i_d_cast_mid1_fu_496_p1);

assign tmp9_mid1_fu_727_p2 = (tmp_4_mid2_fu_713_p3 + i_d_cast_fu_718_p1);

assign tmp_10_fu_590_p2 = (exitcond_flatten45_m_1_reg_1411 | exitcond_flatten1_reg_1382);

assign tmp_11_fu_1113_p2 = (tmp1_mid2_reg_1712 + tmp1_reg_1822);

assign tmp_12_fu_873_p2 = (($signed(indvars_iv19_mid2_reg_1621) > $signed(indvars_iv21_mid2_reg_1614)) ? 1'b1 : 1'b0);

assign tmp_13_to_int_fu_1010_p1 = tmp_s_reg_373;

assign tmp_14_fu_983_p2 = (ap_reg_pp0_iter2_tmp2_reg_1764 + tmp6_mid2_reg_1774);

assign tmp_15_fu_996_p4 = {{temp_to_int_fu_993_p1[30:23]}};

assign tmp_16_fu_890_p2 = (smax1_fu_885_p3 + indvars_iv24_mid2_reg_1643);

assign tmp_17_fu_1014_p4 = {{tmp_13_to_int_fu_1010_p1[30:23]}};

assign tmp_18_fu_943_p2 = (($signed(i_x1_phi_fu_366_p4) < $signed(tmp_7_reg_1717)) ? 1'b1 : 1'b0);

assign tmp_19_fu_1052_p2 = (notrhs_reg_1802 | notlhs_reg_1797);

assign tmp_20_fu_1056_p2 = (notrhs1_reg_1812 | notlhs1_reg_1807);

assign tmp_21_fu_1060_p2 = (tmp_19_fu_1052_p2 & tmp_20_fu_1056_p2);

assign tmp_23_fu_1066_p2 = (tmp_21_fu_1060_p2 & grp_fu_386_p2);

assign tmp_24_fu_1006_p1 = temp_to_int_fu_993_p1[22:0];

assign tmp_25_fu_1024_p1 = tmp_13_to_int_fu_1010_p1[22:0];

assign tmp_2_fu_454_p1 = tmp_reg_1217;

assign tmp_3_mid2_fu_708_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? tmp_3_mid1_reg_1542 : tmp_3_reg_1344);

assign tmp_4_mid2_fu_713_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? tmp_4_mid1_reg_1548 : tmp_4_reg_1322);

assign tmp_5_fu_457_p1 = tmp_1_reg_1222;

assign tmp_6_fu_534_p2 = (($signed(o_x_cast_fu_530_p1) < $signed(ox_read_reg_1198)) ? 1'b1 : 1'b0);

assign tmp_6_mid1_fu_585_p3 = ((exitcond_flatten1_reg_1382[0:0] === 1'b1) ? tmp_6_mid_reg_1296 : tmp_6_reg_1371);

assign tmp_6_mid2_fu_594_p3 = ((exitcond_flatten45_m_1_reg_1411[0:0] === 1'b1) ? tmp_6_mid_reg_1296 : tmp_6_mid1_fu_585_p3);

assign tmp_6_mid_fu_466_p2 = (($signed(ox_read_reg_1198) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_7_fu_928_p2 = (i_x_reg_1705 + k_read_reg_1148);

assign tmp_8_fu_579_p2 = (($signed(indvars_iv2_reg_285) > $signed(indvars_iv1_reg_273)) ? 1'b1 : 1'b0);

assign tmp_9_fu_613_p2 = (indvars_iv_reg_261 + smax_fu_606_p3);

always @ (posedge ap_clk) begin
    tmp_2_reg_1275[31:30] <= 2'b00;
    tmp_5_reg_1280[31:30] <= 2'b00;
    b_cast_mid1_reg_1307[31] <= 1'b0;
    i_d_cast_mid1_reg_1328[31] <= 1'b0;
    o_y_cast_mid1_reg_1338[31] <= 1'b0;
    o_x_cast_mid2_cast_reg_1674[31] <= 1'b0;
end

endmodule //maxpool_layer
