// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _maxpool_layer_HH_
#define _maxpool_layer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "maxpool_layer_fcmbkb.h"
#include "maxpool_layer_mulcud.h"
#include "maxpool_layer_CTRL_BUS_s_axi.h"
#include "maxpool_layer_mem_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_MEM_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_MEM_ID_WIDTH = 1,
         unsigned int C_M_AXI_MEM_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_DATA_WIDTH = 32,
         unsigned int C_M_AXI_MEM_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_MEM_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_CTRL_BUS_DATA_WIDTH = 32>
struct maxpool_layer : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_mem_AWVALID;
    sc_in< sc_logic > m_axi_mem_AWREADY;
    sc_out< sc_uint<C_M_AXI_MEM_ADDR_WIDTH> > m_axi_mem_AWADDR;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_AWID;
    sc_out< sc_lv<8> > m_axi_mem_AWLEN;
    sc_out< sc_lv<3> > m_axi_mem_AWSIZE;
    sc_out< sc_lv<2> > m_axi_mem_AWBURST;
    sc_out< sc_lv<2> > m_axi_mem_AWLOCK;
    sc_out< sc_lv<4> > m_axi_mem_AWCACHE;
    sc_out< sc_lv<3> > m_axi_mem_AWPROT;
    sc_out< sc_lv<4> > m_axi_mem_AWQOS;
    sc_out< sc_lv<4> > m_axi_mem_AWREGION;
    sc_out< sc_uint<C_M_AXI_MEM_AWUSER_WIDTH> > m_axi_mem_AWUSER;
    sc_out< sc_logic > m_axi_mem_WVALID;
    sc_in< sc_logic > m_axi_mem_WREADY;
    sc_out< sc_uint<C_M_AXI_MEM_DATA_WIDTH> > m_axi_mem_WDATA;
    sc_out< sc_uint<C_M_AXI_MEM_DATA_WIDTH/8> > m_axi_mem_WSTRB;
    sc_out< sc_logic > m_axi_mem_WLAST;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_WID;
    sc_out< sc_uint<C_M_AXI_MEM_WUSER_WIDTH> > m_axi_mem_WUSER;
    sc_out< sc_logic > m_axi_mem_ARVALID;
    sc_in< sc_logic > m_axi_mem_ARREADY;
    sc_out< sc_uint<C_M_AXI_MEM_ADDR_WIDTH> > m_axi_mem_ARADDR;
    sc_out< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_ARID;
    sc_out< sc_lv<8> > m_axi_mem_ARLEN;
    sc_out< sc_lv<3> > m_axi_mem_ARSIZE;
    sc_out< sc_lv<2> > m_axi_mem_ARBURST;
    sc_out< sc_lv<2> > m_axi_mem_ARLOCK;
    sc_out< sc_lv<4> > m_axi_mem_ARCACHE;
    sc_out< sc_lv<3> > m_axi_mem_ARPROT;
    sc_out< sc_lv<4> > m_axi_mem_ARQOS;
    sc_out< sc_lv<4> > m_axi_mem_ARREGION;
    sc_out< sc_uint<C_M_AXI_MEM_ARUSER_WIDTH> > m_axi_mem_ARUSER;
    sc_in< sc_logic > m_axi_mem_RVALID;
    sc_out< sc_logic > m_axi_mem_RREADY;
    sc_in< sc_uint<C_M_AXI_MEM_DATA_WIDTH> > m_axi_mem_RDATA;
    sc_in< sc_logic > m_axi_mem_RLAST;
    sc_in< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_RID;
    sc_in< sc_uint<C_M_AXI_MEM_RUSER_WIDTH> > m_axi_mem_RUSER;
    sc_in< sc_lv<2> > m_axi_mem_RRESP;
    sc_in< sc_logic > m_axi_mem_BVALID;
    sc_out< sc_logic > m_axi_mem_BREADY;
    sc_in< sc_lv<2> > m_axi_mem_BRESP;
    sc_in< sc_uint<C_M_AXI_MEM_ID_WIDTH> > m_axi_mem_BID;
    sc_in< sc_uint<C_M_AXI_MEM_BUSER_WIDTH> > m_axi_mem_BUSER;
    sc_in< sc_logic > s_axi_CTRL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CTRL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH/8> > s_axi_CTRL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CTRL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CTRL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CTRL_BUS_ADDR_WIDTH> > s_axi_CTRL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CTRL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CTRL_BUS_DATA_WIDTH> > s_axi_CTRL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CTRL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CTRL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CTRL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const7;
    sc_signal< sc_lv<5> > ap_var_for_const8;


    // Module declarations
    maxpool_layer(sc_module_name name);
    SC_HAS_PROCESS(maxpool_layer);

    ~maxpool_layer();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    maxpool_layer_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>* maxpool_layer_CTRL_BUS_s_axi_U;
    maxpool_layer_mem_m_axi<32,32,5,16,16,16,16,C_M_AXI_MEM_ID_WIDTH,C_M_AXI_MEM_ADDR_WIDTH,C_M_AXI_MEM_DATA_WIDTH,C_M_AXI_MEM_AWUSER_WIDTH,C_M_AXI_MEM_ARUSER_WIDTH,C_M_AXI_MEM_WUSER_WIDTH,C_M_AXI_MEM_RUSER_WIDTH,C_M_AXI_MEM_BUSER_WIDTH,C_M_AXI_MEM_TARGET_ADDR,C_M_AXI_MEM_USER_VALUE,C_M_AXI_MEM_PROT_VALUE,C_M_AXI_MEM_CACHE_VALUE>* maxpool_layer_mem_m_axi_U;
    maxpool_layer_fcmbkb<1,4,32,32,1>* maxpool_layer_fcmbkb_U0;
    maxpool_layer_mulcud<1,7,32,32,32>* maxpool_layer_mulcud_U1;
    maxpool_layer_mulcud<1,7,32,32,32>* maxpool_layer_mulcud_U2;
    maxpool_layer_mulcud<1,7,32,32,32>* maxpool_layer_mulcud_U3;
    maxpool_layer_mulcud<1,7,32,32,32>* maxpool_layer_mulcud_U4;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<51> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > input_offset;
    sc_signal< sc_lv<32> > output_offset;
    sc_signal< sc_lv<32> > b;
    sc_signal< sc_lv<32> > od;
    sc_signal< sc_lv<32> > ox;
    sc_signal< sc_lv<32> > oy;
    sc_signal< sc_lv<32> > id;
    sc_signal< sc_lv<32> > ix;
    sc_signal< sc_lv<32> > iy;
    sc_signal< sc_lv<32> > s;
    sc_signal< sc_lv<32> > k;
    sc_signal< sc_logic > mem_blk_n_AR;
    sc_signal< sc_logic > ap_CS_fsm_state30;
    sc_signal< sc_logic > mem_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_state37;
    sc_signal< sc_logic > mem_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state45;
    sc_signal< sc_logic > mem_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_state46;
    sc_signal< sc_logic > mem_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state51;
    sc_signal< sc_logic > mem_AWVALID;
    sc_signal< sc_logic > mem_AWREADY;
    sc_signal< sc_logic > mem_WVALID;
    sc_signal< sc_logic > mem_WREADY;
    sc_signal< sc_logic > mem_ARVALID;
    sc_signal< sc_logic > mem_ARREADY;
    sc_signal< sc_logic > mem_RVALID;
    sc_signal< sc_logic > mem_RREADY;
    sc_signal< sc_lv<32> > mem_RDATA;
    sc_signal< sc_logic > mem_RLAST;
    sc_signal< sc_lv<1> > mem_RID;
    sc_signal< sc_lv<1> > mem_RUSER;
    sc_signal< sc_lv<2> > mem_RRESP;
    sc_signal< sc_logic > mem_BVALID;
    sc_signal< sc_logic > mem_BREADY;
    sc_signal< sc_lv<2> > mem_BRESP;
    sc_signal< sc_lv<1> > mem_BID;
    sc_signal< sc_lv<1> > mem_BUSER;
    sc_signal< sc_lv<32> > k_read_reg_601;
    sc_signal< sc_lv<32> > s_read_reg_607;
    sc_signal< sc_lv<32> > iy_read_reg_613;
    sc_signal< sc_lv<32> > ix_read_reg_618;
    sc_signal< sc_lv<32> > id_read_reg_623;
    sc_signal< sc_lv<32> > oy_read_reg_628;
    sc_signal< sc_lv<32> > ox_read_reg_634;
    sc_signal< sc_lv<32> > od_read_reg_640;
    sc_signal< sc_lv<32> > b_read_reg_646;
    sc_signal< sc_lv<32> > tmp_3_fu_320_p1;
    sc_signal< sc_lv<32> > tmp_3_reg_651;
    sc_signal< sc_lv<32> > tmp_4_fu_334_p1;
    sc_signal< sc_lv<32> > tmp_4_reg_656;
    sc_signal< sc_lv<32> > next_mul6_fu_338_p2;
    sc_signal< sc_lv<32> > next_mul6_reg_661;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > next_mul4_fu_343_p2;
    sc_signal< sc_lv<32> > next_mul4_reg_666;
    sc_signal< sc_lv<31> > b_1_fu_357_p2;
    sc_signal< sc_lv<31> > b_1_reg_674;
    sc_signal< sc_lv<31> > o_d_fu_372_p2;
    sc_signal< sc_lv<31> > o_d_reg_682;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp4_fu_378_p2;
    sc_signal< sc_lv<32> > tmp4_reg_687;
    sc_signal< sc_lv<1> > tmp_5_fu_367_p2;
    sc_signal< sc_lv<32> > tmp9_fu_384_p2;
    sc_signal< sc_lv<32> > tmp9_reg_692;
    sc_signal< sc_lv<32> > grp_fu_390_p2;
    sc_signal< sc_lv<32> > tmp5_reg_697;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > grp_fu_394_p2;
    sc_signal< sc_lv<32> > tmp7_reg_702;
    sc_signal< sc_lv<32> > next_mul2_fu_398_p2;
    sc_signal< sc_lv<32> > next_mul2_reg_707;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<31> > o_y_1_fu_412_p2;
    sc_signal< sc_lv<31> > o_y_1_reg_715;
    sc_signal< sc_lv<32> > tmp8_fu_418_p2;
    sc_signal< sc_lv<32> > tmp8_reg_720;
    sc_signal< sc_lv<1> > tmp_9_fu_407_p2;
    sc_signal< sc_lv<32> > tmp_s_fu_427_p2;
    sc_signal< sc_lv<32> > tmp_s_reg_725;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_lv<32> > grp_fu_423_p2;
    sc_signal< sc_lv<32> > tmp1_reg_730;
    sc_signal< sc_lv<32> > next_mul_fu_432_p2;
    sc_signal< sc_lv<32> > next_mul_reg_735;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_lv<32> > o_x_cast_fu_437_p1;
    sc_signal< sc_lv<32> > o_x_cast_reg_740;
    sc_signal< sc_lv<31> > o_x_1_fu_446_p2;
    sc_signal< sc_lv<31> > o_x_1_reg_748;
    sc_signal< sc_lv<32> > tmp_7_fu_452_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_753;
    sc_signal< sc_lv<1> > tmp_6_fu_441_p2;
    sc_signal< sc_lv<32> > tmp3_fu_462_p2;
    sc_signal< sc_lv<32> > tmp3_reg_761;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_lv<1> > tmp_10_fu_457_p2;
    sc_signal< sc_lv<32> > tmp10_fu_467_p2;
    sc_signal< sc_lv<32> > tmp10_reg_766;
    sc_signal< sc_lv<32> > grp_fu_471_p2;
    sc_signal< sc_lv<32> > tmp6_reg_771;
    sc_signal< sc_logic > ap_CS_fsm_state27;
    sc_signal< sc_lv<32> > tmp2_fu_480_p2;
    sc_signal< sc_lv<32> > tmp2_reg_779;
    sc_signal< sc_logic > ap_CS_fsm_state28;
    sc_signal< sc_lv<1> > tmp_13_fu_475_p2;
    sc_signal< sc_lv<32> > i_x_1_fu_485_p2;
    sc_signal< sc_lv<32> > i_x_1_reg_784;
    sc_signal< sc_lv<32> > i_y_1_fu_491_p2;
    sc_signal< sc_lv<32> > tmp_14_fu_497_p2;
    sc_signal< sc_lv<32> > tmp_14_reg_794;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_logic > ap_sig_ioackin_mem_ARREADY;
    sc_signal< sc_lv<32> > temp_reg_805;
    sc_signal< sc_lv<1> > notlhs_fu_542_p2;
    sc_signal< sc_lv<1> > notlhs_reg_812;
    sc_signal< sc_logic > ap_CS_fsm_state41;
    sc_signal< sc_lv<1> > notrhs_fu_548_p2;
    sc_signal< sc_lv<1> > notrhs_reg_817;
    sc_signal< sc_lv<1> > notlhs1_fu_554_p2;
    sc_signal< sc_lv<1> > notlhs1_reg_822;
    sc_signal< sc_lv<1> > notrhs1_fu_560_p2;
    sc_signal< sc_lv<1> > notrhs1_reg_827;
    sc_signal< sc_lv<1> > grp_fu_305_p2;
    sc_signal< sc_lv<1> > tmp_22_reg_832;
    sc_signal< sc_lv<1> > tmp_23_fu_580_p2;
    sc_signal< sc_lv<1> > tmp_23_reg_837;
    sc_signal< sc_logic > ap_CS_fsm_state42;
    sc_signal< sc_lv<32> > output_element_fu_585_p3;
    sc_signal< sc_logic > ap_CS_fsm_state43;
    sc_signal< sc_lv<32> > tmp_11_fu_591_p2;
    sc_signal< sc_lv<32> > tmp_11_reg_847;
    sc_signal< sc_logic > ap_CS_fsm_state44;
    sc_signal< sc_logic > ap_sig_ioackin_mem_AWREADY;
    sc_signal< sc_lv<31> > b_s_reg_167;
    sc_signal< sc_lv<32> > phi_mul3_reg_178;
    sc_signal< sc_lv<32> > phi_mul5_reg_190;
    sc_signal< sc_lv<31> > i_d_reg_202;
    sc_signal< sc_lv<1> > tmp_2_fu_352_p2;
    sc_signal< sc_lv<31> > o_y_reg_213;
    sc_signal< sc_lv<32> > i_y_reg_224;
    sc_signal< sc_lv<31> > o_x_reg_236;
    sc_signal< sc_lv<32> > i_x_reg_247;
    sc_signal< sc_lv<32> > tmp_8_reg_259;
    sc_signal< sc_lv<32> > i_y1_reg_272;
    sc_signal< sc_lv<32> > tmp_12_reg_283;
    sc_signal< sc_lv<32> > i_x1_reg_295;
    sc_signal< sc_logic > ap_reg_ioackin_mem_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_mem_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_mem_WREADY;
    sc_signal< sc_logic > ap_sig_ioackin_mem_WREADY;
    sc_signal< sc_logic > ap_CS_fsm_state38;
    sc_signal< sc_lv<30> > tmp_fu_310_p4;
    sc_signal< sc_lv<30> > tmp_1_fu_324_p4;
    sc_signal< sc_lv<32> > b_cast_fu_348_p1;
    sc_signal< sc_lv<32> > i_d_cast_fu_363_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > o_y_cast_fu_403_p1;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<32> > temp_to_int_fu_507_p1;
    sc_signal< sc_lv<32> > tmp_13_to_int_fu_524_p1;
    sc_signal< sc_lv<8> > tmp_15_fu_510_p4;
    sc_signal< sc_lv<23> > tmp_16_fu_520_p1;
    sc_signal< sc_lv<8> > tmp_17_fu_528_p4;
    sc_signal< sc_lv<23> > tmp_18_fu_538_p1;
    sc_signal< sc_lv<1> > tmp_19_fu_566_p2;
    sc_signal< sc_lv<1> > tmp_20_fu_570_p2;
    sc_signal< sc_lv<1> > tmp_21_fu_574_p2;
    sc_signal< sc_lv<51> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<51> ap_ST_fsm_state1;
    static const sc_lv<51> ap_ST_fsm_state2;
    static const sc_lv<51> ap_ST_fsm_state3;
    static const sc_lv<51> ap_ST_fsm_state4;
    static const sc_lv<51> ap_ST_fsm_state5;
    static const sc_lv<51> ap_ST_fsm_state6;
    static const sc_lv<51> ap_ST_fsm_state7;
    static const sc_lv<51> ap_ST_fsm_state8;
    static const sc_lv<51> ap_ST_fsm_state9;
    static const sc_lv<51> ap_ST_fsm_state10;
    static const sc_lv<51> ap_ST_fsm_state11;
    static const sc_lv<51> ap_ST_fsm_state12;
    static const sc_lv<51> ap_ST_fsm_state13;
    static const sc_lv<51> ap_ST_fsm_state14;
    static const sc_lv<51> ap_ST_fsm_state15;
    static const sc_lv<51> ap_ST_fsm_state16;
    static const sc_lv<51> ap_ST_fsm_state17;
    static const sc_lv<51> ap_ST_fsm_state18;
    static const sc_lv<51> ap_ST_fsm_state19;
    static const sc_lv<51> ap_ST_fsm_state20;
    static const sc_lv<51> ap_ST_fsm_state21;
    static const sc_lv<51> ap_ST_fsm_state22;
    static const sc_lv<51> ap_ST_fsm_state23;
    static const sc_lv<51> ap_ST_fsm_state24;
    static const sc_lv<51> ap_ST_fsm_state25;
    static const sc_lv<51> ap_ST_fsm_state26;
    static const sc_lv<51> ap_ST_fsm_state27;
    static const sc_lv<51> ap_ST_fsm_state28;
    static const sc_lv<51> ap_ST_fsm_state29;
    static const sc_lv<51> ap_ST_fsm_state30;
    static const sc_lv<51> ap_ST_fsm_state31;
    static const sc_lv<51> ap_ST_fsm_state32;
    static const sc_lv<51> ap_ST_fsm_state33;
    static const sc_lv<51> ap_ST_fsm_state34;
    static const sc_lv<51> ap_ST_fsm_state35;
    static const sc_lv<51> ap_ST_fsm_state36;
    static const sc_lv<51> ap_ST_fsm_state37;
    static const sc_lv<51> ap_ST_fsm_state38;
    static const sc_lv<51> ap_ST_fsm_state39;
    static const sc_lv<51> ap_ST_fsm_state40;
    static const sc_lv<51> ap_ST_fsm_state41;
    static const sc_lv<51> ap_ST_fsm_state42;
    static const sc_lv<51> ap_ST_fsm_state43;
    static const sc_lv<51> ap_ST_fsm_state44;
    static const sc_lv<51> ap_ST_fsm_state45;
    static const sc_lv<51> ap_ST_fsm_state46;
    static const sc_lv<51> ap_ST_fsm_state47;
    static const sc_lv<51> ap_ST_fsm_state48;
    static const sc_lv<51> ap_ST_fsm_state49;
    static const sc_lv<51> ap_ST_fsm_state50;
    static const sc_lv<51> ap_ST_fsm_state51;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_2C;
    static const sc_lv<32> ap_const_lv32_2D;
    static const sc_lv<32> ap_const_lv32_32;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_MEM_TARGET_ADDR;
    static const int C_M_AXI_MEM_USER_VALUE;
    static const int C_M_AXI_MEM_PROT_VALUE;
    static const int C_M_AXI_MEM_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_29;
    static const sc_lv<32> ap_const_lv32_2A;
    static const sc_lv<32> ap_const_lv32_2B;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_C60CA000;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_25;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state28();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state30();
    void thread_ap_CS_fsm_state37();
    void thread_ap_CS_fsm_state38();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state41();
    void thread_ap_CS_fsm_state42();
    void thread_ap_CS_fsm_state43();
    void thread_ap_CS_fsm_state44();
    void thread_ap_CS_fsm_state45();
    void thread_ap_CS_fsm_state46();
    void thread_ap_CS_fsm_state51();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_mem_ARREADY();
    void thread_ap_sig_ioackin_mem_AWREADY();
    void thread_ap_sig_ioackin_mem_WREADY();
    void thread_b_1_fu_357_p2();
    void thread_b_cast_fu_348_p1();
    void thread_i_d_cast_fu_363_p1();
    void thread_i_x_1_fu_485_p2();
    void thread_i_y_1_fu_491_p2();
    void thread_mem_ARVALID();
    void thread_mem_AWVALID();
    void thread_mem_BREADY();
    void thread_mem_RREADY();
    void thread_mem_WVALID();
    void thread_mem_blk_n_AR();
    void thread_mem_blk_n_AW();
    void thread_mem_blk_n_B();
    void thread_mem_blk_n_R();
    void thread_mem_blk_n_W();
    void thread_next_mul2_fu_398_p2();
    void thread_next_mul4_fu_343_p2();
    void thread_next_mul6_fu_338_p2();
    void thread_next_mul_fu_432_p2();
    void thread_notlhs1_fu_554_p2();
    void thread_notlhs_fu_542_p2();
    void thread_notrhs1_fu_560_p2();
    void thread_notrhs_fu_548_p2();
    void thread_o_d_fu_372_p2();
    void thread_o_x_1_fu_446_p2();
    void thread_o_x_cast_fu_437_p1();
    void thread_o_y_1_fu_412_p2();
    void thread_o_y_cast_fu_403_p1();
    void thread_output_element_fu_585_p3();
    void thread_temp_to_int_fu_507_p1();
    void thread_tmp10_fu_467_p2();
    void thread_tmp2_fu_480_p2();
    void thread_tmp3_fu_462_p2();
    void thread_tmp4_fu_378_p2();
    void thread_tmp8_fu_418_p2();
    void thread_tmp9_fu_384_p2();
    void thread_tmp_10_fu_457_p2();
    void thread_tmp_11_fu_591_p2();
    void thread_tmp_13_fu_475_p2();
    void thread_tmp_13_to_int_fu_524_p1();
    void thread_tmp_14_fu_497_p2();
    void thread_tmp_15_fu_510_p4();
    void thread_tmp_16_fu_520_p1();
    void thread_tmp_17_fu_528_p4();
    void thread_tmp_18_fu_538_p1();
    void thread_tmp_19_fu_566_p2();
    void thread_tmp_1_fu_324_p4();
    void thread_tmp_20_fu_570_p2();
    void thread_tmp_21_fu_574_p2();
    void thread_tmp_23_fu_580_p2();
    void thread_tmp_2_fu_352_p2();
    void thread_tmp_3_fu_320_p1();
    void thread_tmp_4_fu_334_p1();
    void thread_tmp_5_fu_367_p2();
    void thread_tmp_6_fu_441_p2();
    void thread_tmp_7_fu_452_p2();
    void thread_tmp_9_fu_407_p2();
    void thread_tmp_fu_310_p4();
    void thread_tmp_s_fu_427_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
