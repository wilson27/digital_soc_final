-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_layer is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of conv_layer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.278000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=145,HLS_SYN_FF=22927,HLS_SYN_LUT=9059}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (114 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (114 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (114 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (114 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (114 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (114 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (114 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (114 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (114 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (114 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal b : STD_LOGIC_VECTOR (31 downto 0);
    signal od : STD_LOGIC_VECTOR (31 downto 0);
    signal ox : STD_LOGIC_VECTOR (31 downto 0);
    signal oy : STD_LOGIC_VECTOR (31 downto 0);
    signal id : STD_LOGIC_VECTOR (31 downto 0);
    signal ix : STD_LOGIC_VECTOR (31 downto 0);
    signal iy : STD_LOGIC_VECTOR (31 downto 0);
    signal s : STD_LOGIC_VECTOR (31 downto 0);
    signal k : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage8_flag00000000 : BOOLEAN;
    signal exitcond_flatten4_reg_2127 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_flag00000000 : BOOLEAN;
    signal ap_reg_pp0_iter3_exitcond_flatten4_reg_2127 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_2360 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage9_flag00000000 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten4_reg_2127 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_flag00000000 : BOOLEAN;
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state162 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state162 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state163 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state163 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state168 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state168 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten4_reg_341 : STD_LOGIC_VECTOR (95 downto 0);
    signal i_d_reg_353 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_y1_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x1_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal iiy_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal iix_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_element_2_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_read_reg_1454 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_read_reg_1473 : STD_LOGIC_VECTOR (31 downto 0);
    signal iy_read_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ix_read_reg_1492 : STD_LOGIC_VECTOR (31 downto 0);
    signal id_read_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal oy_read_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ox_read_reg_1513 : STD_LOGIC_VECTOR (31 downto 0);
    signal od_read_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_read_reg_1529 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1534 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_reg_1539 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound1_reg_1554 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_501_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound2_reg_1571 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1587 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_1592 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid_reg_1597 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_weights_reg_1603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp_7_fu_536_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1609 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1617 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_513_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound3_reg_1627 : STD_LOGIC_VECTOR (127 downto 0);
    signal smax16_mid_fu_547_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax16_mid_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_mid_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_mid_reg_1638 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten72_m_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten72_m_reg_1644 : STD_LOGIC_VECTOR (0 downto 0);
    signal cast7_fu_563_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal cast7_reg_1649 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal exitcond_flatten3_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten3_reg_1659 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_580_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next3_reg_1663 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1668 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal o_d_cast_mid1_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_cast_mid1_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal tmp1_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1680 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_cast_mid1_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_cast_mid1_reg_1685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1691 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal tmp8_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_1697 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1702 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_reg_1707 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1717 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_s_4_fu_629_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_s_4_reg_1722 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1728 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_1746 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal o_d_mid_fu_648_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_d_mid_reg_1756 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_mid2_v_fu_655_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_mid2_v_reg_1762 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten72_m_1_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten72_m_1_reg_1768 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1782 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal o_d_1_fu_682_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_d_1_reg_1787 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_14_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1793 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_mid2_fu_691_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_mid2_reg_1806 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal tmp_13_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_cast_fu_724_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_cast_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv14_mid_fu_727_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv14_mid_reg_1839 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid1_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid1_reg_1845 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_d_mid2_fu_745_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_d_mid2_reg_1851 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv17_mid_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv17_mid_reg_1856 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal indvars_iv19_mid1_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_mid1_reg_1862 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid2_fu_774_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid2_reg_1867 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next_reg_1872 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next1_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next1_reg_1879 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next2_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next2_reg_1886 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal indvars_iv21_mid2_fu_799_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv21_mid2_reg_1892 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_mid2_fu_806_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv19_mid2_reg_1899 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid3_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid3_reg_1906 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv14_mid2_fu_815_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv14_mid2_reg_1911 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid2_fu_820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid2_reg_1916 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv24_mid2_fu_832_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv24_mid2_reg_1921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal p_mid4_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid4_reg_1927 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv17_mid2_fu_849_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv17_mid2_reg_1932 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1937 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_mid1_reg_1942 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal p_mid5_fu_858_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid5_reg_1948 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1953 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_mid1_fu_878_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_mid1_reg_1958 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal tmp1_mid1_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_mid1_reg_1963 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_mid2_reg_1978 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal tmp_9_mid2_fu_914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_mid2_reg_1984 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_740_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid1_reg_1989 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid2_fu_929_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid2_reg_1994 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal o_y_mid_fu_935_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_mid_reg_2000 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_fu_893_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_2006 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_904_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid_reg_2012 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid1_reg_2018 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_1_fu_942_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_1_reg_2024 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp12_mid2117_v_fu_971_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_mid2117_v_reg_2035 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal o_y_cast_fu_977_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid1_fu_985_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_mid1_reg_2045 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_y_mid2_fu_991_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_mid2_reg_2050 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp12_mid2_v_fu_996_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_mid2_v_reg_2055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_mid1_reg_2060 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal i_y_mid2_fu_1011_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_mid2_reg_2065 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_mid2_reg_2072 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal o_x_cast_mid2_fu_1024_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_cast_mid2_reg_2077 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal o_x_cast_mid2_cast_fu_1037_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_cast_mid2_cast_reg_2088 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal output_element_reg_2094 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x_reg_2099 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_2107 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal grp_fu_950_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_reg_2112 : STD_LOGIC_VECTOR (95 downto 0);
    signal i_d_cast_mid1_fu_1049_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_cast_mid1_reg_2117 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state95_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state107_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state119_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state131_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state143_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state155_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal tmp4_fu_1053_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_2122 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten4_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten4_reg_2127 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten4_reg_2127 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_d_s_fu_1069_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_d_s_reg_2131 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond_flatten2_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_reg_2137 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_flatten2_reg_2137 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten2_reg_2137 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_reg_2152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state96_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state108_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state120_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state132_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state144_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state156_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal grp_fu_1063_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal indvar_flatten_next4_reg_2157 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp4_mid1_fu_1097_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_mid1_reg_2162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_mid1_fu_1102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_mid1_reg_2167 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_d_mid2_fu_1107_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_d_mid2_reg_2172 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1080_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_op_reg_2177 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_fu_1117_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_reg_2182 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state97_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state109_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state121_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state133_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state145_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state157_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal grp_fu_1086_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_2187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state102_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state114_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state126_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state138_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_state150_pp0_stage7_iter4 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011001 : BOOLEAN;
    signal i_y1_mid_fu_1131_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y1_mid_reg_2193 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_2199 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1113_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid1_reg_2204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state103_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state115_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state127_pp0_stage8_iter2 : BOOLEAN;
    signal ap_predicate_op620_readreq_state127 : BOOLEAN;
    signal ap_block_state127_io : BOOLEAN;
    signal ap_block_state139_pp0_stage8_iter3 : BOOLEAN;
    signal ap_block_state151_pp0_stage8_iter4 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011001 : BOOLEAN;
    signal tmp_15_mid_fu_1142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_mid_reg_2210 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_15_mid_reg_2210 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_y_1_fu_1147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y_1_reg_2220 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_reg_2226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state104_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_state116_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state116_io : BOOLEAN;
    signal ap_block_state128_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_state140_pp0_stage9_iter3 : BOOLEAN;
    signal ap_block_state152_pp0_stage9_iter4 : BOOLEAN;
    signal ap_block_pp0_stage9_flag00011001 : BOOLEAN;
    signal iiy_mid_fu_1152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal iiy_mid_reg_2232 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_mid_fu_1170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_mid_reg_2238 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_1174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_reg_2243 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x1_mid2_fu_1179_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x1_mid2_reg_2248 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_mid1_fu_1185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_mid1_reg_2254 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y1_mid2_fu_1190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_y1_mid2_reg_2259 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_mid1_reg_2264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state105_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state117_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_state129_pp0_stage10_iter2 : BOOLEAN;
    signal ap_block_state141_pp0_stage10_iter3 : BOOLEAN;
    signal ap_block_state153_pp0_stage10_iter4 : BOOLEAN;
    signal ap_block_pp0_stage10_flag00011001 : BOOLEAN;
    signal iiy_1_fu_1200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iiy_1_reg_2270 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_v_fu_1205_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_v_reg_2276 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_1216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_reg_2281 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state106_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state118_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_state130_pp0_stage11_iter2 : BOOLEAN;
    signal ap_block_state142_pp0_stage11_iter3 : BOOLEAN;
    signal ap_block_state154_pp0_stage11_iter4 : BOOLEAN;
    signal ap_block_pp0_stage11_flag00011001 : BOOLEAN;
    signal tmp8_mid1_fu_1225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_mid1_reg_2286 : STD_LOGIC_VECTOR (31 downto 0);
    signal iiy_mid2_fu_1230_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal iiy_mid2_reg_2291 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_mid2_v_fu_1240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_mid2_v_reg_2296 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_mid2_reg_2301 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state100_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state112_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state124_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state136_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_state148_pp0_stage5_iter4 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal tmp14_fu_1250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_reg_2306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state101_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state113_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state125_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state137_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_state149_pp0_stage6_iter4 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011001 : BOOLEAN;
    signal i_x_1_fu_1254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_x_1_reg_2311 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_1259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_reg_2316 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_1263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_2321 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_mid2_reg_2332 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_element_reg_2337 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state99_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state111_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state123_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state135_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state147_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state159_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter3_input_element_reg_2337 : STD_LOGIC_VECTOR (31 downto 0);
    signal iix_mid2_fu_1280_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal iix_mid2_reg_2344 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_2350 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_2355 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_17_reg_2360 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_17_reg_2360 : STD_LOGIC_VECTOR (0 downto 0);
    signal iix_1_fu_1342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iix_1_reg_2370 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_element_reg_2375 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state98_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state110_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state122_pp0_stage3_iter2 : BOOLEAN;
    signal ap_predicate_op628_read_state134 : BOOLEAN;
    signal ap_block_state134_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state146_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state158_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal notlhs1_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_2382 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_reg_2387 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_2392 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_2397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_23_reg_2397 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_2401 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_1385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_reg_2406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal o_x_op_fu_1389_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_op_reg_2411 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv_next3_fu_1395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next3_reg_2416 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next4_fu_1399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next4_reg_2421 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next5_fu_1403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next5_reg_2426 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_1419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_2431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal o_x_1_fu_1429_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_1_reg_2436 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1407_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten70_op_reg_2441 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1413_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal indvar_flatten123_op_reg_2446 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal indvar_flatten_next1_fu_1442_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next1_reg_2456 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next2_fu_1448_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal indvar_flatten_next2_reg_2461 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage11_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state147 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal indvar_flatten1_reg_189 : STD_LOGIC_VECTOR (127 downto 0);
    signal b_s_reg_201 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_d_reg_213 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_y_reg_225 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten2_reg_237 : STD_LOGIC_VECTOR (95 downto 0);
    signal indvar_flatten3_reg_249 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv1_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv2_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv3_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv4_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv5_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_reg_329 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten4_phi_fu_345_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal i_d_phi_fu_357_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_phi_fu_369_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_y1_phi_fu_380_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage7_flag00000000 : BOOLEAN;
    signal i_x1_phi_fu_390_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal iiy_phi_fu_401_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal iix_phi_fu_413_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_element_2_phi_fu_424_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_element_4_phi_fu_435_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter5_output_element_4_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter3_output_element_4_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage9_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal grp_fu_456_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5_flag00000000 : BOOLEAN;
    signal cast1_fu_481_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast2_fu_485_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_489_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_501_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_513_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_570_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_599_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_607_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_x_cast_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_661_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_mid1_fu_677_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_706_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal smax_fu_711_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv12_mid_fu_697_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_740_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvars_iv19_mid_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1_fu_756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv21_mid_fu_788_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv24_mid_fu_825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax16_mid1_fu_839_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax1_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_mid2_fu_873_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_893_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_mid2155_v_fu_899_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_mid2_v_fu_908_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_mid_fu_923_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_950_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_950_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_mid3_fu_955_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_mid2187_v_fu_960_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_980_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp2_mid2_fu_965_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal i_y_mid_fu_1005_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_x_cast_mid_fu_1017_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1040_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal i_d_cast_fu_1094_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal i_x1_mid_fu_1159_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_mid2_fu_1165_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage10_flag00000000 : BOOLEAN;
    signal tmp6_mid241_v_fu_1195_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11_flag00000000 : BOOLEAN;
    signal tmp10_mid2_fu_1211_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_mid245_v_fu_1235_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6_flag00000000 : BOOLEAN;
    signal iix_mid_fu_1273_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_element_to_int_fu_1287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1290_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_1300_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp20_fu_1326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_element_to_in_fu_1347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1350_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_1360_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_21_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_x_mid293_op_fu_1423_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_446_ce : STD_LOGIC;
    signal grp_fu_452_ce : STD_LOGIC;
    signal grp_fu_456_ce : STD_LOGIC;
    signal ap_predicate_op629_fcmp_state135 : BOOLEAN;
    signal ap_predicate_op637_fcmp_state138 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00000001 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00000001 : BOOLEAN;
    signal grp_fu_950_ce : STD_LOGIC;
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_fu_1040_ce : STD_LOGIC;
    signal grp_fu_1063_ce : STD_LOGIC;
    signal grp_fu_1080_ce : STD_LOGIC;
    signal grp_fu_1086_ce : STD_LOGIC;
    signal grp_fu_1113_ce : STD_LOGIC;
    signal grp_fu_1123_ce : STD_LOGIC;
    signal grp_fu_1127_ce : STD_LOGIC;
    signal grp_fu_1221_ce : STD_LOGIC;
    signal grp_fu_1246_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (114 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage9_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage10_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1040_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_489_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_489_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_501_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_501_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_fu_513_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_513_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_570_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_661_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_706_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_740_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_893_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_893_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_950_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_condition_1366 : BOOLEAN;
    signal ap_condition_1376 : BOOLEAN;

    component conv_layer_fadd_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_fcmp_3dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_layer_mul_32eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv_layer_mul_64fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component conv_layer_mul_96g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component conv_layer_mul_32hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_mul_32ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_add_12jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (127 downto 0);
        din1 : IN STD_LOGIC_VECTOR (127 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component conv_layer_add_96kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component conv_layer_add_64lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component conv_layer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        b : OUT STD_LOGIC_VECTOR (31 downto 0);
        od : OUT STD_LOGIC_VECTOR (31 downto 0);
        ox : OUT STD_LOGIC_VECTOR (31 downto 0);
        oy : OUT STD_LOGIC_VECTOR (31 downto 0);
        id : OUT STD_LOGIC_VECTOR (31 downto 0);
        ix : OUT STD_LOGIC_VECTOR (31 downto 0);
        iy : OUT STD_LOGIC_VECTOR (31 downto 0);
        s : OUT STD_LOGIC_VECTOR (31 downto 0);
        k : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_layer_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    conv_layer_CTRL_BUS_s_axi_U : component conv_layer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_offset => input_offset,
        output_offset => output_offset,
        b => b,
        od => od,
        ox => ox,
        oy => oy,
        id => id,
        ix => ix,
        iy => iy,
        s => s,
        k => k);

    conv_layer_mem_m_axi_U : component conv_layer_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => mem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => output_element_2_reg_420,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    conv_layer_fadd_3bkb_U0 : component conv_layer_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => output_element_2_phi_fu_424_p4,
        din1 => tmp_24_reg_2401,
        ce => grp_fu_446_ce,
        dout => grp_fu_446_p2);

    conv_layer_fmul_3cud_U1 : component conv_layer_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_reg_pp0_iter3_input_element_reg_2337,
        din1 => weight_element_reg_2375,
        ce => grp_fu_452_ce,
        dout => grp_fu_452_p2);

    conv_layer_fcmp_3dEe_U2 : component conv_layer_fcmp_3dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_456_p0,
        din1 => ap_const_lv32_0,
        ce => grp_fu_456_ce,
        opcode => ap_const_lv5_1,
        dout => grp_fu_456_p2);

    conv_layer_mul_32eOg_U3 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_489_p0,
        din1 => grp_fu_489_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_489_p2);

    conv_layer_mul_64fYi_U4 : component conv_layer_mul_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_501_p0,
        din1 => grp_fu_501_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_501_p2);

    conv_layer_mul_96g8j_U5 : component conv_layer_mul_96g8j
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 96,
        din1_WIDTH => 32,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_513_p0,
        din1 => grp_fu_513_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_513_p2);

    conv_layer_mul_32hbi_U6 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => od_read_reg_1520,
        din1 => k_read_reg_1454,
        ce => ap_const_logic_1,
        dout => grp_fu_519_p2);

    conv_layer_mul_32hbi_U7 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => id_read_reg_1497,
        din1 => k_read_reg_1454,
        ce => ap_const_logic_1,
        dout => grp_fu_523_p2);

    conv_layer_mul_32hbi_U8 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp6_reg_1592,
        din1 => tmp_reg_1587,
        ce => ap_const_logic_1,
        dout => grp_fu_527_p2);

    conv_layer_mul_32ibs_U9 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => od_read_reg_1520,
        din1 => grp_fu_570_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_570_p2);

    conv_layer_add_12jbC_U10 : component conv_layer_add_12jbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 128,
        din1_WIDTH => 128,
        dout_WIDTH => 128)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten1_reg_189,
        din1 => ap_const_lv128_lc_2,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p2);

    conv_layer_mul_32hbi_U11 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => oy_read_reg_1506,
        din1 => tmp1_reg_1680,
        ce => ap_const_logic_1,
        dout => grp_fu_595_p2);

    conv_layer_mul_32ibs_U12 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => id_read_reg_1497,
        din1 => grp_fu_599_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_599_p2);

    conv_layer_mul_32ibs_U13 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => s_read_reg_1473,
        din1 => grp_fu_607_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_607_p2);

    conv_layer_mul_32ibs_U14 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => od_read_reg_1520,
        din1 => grp_fu_661_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_661_p2);

    conv_layer_mul_32ibs_U15 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => id_read_reg_1497,
        din1 => grp_fu_706_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_706_p2);

    conv_layer_mul_32ibs_U16 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => id_read_reg_1497,
        din1 => grp_fu_740_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_740_p2);

    conv_layer_mul_32eOg_U17 : component conv_layer_mul_32eOg
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_893_p0,
        din1 => grp_fu_893_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_893_p2);

    conv_layer_mul_32hbi_U18 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => oy_read_reg_1506,
        din1 => tmp_6_mid1_reg_1942,
        ce => ap_const_logic_1,
        dout => grp_fu_904_p2);

    conv_layer_mul_32hbi_U19 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => oy_read_reg_1506,
        din1 => tmp1_mid1_reg_1963,
        ce => ap_const_logic_1,
        dout => grp_fu_919_p2);

    conv_layer_mul_64fYi_U20 : component conv_layer_mul_64fYi
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_950_p0,
        din1 => grp_fu_950_p1,
        ce => grp_fu_950_ce,
        dout => grp_fu_950_p2);

    conv_layer_mul_32ibs_U21 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => s_read_reg_1473,
        din1 => grp_fu_980_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_980_p2);

    conv_layer_mul_32hbi_U22 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ox_read_reg_1513,
        din1 => tmp12_mid2_v_reg_2055,
        ce => ap_const_logic_1,
        dout => grp_fu_1001_p2);

    conv_layer_mul_32ibs_U23 : component conv_layer_mul_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => s_read_reg_1473,
        din1 => grp_fu_1040_p1,
        ce => grp_fu_1040_ce,
        dout => grp_fu_1040_p2);

    conv_layer_add_96kbM_U24 : component conv_layer_add_96kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten4_phi_fu_345_p4,
        din1 => ap_const_lv96_1,
        ce => grp_fu_1063_ce,
        dout => grp_fu_1063_p2);

    conv_layer_add_64lbW_U25 : component conv_layer_add_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten_phi_fu_369_p4,
        din1 => ap_const_lv64_1,
        ce => grp_fu_1080_ce,
        dout => grp_fu_1080_p2);

    conv_layer_mul_32hbi_U26 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp4_reg_2122,
        din1 => iy_read_reg_1486,
        ce => grp_fu_1086_ce,
        dout => grp_fu_1086_p2);

    conv_layer_mul_32hbi_U27 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => iy_read_reg_1486,
        din1 => tmp4_mid1_reg_2162,
        ce => grp_fu_1113_ce,
        dout => grp_fu_1113_p2);

    conv_layer_mul_32hbi_U28 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp9_reg_2152,
        din1 => k_read_reg_1454,
        ce => grp_fu_1123_ce,
        dout => grp_fu_1123_p2);

    conv_layer_mul_32hbi_U29 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => k_read_reg_1454,
        din1 => tmp9_mid1_reg_2167,
        ce => grp_fu_1127_ce,
        dout => grp_fu_1127_p2);

    conv_layer_mul_32hbi_U30 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ix_read_reg_1492,
        din1 => tmp6_mid2_v_reg_2276,
        ce => grp_fu_1221_ce,
        dout => grp_fu_1221_p2);

    conv_layer_mul_32hbi_U31 : component conv_layer_mul_32hbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => k_read_reg_1454,
        din1 => tmp11_mid2_v_reg_2296,
        ce => grp_fu_1246_ce,
        dout => grp_fu_1246_p2);

    conv_layer_add_64lbW_U32 : component conv_layer_add_64lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten3_reg_249,
        din1 => ap_const_lv64_1,
        ce => ap_const_logic_1,
        dout => grp_fu_1407_p2);

    conv_layer_add_96kbM_U33 : component conv_layer_add_96kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        dout_WIDTH => 96)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten2_reg_237,
        din1 => ap_const_lv96_1,
        ce => ap_const_logic_1,
        dout => grp_fu_1413_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state94) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter4_state147)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state147) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_predicate_op620_readreq_state127) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = mem_ARREADY) and (ap_block_pp0_stage9_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_predicate_op620_readreq_state127) and (ap_const_logic_1 = mem_ARREADY) and (ap_block_pp0_stage8_flag00001001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state162)) then
                    if ((ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = mem_AWREADY)) then 
                        ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state163)) then
                    if ((ap_sig_ioackin_mem_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = mem_WREADY)) then 
                        ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_1 = ap_reg_pp0_iter3_tmp_17_reg_2360)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = ap_reg_pp0_iter3_tmp_17_reg_2360) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_1 = tmp_23_reg_2397)))) then 
                ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431 <= output_element_2_reg_420;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0))) then 
                ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431 <= ap_phi_precharge_reg_pp0_iter3_output_element_4_reg_431;
            end if; 
        end if;
    end process;

    b_s_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                b_s_reg_201 <= tmp_5_mid2_v_reg_1762;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                b_s_reg_201 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_d_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0))) then 
                i_d_reg_353 <= i_d_mid2_reg_2172;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                i_d_reg_353 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_x1_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then 
                i_x1_reg_387 <= i_x_1_reg_2311;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                i_x1_reg_387 <= i_x_reg_2099;
            end if; 
        end if;
    end process;

    i_y1_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then 
                i_y1_reg_377 <= i_y1_mid2_reg_2259;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                i_y1_reg_377 <= i_y_mid2_reg_2065;
            end if; 
        end if;
    end process;

    iix_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then 
                iix_reg_409 <= iix_1_reg_2370;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                iix_reg_409 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    iiy_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0))) then 
                iiy_reg_397 <= iiy_mid2_reg_2291;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                iiy_reg_397 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvar_flatten1_reg_189 <= indvar_flatten_next3_reg_1663;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten1_reg_189 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvar_flatten2_reg_237 <= indvar_flatten_next2_reg_2461;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten2_reg_237 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten3_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvar_flatten3_reg_249 <= indvar_flatten_next1_reg_2456;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvar_flatten3_reg_249 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten4_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0))) then 
                indvar_flatten4_reg_341 <= indvar_flatten_next4_reg_2157;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                indvar_flatten4_reg_341 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0))) then 
                indvar_flatten_reg_365 <= indvar_flatten_next_reg_2182;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                indvar_flatten_reg_365 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv1_reg_273 <= indvars_iv14_mid2_reg_1911;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv1_reg_273 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv2_reg_285 <= indvars_iv12_mid2_reg_1916;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv2_reg_285 <= k_read_reg_1454;
            end if; 
        end if;
    end process;

    indvars_iv3_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv3_reg_295 <= indvars_iv_next5_reg_2426;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv3_reg_295 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv4_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv4_reg_307 <= indvars_iv_next4_reg_2421;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv4_reg_307 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvars_iv5_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv5_reg_319 <= indvars_iv_next3_reg_2416;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv5_reg_319 <= k_read_reg_1454;
            end if; 
        end if;
    end process;

    indvars_iv_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                indvars_iv_reg_261 <= indvars_iv17_mid2_reg_1932;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                indvars_iv_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    o_d_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                o_d_reg_213 <= o_d_mid2_reg_1851;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                o_d_reg_213 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_x_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                o_x_reg_329 <= o_x_1_reg_2436;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                o_x_reg_329 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_y_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
                o_y_reg_225 <= o_y_mid2_reg_2050;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                o_y_reg_225 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    output_element_2_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten4_reg_2127))) then 
                output_element_2_reg_420 <= output_element_4_phi_fu_435_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                output_element_2_reg_420 <= output_element_reg_2094;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then
                ap_phi_precharge_reg_pp0_iter5_output_element_4_reg_431 <= ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten2_reg_2137 <= exitcond_flatten2_reg_2137;
                ap_reg_pp0_iter1_exitcond_flatten4_reg_2127 <= exitcond_flatten4_reg_2127;
                ap_reg_pp0_iter2_exitcond_flatten2_reg_2137 <= ap_reg_pp0_iter1_exitcond_flatten2_reg_2137;
                ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter1_exitcond_flatten4_reg_2127;
                ap_reg_pp0_iter3_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter2_exitcond_flatten4_reg_2127;
                ap_reg_pp0_iter4_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter3_exitcond_flatten4_reg_2127;
                ap_reg_pp0_iter5_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter4_exitcond_flatten4_reg_2127;
                exitcond_flatten4_reg_2127 <= exitcond_flatten4_fu_1058_p2;
                    i_d_cast_mid1_reg_2117(30 downto 0) <= i_d_cast_mid1_fu_1049_p1(30 downto 0);
                tmp4_reg_2122 <= tmp4_fu_1053_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_15_mid_reg_2210 <= tmp_15_mid_reg_2210;
                ap_reg_pp0_iter3_tmp_17_reg_2360 <= tmp_17_reg_2360;
                ap_reg_pp0_iter4_tmp_17_reg_2360 <= ap_reg_pp0_iter3_tmp_17_reg_2360;
                ap_reg_pp0_iter4_tmp_23_reg_2397 <= tmp_23_reg_2397;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter3_input_element_reg_2337 <= input_element_reg_2337;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                b_read_reg_1529 <= b;
                id_read_reg_1497 <= id;
                ix_read_reg_1492 <= ix;
                iy_read_reg_1486 <= iy;
                k_read_reg_1454 <= k;
                od_read_reg_1520 <= od;
                ox_read_reg_1513 <= ox;
                oy_read_reg_1506 <= oy;
                s_read_reg_1473 <= s;
                tmp_2_reg_1534 <= input_offset(31 downto 2);
                tmp_3_reg_1539 <= output_offset(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) and (ap_const_lv1_0 = exitcond_flatten3_reg_1659))) then
                b_s_4_reg_1722 <= b_s_4_fu_629_p2;
                exitcond_flatten1_reg_1746 <= exitcond_flatten1_fu_640_p2;
                exitcond_flatten_reg_1728 <= exitcond_flatten_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                bound1_reg_1554 <= grp_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                bound2_reg_1571 <= grp_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                bound3_reg_1627 <= grp_fu_513_p2;
                    cast7_reg_1649(31 downto 0) <= cast7_fu_563_p1(31 downto 0);
                exitcond_flatten72_m_reg_1644 <= exitcond_flatten72_m_fu_558_p2;
                num_weights_reg_1603 <= grp_fu_527_p2;
                smax16_mid_reg_1632 <= smax16_mid_fu_547_p3;
                tmp3_reg_1622 <= tmp3_fu_542_p2;
                tmp_10_mid_reg_1638 <= tmp_10_mid_fu_553_p2;
                    tmp_7_reg_1609(29 downto 0) <= tmp_7_fu_536_p1(29 downto 0);
                    tmp_8_reg_1617(29 downto 0) <= tmp_8_fu_539_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                bound4_reg_2112 <= grp_fu_950_p2;
                tmp_4_reg_2107 <= tmp_4_fu_1045_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                bound_reg_2006 <= grp_fu_893_p2;
                o_y_mid_reg_2000 <= o_y_mid_fu_935_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten4_fu_1058_p2))) then
                exitcond_flatten2_reg_2137 <= exitcond_flatten2_fu_1075_p2;
                i_d_s_reg_2131 <= i_d_s_fu_1069_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                exitcond_flatten3_reg_1659 <= exitcond_flatten3_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                exitcond_flatten72_m_1_reg_1768 <= exitcond_flatten72_m_1_fu_666_p3;
                o_d_mid_reg_1756 <= o_d_mid_fu_648_p3;
                tmp_5_mid2_v_reg_1762 <= tmp_5_mid2_v_fu_655_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0))) then
                i_d_mid2_reg_2172 <= i_d_mid2_fu_1107_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0))) then
                i_x1_mid2_reg_2248 <= i_x1_mid2_fu_1179_p3;
                iiy_mid_reg_2232 <= iiy_mid_fu_1152_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0))) then
                i_x_1_reg_2311 <= i_x_1_fu_1254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state93) and (mem_RVALID = ap_const_logic_1))) then
                i_x_reg_2099 <= grp_fu_1040_p2;
                output_element_reg_2094 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0))) then
                i_y1_mid2_reg_2259 <= i_y1_mid2_fu_1190_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                i_y1_mid_reg_2193 <= i_y1_mid_fu_1131_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                i_y_1_reg_2220 <= i_y_1_fu_1147_p2;
                tmp5_mid1_reg_2204 <= grp_fu_1113_p2;
                tmp_15_mid_reg_2210 <= tmp_15_mid_fu_1142_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_10_mid2_reg_1806) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                i_y_mid1_reg_2060 <= grp_fu_980_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                i_y_mid2_reg_2065 <= i_y_mid2_fu_1011_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                i_y_reg_1707 <= grp_fu_607_p2;
                tmp7_reg_1712 <= tmp7_fu_616_p2;
                tmp8_reg_1697 <= tmp8_fu_612_p2;
                tmp_1_reg_1717 <= tmp_1_fu_624_p2;
                tmp_s_reg_1702 <= grp_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                iix_1_reg_2370 <= iix_1_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                iix_mid2_reg_2344 <= iix_mid2_fu_1280_p3;
                notlhs_reg_2350 <= notlhs_fu_1304_p2;
                notrhs_reg_2355 <= notrhs_fu_1310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0))) then
                iiy_1_reg_2270 <= iiy_1_fu_1200_p2;
                tmp10_mid1_reg_2264 <= grp_fu_1127_p2;
                tmp6_mid2_v_reg_2276 <= tmp6_mid2_v_fu_1205_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0))) then
                iiy_mid2_reg_2291 <= iiy_mid2_fu_1230_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten_reg_1728) and (ap_const_logic_1 = ap_CS_fsm_state161))) then
                indvar_flatten123_op_reg_2446 <= grp_fu_1413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_14_reg_1793) and (ap_const_logic_1 = ap_CS_fsm_state161))) then
                indvar_flatten70_op_reg_2441 <= grp_fu_1407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state162) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                indvar_flatten_next1_reg_2456 <= indvar_flatten_next1_fu_1442_p3;
                indvar_flatten_next2_reg_2461 <= indvar_flatten_next2_fu_1448_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                indvar_flatten_next3_reg_1663 <= grp_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next4_reg_2157 <= grp_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                indvar_flatten_next_reg_2182 <= indvar_flatten_next_fu_1117_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0))) then
                indvar_flatten_op_reg_2177 <= grp_fu_1080_p2;
                tmp4_mid1_reg_2162 <= tmp4_mid1_fu_1097_p2;
                tmp9_mid1_reg_2167 <= tmp9_mid1_fu_1102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                indvars_iv12_mid1_reg_1845 <= indvars_iv12_mid1_fu_734_p3;
                indvars_iv14_mid_reg_1839 <= indvars_iv14_mid_fu_727_p3;
                    o_d_cast_reg_1832(30 downto 0) <= o_d_cast_fu_724_p1(30 downto 0);
                o_d_mid2_reg_1851 <= o_d_mid2_fu_745_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                indvars_iv12_mid2_reg_1916 <= indvars_iv12_mid2_fu_820_p3;
                indvars_iv14_mid2_reg_1911 <= indvars_iv14_mid2_fu_815_p3;
                indvars_iv19_mid2_reg_1899 <= indvars_iv19_mid2_fu_806_p3;
                indvars_iv21_mid2_reg_1892 <= indvars_iv21_mid2_fu_799_p3;
                indvars_iv_next2_reg_1886 <= indvars_iv_next2_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                indvars_iv17_mid2_reg_1932 <= indvars_iv17_mid2_fu_849_p3;
                indvars_iv24_mid2_reg_1921 <= indvars_iv24_mid2_fu_832_p3;
                tmp_20_reg_1937 <= tmp_20_fu_854_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                indvars_iv17_mid_reg_1856 <= indvars_iv17_mid_fu_761_p3;
                indvars_iv_next1_reg_1879 <= indvars_iv_next1_fu_784_p2;
                indvars_iv_next_reg_1872 <= indvars_iv_next_fu_780_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_mid2_reg_1806 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                indvars_iv19_mid1_reg_1862 <= indvars_iv19_mid1_fu_768_p3;
                p_mid2_reg_1867 <= p_mid2_fu_774_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state160)) then
                indvars_iv_next3_reg_2416 <= indvars_iv_next3_fu_1395_p2;
                indvars_iv_next4_reg_2421 <= indvars_iv_next4_fu_1399_p2;
                indvars_iv_next5_reg_2426 <= indvars_iv_next5_fu_1403_p2;
                tmp11_reg_2406 <= tmp11_fu_1385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then
                input_element_reg_2337 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = tmp_17_reg_2360) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                notlhs1_reg_2382 <= notlhs1_fu_1364_p2;
                notrhs1_reg_2387 <= notrhs1_fu_1370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                o_d_1_reg_1787 <= o_d_1_fu_682_p2;
                tmp_10_mid2_reg_1806 <= tmp_10_mid2_fu_691_p3;
                tmp_14_reg_1793 <= tmp_14_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                    o_d_cast_mid1_reg_1674(30 downto 0) <= o_d_cast_mid1_fu_586_p1(30 downto 0);
                tmp1_reg_1680 <= tmp1_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state161)) then
                o_x_1_reg_2436 <= o_x_1_fu_1429_p3;
                tmp_9_reg_2431 <= tmp_9_fu_1419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                    o_x_cast_mid2_cast_reg_2088(30 downto 0) <= o_x_cast_mid2_cast_fu_1037_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                o_x_cast_mid2_reg_2077 <= o_x_cast_mid2_fu_1024_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_mid2_reg_1806 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state160) and (ap_const_lv1_0 = tmp_14_reg_1793))) then
                o_x_op_reg_2411 <= o_x_op_fu_1389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                o_y_1_reg_2024 <= o_y_1_fu_942_p2;
                tmp2_mid1_reg_2018 <= grp_fu_919_p2;
                tmp2_mid_reg_2012 <= grp_fu_904_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                    o_y_cast_mid1_reg_1685(30 downto 0) <= o_y_cast_mid1_fu_603_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then
                o_y_mid2_reg_2050 <= o_y_mid2_fu_991_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_lv1_0 = tmp_10_mid2_reg_1806))) then
                p_mid3_reg_1906 <= p_mid3_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_10_mid2_reg_1806) and (ap_const_logic_1 = ap_CS_fsm_state67))) then
                p_mid4_reg_1927 <= p_mid4_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                p_mid5_reg_1948 <= p_mid5_fu_858_p3;
                tmp_25_reg_1953 <= tmp_25_fu_868_p2;
                tmp_6_mid1_reg_1942 <= grp_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                p_mid_reg_1597 <= p_mid_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0))) then
                tmp10_reg_2226 <= grp_fu_1123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0))) then
                tmp11_mid2_reg_2332 <= grp_fu_1246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0))) then
                tmp11_mid2_v_reg_2296 <= tmp11_mid2_v_fu_1240_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_mid2_reg_1806 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                tmp12_mid2117_v_reg_2035 <= tmp12_mid2117_v_fu_971_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                tmp12_mid2_reg_2072 <= grp_fu_1001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                tmp12_mid2_v_reg_2055 <= tmp12_mid2_v_fu_996_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_2137) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_15_mid_reg_2210))) then
                tmp12_reg_2243 <= tmp12_fu_1174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_2137) and (ap_const_lv1_1 = tmp_15_mid_reg_2210) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0))) then
                tmp13_reg_2281 <= tmp13_fu_1216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state69) and (exitcond_flatten72_m_1_reg_1768 = ap_const_lv1_1))) then
                tmp14_mid1_reg_1958 <= tmp14_mid1_fu_878_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0))) then
                tmp14_reg_2306 <= tmp14_fu_1250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                tmp15_reg_2316 <= tmp15_fu_1259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                tmp1_mid1_reg_1963 <= tmp1_mid1_fu_882_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                tmp2_reg_1691 <= grp_fu_595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_15_mid_reg_2210))) then
                tmp3_mid1_reg_2254 <= tmp3_mid1_fu_1185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_flatten2_reg_2137) and (ap_const_lv1_1 = tmp_15_mid_reg_2210))) then
                tmp3_mid_reg_2238 <= tmp3_mid_fu_1170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                tmp5_reg_2187 <= grp_fu_1086_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then
                tmp6_mid2_reg_2301 <= grp_fu_1221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp6_reg_1592 <= grp_fu_523_p2;
                tmp_reg_1587 <= grp_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_10_mid2_reg_1806) and (ap_const_logic_1 = ap_CS_fsm_state77))) then
                tmp7_mid1_reg_2045 <= tmp7_mid1_fu_985_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_15_mid_reg_2210) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0))) then
                tmp8_mid1_reg_2286 <= tmp8_mid1_fu_1225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                tmp9_reg_2152 <= tmp9_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                tmp_11_reg_2321 <= tmp_11_fu_1263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_flatten72_m_1_reg_1768) and (ap_const_lv1_0 = exitcond_flatten_reg_1728) and (ap_const_logic_1 = ap_CS_fsm_state64) and (tmp_10_mid2_reg_1806 = ap_const_lv1_1))) then
                tmp_13_reg_1827 <= tmp_13_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                tmp_17_reg_2360 <= tmp_17_fu_1320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = tmp_17_reg_2360) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                tmp_22_reg_2392 <= grp_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = tmp_17_reg_2360) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                tmp_23_reg_2397 <= tmp_23_fu_1380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = ap_reg_pp0_iter3_tmp_17_reg_2360) and (ap_const_lv1_0 = tmp_23_reg_2397))) then
                tmp_24_reg_2401 <= grp_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_2137))) then
                tmp_26_reg_2199 <= tmp_26_fu_1137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                tmp_5_mid2_reg_1978 <= grp_fu_706_p2;
                tmp_9_mid2_reg_1984 <= tmp_9_mid2_fu_914_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_const_lv1_0 = exitcond_flatten72_m_1_reg_1768) and (ap_const_lv1_0 = exitcond_flatten_reg_1728))) then
                tmp_5_reg_1782 <= tmp_5_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                tmp_6_reg_1668 <= grp_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten72_m_1_reg_1768 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state70))) then
                tmp_mid1_reg_1989 <= grp_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                tmp_mid2_reg_1994 <= tmp_mid2_fu_929_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_boolean_1 = ap_predicate_op628_read_state134) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then
                weight_element_reg_2375 <= mem_RDATA;
            end if;
        end if;
    end process;
    tmp_7_reg_1609(31 downto 30) <= "00";
    tmp_8_reg_1617(31 downto 30) <= "00";
    cast7_reg_1649(95 downto 32) <= "0000000000000000000000000000000000000000000000000000000000000000";
    o_d_cast_mid1_reg_1674(31) <= '0';
    o_y_cast_mid1_reg_1685(31) <= '0';
    o_d_cast_reg_1832(31) <= '0';
    o_x_cast_mid2_cast_reg_2088(31) <= '0';
    i_d_cast_mid1_reg_2117(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_state162, ap_CS_fsm_state163, ap_CS_fsm_state168, ap_CS_fsm_state86, ap_CS_fsm_state93, mem_RVALID, mem_BVALID, exitcond_flatten3_reg_1659, ap_CS_fsm_state61, ap_sig_ioackin_mem_ARREADY, ap_sig_ioackin_mem_AWREADY, ap_block_pp0_stage11_flag00011011, ap_block_pp0_stage4_flag00011011, ap_enable_reg_pp0_iter4, ap_sig_ioackin_mem_WREADY, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage5_flag00011011, ap_block_pp0_stage6_flag00011011, ap_block_pp0_stage7_flag00011011, ap_block_pp0_stage8_flag00011011, ap_block_pp0_stage9_flag00011011, ap_block_pp0_stage10_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_flatten3_reg_1659 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state93) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state93;
                end if;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if (((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then
                    ap_NS_fsm <= ap_ST_fsm_state160;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_block_pp0_stage8_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_block_pp0_stage9_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state162) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state163;
                else
                    ap_NS_fsm <= ap_ST_fsm_state162;
                end if;
            when ap_ST_fsm_state163 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state163) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state164;
                else
                    ap_NS_fsm <= ap_ST_fsm_state163;
                end if;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state168;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(94);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(95);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(104);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(105);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(96);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(97);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(98);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(99);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(100);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(101);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(102);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(103);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state160 <= ap_CS_fsm(106);
    ap_CS_fsm_state161 <= ap_CS_fsm(107);
    ap_CS_fsm_state162 <= ap_CS_fsm(108);
    ap_CS_fsm_state163 <= ap_CS_fsm(109);
    ap_CS_fsm_state168 <= ap_CS_fsm(114);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter3, mem_RVALID, ap_predicate_op628_read_state134)
    begin
                ap_block_pp0_stage3_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = mem_RVALID) and (ap_const_boolean_1 = ap_predicate_op628_read_state134));
    end process;


    ap_block_pp0_stage3_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter3, mem_RVALID, ap_predicate_op628_read_state134)
    begin
                ap_block_pp0_stage3_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = mem_RVALID) and (ap_const_boolean_1 = ap_predicate_op628_read_state134));
    end process;

        ap_block_pp0_stage4_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_flag00000001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, mem_RVALID)
    begin
                ap_block_pp0_stage4_flag00000001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_pp0_stage4_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, mem_RVALID)
    begin
                ap_block_pp0_stage4_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_pp0_stage4_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, mem_RVALID)
    begin
                ap_block_pp0_stage4_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_0 = mem_RVALID));
    end process;

        ap_block_pp0_stage5_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00000001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state127_io)
    begin
                ap_block_pp0_stage8_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state127_io));
    end process;


    ap_block_pp0_stage8_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state127_io)
    begin
                ap_block_pp0_stage8_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state127_io));
    end process;

        ap_block_pp0_stage9_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state116_io)
    begin
                ap_block_pp0_stage9_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state116_io));
    end process;


    ap_block_pp0_stage9_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state116_io)
    begin
                ap_block_pp0_stage9_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state116_io));
    end process;

        ap_block_state100_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state101_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state102_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state103_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state116_io_assign_proc : process(ap_reg_pp0_iter1_exitcond_flatten4_reg_2127, ap_sig_ioackin_mem_ARREADY)
    begin
                ap_block_state116_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY));
    end process;

        ap_block_state116_pp0_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state123_pp0_stage4_iter2_assign_proc : process(ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, mem_RVALID)
    begin
                ap_block_state123_pp0_stage4_iter2 <= ((ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_0 = mem_RVALID));
    end process;

        ap_block_state124_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state127_io_assign_proc : process(ap_sig_ioackin_mem_ARREADY, ap_predicate_op620_readreq_state127)
    begin
                ap_block_state127_io <= ((ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_boolean_1 = ap_predicate_op620_readreq_state127));
    end process;

        ap_block_state127_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp0_stage10_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp0_stage11_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state134_pp0_stage3_iter3_assign_proc : process(mem_RVALID, ap_predicate_op628_read_state134)
    begin
                ap_block_state134_pp0_stage3_iter3 <= ((ap_const_logic_0 = mem_RVALID) and (ap_const_boolean_1 = ap_predicate_op628_read_state134));
    end process;

        ap_block_state135_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state136_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state137_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state138_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state139_pp0_stage8_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state140_pp0_stage9_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state141_pp0_stage10_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state142_pp0_stage11_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state143_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state144_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state146_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state147_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp0_stage5_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state149_pp0_stage6_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state150_pp0_stage7_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state151_pp0_stage8_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state152_pp0_stage9_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state153_pp0_stage10_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state154_pp0_stage11_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state155_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state156_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state157_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state158_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state159_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1366_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten4_reg_2127, ap_block_pp0_stage9_flag00001001)
    begin
                ap_condition_1366 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_block_pp0_stage9_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_1376_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter2, ap_predicate_op620_readreq_state127, ap_block_pp0_stage8_flag00001001)
    begin
                ap_condition_1376 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_predicate_op620_readreq_state127) and (ap_block_pp0_stage8_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_pp0_exit_iter4_state147_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter4_state147 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state147 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(exitcond_flatten3_reg_1659, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_flatten3_reg_1659 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_precharge_reg_pp0_iter3_output_element_4_reg_431 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op620_readreq_state127_assign_proc : process(ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, tmp_17_fu_1320_p2)
    begin
                ap_predicate_op620_readreq_state127 <= ((ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_17_fu_1320_p2));
    end process;


    ap_predicate_op628_read_state134_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten4_reg_2127, tmp_17_reg_2360)
    begin
                ap_predicate_op628_read_state134 <= ((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = tmp_17_reg_2360));
    end process;


    ap_predicate_op629_fcmp_state135_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten4_reg_2127, tmp_17_reg_2360)
    begin
                ap_predicate_op629_fcmp_state135 <= ((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = tmp_17_reg_2360));
    end process;


    ap_predicate_op637_fcmp_state138_assign_proc : process(ap_reg_pp0_iter3_exitcond_flatten4_reg_2127, tmp_17_reg_2360)
    begin
                ap_predicate_op637_fcmp_state138 <= ((ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = tmp_17_reg_2360));
    end process;


    ap_ready_assign_proc : process(exitcond_flatten3_reg_1659, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) and (exitcond_flatten3_reg_1659 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b_s_4_fu_629_p2 <= std_logic_vector(unsigned(b_s_reg_201) + unsigned(ap_const_lv31_1));
    cast1_fu_481_p0 <= oy;
    cast2_fu_485_p0 <= ox;
    cast7_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(id_read_reg_1497),96));
    exitcond_flatten1_fu_640_p2 <= "1" when (indvar_flatten3_reg_249 = bound1_reg_1554) else "0";
    exitcond_flatten2_fu_1075_p2 <= "1" when (indvar_flatten_phi_fu_369_p4 = bound_reg_2006) else "0";
    exitcond_flatten3_fu_575_p2 <= "1" when (indvar_flatten1_reg_189 = bound3_reg_1627) else "0";
    exitcond_flatten4_fu_1058_p2 <= "1" when (indvar_flatten4_phi_fu_345_p4 = bound4_reg_2112) else "0";
    exitcond_flatten72_m_1_fu_666_p3 <= 
        exitcond_flatten72_m_reg_1644 when (exitcond_flatten_reg_1728(0) = '1') else 
        exitcond_flatten1_reg_1746;
    exitcond_flatten72_m_fu_558_p2 <= "1" when (bound1_reg_1554 = ap_const_lv64_0) else "0";
    exitcond_flatten_fu_635_p2 <= "1" when (indvar_flatten2_reg_237 = bound2_reg_1571) else "0";

    grp_fu_1040_ce_assign_proc : process(ap_CS_fsm_state93, mem_RVALID, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state93) and (mem_RVALID = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            grp_fu_1040_ce <= ap_const_logic_1;
        else 
            grp_fu_1040_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1040_p1 <= grp_fu_1040_p10(31 - 1 downto 0);
    grp_fu_1040_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_cast_mid2_reg_2077),32));

    grp_fu_1063_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1063_ce <= ap_const_logic_1;
        else 
            grp_fu_1063_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1080_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1080_ce <= ap_const_logic_1;
        else 
            grp_fu_1080_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1086_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1086_ce <= ap_const_logic_1;
        else 
            grp_fu_1086_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1113_ce_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00011001, ap_block_pp0_stage8_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1113_ce <= ap_const_logic_1;
        else 
            grp_fu_1113_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1123_ce_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00011001, ap_block_pp0_stage8_flag00011001, ap_block_pp0_stage9_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1123_ce <= ap_const_logic_1;
        else 
            grp_fu_1123_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1127_ce_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00011001, ap_block_pp0_stage8_flag00011001, ap_block_pp0_stage9_flag00011001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage4_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1127_ce <= ap_const_logic_1;
        else 
            grp_fu_1127_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1221_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1221_ce <= ap_const_logic_1;
        else 
            grp_fu_1221_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1246_ce_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00011001, ap_block_pp0_stage8_flag00011001, ap_block_pp0_stage9_flag00011001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00011001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_1246_ce <= ap_const_logic_1;
        else 
            grp_fu_1246_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_446_ce_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00011001, ap_block_pp0_stage8_flag00011001, ap_block_pp0_stage9_flag00011001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00011001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage4_flag00011001, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_446_ce <= ap_const_logic_1;
        else 
            grp_fu_446_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_452_ce_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage8_flag00011001, ap_block_pp0_stage9_flag00011001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00011001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_flag00011001, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_452_ce <= ap_const_logic_1;
        else 
            grp_fu_452_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_456_ce_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_flag00011001, ap_block_pp0_stage8_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_flag00011001, ap_block_pp0_stage4_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)))) then 
            grp_fu_456_ce <= ap_const_logic_1;
        else 
            grp_fu_456_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_456_p0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000, ap_CS_fsm_pp0_stage5, input_element_reg_2337, weight_element_reg_2375, ap_block_pp0_stage5_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_456_p0 <= weight_element_reg_2375;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_456_p0 <= input_element_reg_2337;
        else 
            grp_fu_456_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_489_p0 <= grp_fu_489_p00(32 - 1 downto 0);
    grp_fu_489_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast2_fu_485_p0),64));
    grp_fu_489_p1 <= grp_fu_489_p10(32 - 1 downto 0);
    grp_fu_489_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast1_fu_481_p0),64));
    grp_fu_501_p0 <= grp_fu_501_p00(64 - 1 downto 0);
    grp_fu_501_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound1_reg_1554),96));
    grp_fu_501_p1 <= grp_fu_501_p10(32 - 1 downto 0);
    grp_fu_501_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(od_read_reg_1520),96));
    grp_fu_513_p0 <= grp_fu_513_p00(96 - 1 downto 0);
    grp_fu_513_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound2_reg_1571),128));
    grp_fu_513_p1 <= grp_fu_513_p10(32 - 1 downto 0);
    grp_fu_513_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_read_reg_1529),128));
    grp_fu_570_p1 <= grp_fu_570_p10(31 - 1 downto 0);
    grp_fu_570_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_s_reg_201),32));
    grp_fu_599_p1 <= o_d_cast_mid1_reg_1674(31 - 1 downto 0);
    grp_fu_607_p1 <= grp_fu_607_p10(31 - 1 downto 0);
    grp_fu_607_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_y_reg_225),32));
    grp_fu_661_p1 <= grp_fu_661_p10(31 - 1 downto 0);
    grp_fu_661_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_s_4_reg_1722),32));
    grp_fu_706_p1 <= grp_fu_706_p10(31 - 1 downto 0);
    grp_fu_706_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_mid2_v_reg_1762),32));
    grp_fu_740_p1 <= grp_fu_740_p10(31 - 1 downto 0);
    grp_fu_740_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_d_1_reg_1787),32));
    grp_fu_893_p0 <= grp_fu_893_p00(32 - 1 downto 0);
    grp_fu_893_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_1953),64));
    grp_fu_893_p1 <= grp_fu_893_p10(32 - 1 downto 0);
    grp_fu_893_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid5_reg_1948),64));

    grp_fu_950_ce_assign_proc : process(ap_CS_fsm_state86, ap_CS_fsm_state93, mem_RVALID, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_sig_ioackin_mem_ARREADY, ap_CS_fsm_state87, ap_CS_fsm_state94, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state85) or ((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state93) and (mem_RVALID = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            grp_fu_950_ce <= ap_const_logic_1;
        else 
            grp_fu_950_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_950_p0 <= grp_fu_950_p00(64 - 1 downto 0);
    grp_fu_950_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_reg_2006),96));
    grp_fu_950_p1 <= cast7_reg_1649(32 - 1 downto 0);
    grp_fu_980_p1 <= o_y_cast_fu_977_p1(31 - 1 downto 0);
    i_d_cast_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_d_s_reg_2131),32));
    i_d_cast_mid1_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_d_phi_fu_357_p4),32));
    i_d_mid2_fu_1107_p3 <= 
        i_d_s_reg_2131 when (exitcond_flatten2_reg_2137(0) = '1') else 
        i_d_reg_353;

    i_d_phi_fu_357_p4_assign_proc : process(exitcond_flatten4_reg_2127, ap_enable_reg_pp0_iter1, i_d_reg_353, ap_CS_fsm_pp0_stage0, i_d_mid2_reg_2172, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_d_phi_fu_357_p4 <= i_d_mid2_reg_2172;
        else 
            i_d_phi_fu_357_p4 <= i_d_reg_353;
        end if; 
    end process;

    i_d_s_fu_1069_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(i_d_phi_fu_357_p4));
    i_x1_mid2_fu_1179_p3 <= 
        i_x1_mid_fu_1159_p3 when (tmp_15_mid_reg_2210(0) = '1') else 
        i_x_reg_2099;
    i_x1_mid_fu_1159_p3 <= 
        i_x_reg_2099 when (exitcond_flatten2_reg_2137(0) = '1') else 
        i_x1_reg_387;

    i_x1_phi_fu_390_p4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten4_reg_2127, i_x1_reg_387, ap_CS_fsm_pp0_stage7, i_x_1_reg_2311, ap_block_pp0_stage7_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00000000 = ap_const_boolean_0))) then 
            i_x1_phi_fu_390_p4 <= i_x_1_reg_2311;
        else 
            i_x1_phi_fu_390_p4 <= i_x1_reg_387;
        end if; 
    end process;

    i_x_1_fu_1254_p2 <= std_logic_vector(unsigned(i_x1_mid2_reg_2248) + unsigned(ap_const_lv32_1));
    i_y1_mid2_fu_1190_p3 <= 
        i_y1_mid_reg_2193 when (tmp_15_mid_reg_2210(0) = '1') else 
        i_y_1_reg_2220;
    i_y1_mid_fu_1131_p3 <= 
        i_y_mid2_reg_2065 when (exitcond_flatten2_reg_2137(0) = '1') else 
        i_y1_phi_fu_380_p4;

    i_y1_phi_fu_380_p4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten4_reg_2127, i_y1_reg_377, ap_CS_fsm_pp0_stage7, i_y1_mid2_reg_2259, ap_block_pp0_stage7_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00000000 = ap_const_boolean_0))) then 
            i_y1_phi_fu_380_p4 <= i_y1_mid2_reg_2259;
        else 
            i_y1_phi_fu_380_p4 <= i_y1_reg_377;
        end if; 
    end process;

    i_y_1_fu_1147_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_y1_mid_reg_2193));
    i_y_mid2_fu_1011_p3 <= 
        i_y_mid_fu_1005_p3 when (tmp_10_mid2_reg_1806(0) = '1') else 
        i_y_mid1_reg_2060;
    i_y_mid_fu_1005_p3 <= 
        ap_const_lv32_0 when (tmp_14_reg_1793(0) = '1') else 
        i_y_reg_1707;
    iix_1_fu_1342_p2 <= std_logic_vector(unsigned(iix_mid2_reg_2344) + unsigned(ap_const_lv32_1));
    iix_mid2_fu_1280_p3 <= 
        iix_mid_fu_1273_p3 when (ap_reg_pp0_iter1_tmp_15_mid_reg_2210(0) = '1') else 
        ap_const_lv32_0;
    iix_mid_fu_1273_p3 <= 
        ap_const_lv32_0 when (ap_reg_pp0_iter2_exitcond_flatten2_reg_2137(0) = '1') else 
        iix_phi_fu_413_p4;

    iix_phi_fu_413_p4_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter3_exitcond_flatten4_reg_2127, iix_reg_409, ap_CS_fsm_pp0_stage7, iix_1_reg_2370, ap_block_pp0_stage7_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00000000 = ap_const_boolean_0))) then 
            iix_phi_fu_413_p4 <= iix_1_reg_2370;
        else 
            iix_phi_fu_413_p4 <= iix_reg_409;
        end if; 
    end process;

    iiy_1_fu_1200_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(iiy_mid_reg_2232));
    iiy_mid2_fu_1230_p3 <= 
        iiy_mid_reg_2232 when (tmp_15_mid_reg_2210(0) = '1') else 
        iiy_1_reg_2270;
    iiy_mid_fu_1152_p3 <= 
        ap_const_lv32_0 when (exitcond_flatten2_reg_2137(0) = '1') else 
        iiy_phi_fu_401_p4;

    iiy_phi_fu_401_p4_assign_proc : process(ap_CS_fsm_pp0_stage9, ap_enable_reg_pp0_iter1, ap_block_pp0_stage9_flag00000000, ap_reg_pp0_iter1_exitcond_flatten4_reg_2127, iiy_reg_397, iiy_mid2_reg_2291)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage9_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127))) then 
            iiy_phi_fu_401_p4 <= iiy_mid2_reg_2291;
        else 
            iiy_phi_fu_401_p4 <= iiy_reg_397;
        end if; 
    end process;


    indvar_flatten4_phi_fu_345_p4_assign_proc : process(exitcond_flatten4_reg_2127, ap_enable_reg_pp0_iter1, indvar_flatten4_reg_341, ap_CS_fsm_pp0_stage0, indvar_flatten_next4_reg_2157, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten4_phi_fu_345_p4 <= indvar_flatten_next4_reg_2157;
        else 
            indvar_flatten4_phi_fu_345_p4 <= indvar_flatten4_reg_341;
        end if; 
    end process;

    indvar_flatten_next1_fu_1442_p3 <= 
        ap_const_lv64_1 when (tmp_14_reg_1793(0) = '1') else 
        indvar_flatten70_op_reg_2441;
    indvar_flatten_next2_fu_1448_p3 <= 
        ap_const_lv96_1 when (exitcond_flatten_reg_1728(0) = '1') else 
        indvar_flatten123_op_reg_2446;
    indvar_flatten_next_fu_1117_p3 <= 
        ap_const_lv64_1 when (exitcond_flatten2_reg_2137(0) = '1') else 
        indvar_flatten_op_reg_2177;

    indvar_flatten_phi_fu_369_p4_assign_proc : process(exitcond_flatten4_reg_2127, ap_enable_reg_pp0_iter1, indvar_flatten_reg_365, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_2182, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_369_p4 <= indvar_flatten_next_reg_2182;
        else 
            indvar_flatten_phi_fu_369_p4 <= indvar_flatten_reg_365;
        end if; 
    end process;

    indvars_iv12_mid1_fu_734_p3 <= 
        k_read_reg_1454 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        indvars_iv12_mid_fu_697_p3;
    indvars_iv12_mid2_fu_820_p3 <= 
        indvars_iv12_mid1_reg_1845 when (tmp_10_mid2_reg_1806(0) = '1') else 
        indvars_iv_next_reg_1872;
    indvars_iv12_mid_fu_697_p3 <= 
        k_read_reg_1454 when (exitcond_flatten_reg_1728(0) = '1') else 
        indvars_iv2_reg_285;
    indvars_iv14_mid2_fu_815_p3 <= 
        indvars_iv14_mid_reg_1839 when (tmp_10_mid2_reg_1806(0) = '1') else 
        indvars_iv_next1_reg_1879;
    indvars_iv14_mid_fu_727_p3 <= 
        ap_const_lv32_0 when (tmp_14_reg_1793(0) = '1') else 
        indvars_iv1_reg_273;
    indvars_iv17_mid2_fu_849_p3 <= 
        indvars_iv17_mid_reg_1856 when (tmp_10_mid2_reg_1806(0) = '1') else 
        indvars_iv_next2_reg_1886;
    indvars_iv17_mid_fu_761_p3 <= 
        ap_const_lv32_0 when (tmp_14_reg_1793(0) = '1') else 
        indvars_iv_reg_261;
    indvars_iv19_mid1_fu_768_p3 <= 
        k_read_reg_1454 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        indvars_iv19_mid_fu_750_p3;
    indvars_iv19_mid2_fu_806_p3 <= 
        indvars_iv19_mid1_reg_1862 when (tmp_10_mid2_reg_1806(0) = '1') else 
        k_read_reg_1454;
    indvars_iv19_mid_fu_750_p3 <= 
        k_read_reg_1454 when (exitcond_flatten_reg_1728(0) = '1') else 
        indvars_iv5_reg_319;
    indvars_iv21_mid2_fu_799_p3 <= 
        indvars_iv21_mid_fu_788_p3 when (tmp_10_mid2_reg_1806(0) = '1') else 
        ap_const_lv32_0;
    indvars_iv21_mid_fu_788_p3 <= 
        ap_const_lv32_0 when (tmp_14_reg_1793(0) = '1') else 
        indvars_iv4_reg_307;
    indvars_iv24_mid2_fu_832_p3 <= 
        indvars_iv24_mid_fu_825_p3 when (tmp_10_mid2_reg_1806(0) = '1') else 
        ap_const_lv32_0;
    indvars_iv24_mid_fu_825_p3 <= 
        ap_const_lv32_0 when (tmp_14_reg_1793(0) = '1') else 
        indvars_iv3_reg_295;
    indvars_iv_next1_fu_784_p2 <= std_logic_vector(signed(s_read_reg_1473) + signed(indvars_iv14_mid_reg_1839));
    indvars_iv_next2_fu_795_p2 <= std_logic_vector(unsigned(indvars_iv17_mid_reg_1856) - unsigned(s_read_reg_1473));
    indvars_iv_next3_fu_1395_p2 <= std_logic_vector(unsigned(indvars_iv19_mid2_reg_1899) + unsigned(s_read_reg_1473));
    indvars_iv_next4_fu_1399_p2 <= std_logic_vector(unsigned(indvars_iv21_mid2_reg_1892) + unsigned(s_read_reg_1473));
    indvars_iv_next5_fu_1403_p2 <= std_logic_vector(unsigned(indvars_iv24_mid2_reg_1921) - unsigned(s_read_reg_1473));
    indvars_iv_next_fu_780_p2 <= std_logic_vector(signed(s_read_reg_1473) + signed(indvars_iv12_mid1_reg_1845));
    input_element_to_int_fu_1287_p1 <= input_element_reg_2337;

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state86, tmp_9_mid2_reg_1984, tmp_11_reg_2321, tmp_18_fu_1330_p2, ap_reg_ioackin_mem_ARREADY, ap_condition_1366, ap_condition_1376)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then
            if ((ap_condition_1376 = ap_const_boolean_1)) then 
                mem_ARADDR <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1330_p2),64));
            elsif ((ap_condition_1366 = ap_const_boolean_1)) then 
                mem_ARADDR <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_2321),64));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                mem_ARADDR <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_mid2_reg_1984),64));
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage9, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_exitcond_flatten4_reg_2127, ap_CS_fsm_state86, ap_predicate_op620_readreq_state127, ap_reg_ioackin_mem_ARREADY, ap_block_pp0_stage9_flag00001001, ap_block_pp0_stage8_flag00001001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state86) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY) and (ap_block_pp0_stage9_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_predicate_op620_readreq_state127) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY) and (ap_block_pp0_stage8_flag00001001 = ap_const_boolean_0)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    mem_AWADDR <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_2431),64));

    mem_AWVALID_assign_proc : process(ap_CS_fsm_state162, ap_reg_ioackin_mem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state162) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state168, mem_BVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state168) and (mem_BVALID = ap_const_logic_1))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_state93, mem_RVALID, ap_block_pp0_stage4_flag00011001, ap_predicate_op628_read_state134, ap_block_pp0_stage3_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state93) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_boolean_1 = ap_predicate_op628_read_state134) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state163, ap_reg_ioackin_mem_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state163) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter2, ap_block_pp0_stage8_flag00000000, ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, tmp_17_fu_1320_p2, ap_CS_fsm_pp0_stage9, ap_enable_reg_pp0_iter1, ap_block_pp0_stage9_flag00000000, ap_reg_pp0_iter1_exitcond_flatten4_reg_2127, ap_CS_fsm_state86)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage8_flag00000000 = ap_const_boolean_0) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_lv1_0 = tmp_17_fu_1320_p2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage9_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten4_reg_2127)) or (ap_const_logic_1 = ap_CS_fsm_state86))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state162)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state168)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state168)) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter2_exitcond_flatten4_reg_2127, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage3_flag00000000, ap_reg_pp0_iter3_exitcond_flatten4_reg_2127, tmp_17_reg_2360, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000, ap_CS_fsm_state93)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = tmp_17_reg_2360)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state163)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state163)) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    notlhs1_fu_1364_p2 <= "0" when (tmp_19_fu_1350_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1304_p2 <= "0" when (tmp_12_fu_1290_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_1370_p2 <= "1" when (tmp_28_fu_1360_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1310_p2 <= "1" when (tmp_27_fu_1300_p1 = ap_const_lv23_0) else "0";
    o_d_1_fu_682_p2 <= std_logic_vector(unsigned(o_d_mid_reg_1756) + unsigned(ap_const_lv31_1));
    o_d_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_d_1_reg_1787),32));
    o_d_cast_mid1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_d_reg_213),32));
    o_d_mid2_fu_745_p3 <= 
        o_d_1_reg_1787 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        o_d_mid_reg_1756;
    o_d_mid_fu_648_p3 <= 
        ap_const_lv31_0 when (exitcond_flatten_reg_1728(0) = '1') else 
        o_d_reg_213;
    o_x_1_fu_1429_p3 <= 
        o_x_mid293_op_fu_1423_p3 when (tmp_10_mid2_reg_1806(0) = '1') else 
        ap_const_lv31_1;
    o_x_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_reg_329),32));
    o_x_cast_mid2_cast_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_x_cast_mid2_reg_2077),32));
    o_x_cast_mid2_fu_1024_p3 <= 
        o_x_cast_mid_fu_1017_p3 when (tmp_10_mid2_reg_1806(0) = '1') else 
        ap_const_lv31_0;
    o_x_cast_mid_fu_1017_p3 <= 
        ap_const_lv31_0 when (tmp_14_reg_1793(0) = '1') else 
        o_x_reg_329;
    o_x_mid293_op_fu_1423_p3 <= 
        ap_const_lv31_1 when (tmp_14_reg_1793(0) = '1') else 
        o_x_op_reg_2411;
    o_x_op_fu_1389_p2 <= std_logic_vector(unsigned(o_x_reg_329) + unsigned(ap_const_lv31_1));
    o_y_1_fu_942_p2 <= std_logic_vector(unsigned(o_y_mid_reg_2000) + unsigned(ap_const_lv31_1));
    o_y_cast_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_y_1_reg_2024),32));
    o_y_cast_mid1_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_y_reg_225),32));
    o_y_mid2_fu_991_p3 <= 
        o_y_mid_reg_2000 when (tmp_10_mid2_reg_1806(0) = '1') else 
        o_y_1_reg_2024;
    o_y_mid_fu_935_p3 <= 
        ap_const_lv31_0 when (tmp_14_reg_1793(0) = '1') else 
        o_y_reg_225;

    output_element_2_phi_fu_424_p4_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000, output_element_2_reg_420, ap_reg_pp0_iter5_exitcond_flatten4_reg_2127, ap_enable_reg_pp0_iter5, output_element_4_phi_fu_435_p6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten4_reg_2127))) then 
            output_element_2_phi_fu_424_p4 <= output_element_4_phi_fu_435_p6;
        else 
            output_element_2_phi_fu_424_p4 <= output_element_2_reg_420;
        end if; 
    end process;


    output_element_4_phi_fu_435_p6_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00000000, ap_reg_pp0_iter5_exitcond_flatten4_reg_2127, ap_reg_pp0_iter4_tmp_17_reg_2360, ap_reg_pp0_iter4_tmp_23_reg_2397, ap_enable_reg_pp0_iter5, grp_fu_446_p2, ap_phi_precharge_reg_pp0_iter5_output_element_4_reg_431)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_lv1_0 = ap_reg_pp0_iter5_exitcond_flatten4_reg_2127) and (ap_const_lv1_0 = ap_reg_pp0_iter4_tmp_17_reg_2360) and (ap_const_lv1_0 = ap_reg_pp0_iter4_tmp_23_reg_2397))) then 
            output_element_4_phi_fu_435_p6 <= grp_fu_446_p2;
        else 
            output_element_4_phi_fu_435_p6 <= ap_phi_precharge_reg_pp0_iter5_output_element_4_reg_431;
        end if; 
    end process;

    p_mid1_fu_756_p3 <= 
        smax16_mid_reg_1632 when (exitcond_flatten_reg_1728(0) = '1') else 
        tmp_13_reg_1827;
    p_mid2_fu_774_p3 <= 
        smax16_mid_reg_1632 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        p_mid1_fu_756_p3;
    p_mid3_fu_811_p2 <= "1" when (signed(indvars_iv_next_reg_1872) > signed(indvars_iv_next1_reg_1879)) else "0";
    p_mid4_fu_844_p2 <= std_logic_vector(unsigned(indvars_iv_next2_reg_1886) + unsigned(smax16_mid1_fu_839_p3));
    p_mid5_fu_858_p3 <= 
        p_mid2_reg_1867 when (tmp_10_mid2_reg_1806(0) = '1') else 
        p_mid4_reg_1927;
    p_mid_fu_531_p2 <= "1" when (signed(k_read_reg_1454) > signed(ap_const_lv32_0)) else "0";
    smax16_mid1_fu_839_p3 <= 
        indvars_iv_next_reg_1872 when (p_mid3_reg_1906(0) = '1') else 
        indvars_iv_next1_reg_1879;
    smax16_mid_fu_547_p3 <= 
        k_read_reg_1454 when (p_mid_reg_1597(0) = '1') else 
        ap_const_lv32_0;
    smax1_fu_863_p3 <= 
        indvars_iv19_mid2_reg_1899 when (tmp_20_reg_1937(0) = '1') else 
        indvars_iv21_mid2_reg_1892;
    smax_fu_711_p3 <= 
        indvars_iv2_reg_285 when (tmp_5_reg_1782(0) = '1') else 
        indvars_iv1_reg_273;
    tmp10_mid2_fu_1211_p3 <= 
        tmp10_mid1_reg_2264 when (exitcond_flatten2_reg_2137(0) = '1') else 
        tmp10_reg_2226;
    tmp11_fu_1385_p2 <= std_logic_vector(unsigned(o_x_cast_mid2_cast_reg_2088) + unsigned(tmp_8_reg_1617));
    tmp11_mid245_v_fu_1235_p3 <= 
        tmp10_mid1_reg_2264 when (exitcond_flatten2_reg_2137(0) = '1') else 
        tmp13_reg_2281;
    tmp11_mid2_v_fu_1240_p3 <= 
        tmp11_mid245_v_fu_1235_p3 when (tmp_15_mid_reg_2210(0) = '1') else 
        tmp8_mid1_reg_2286;
    tmp12_fu_1174_p2 <= std_logic_vector(unsigned(tmp5_reg_2187) + unsigned(i_y1_reg_377));
    tmp12_mid2117_v_fu_971_p3 <= 
        tmp2_mid1_reg_2018 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        tmp12_mid2187_v_fu_960_p3;
    tmp12_mid2187_v_fu_960_p3 <= 
        tmp2_mid_reg_2012 when (exitcond_flatten_reg_1728(0) = '1') else 
        tmp7_reg_1712;
    tmp12_mid2_v_fu_996_p3 <= 
        tmp12_mid2117_v_reg_2035 when (tmp_10_mid2_reg_1806(0) = '1') else 
        tmp7_mid1_reg_2045;
    tmp13_fu_1216_p2 <= std_logic_vector(unsigned(tmp10_reg_2226) + unsigned(iiy_reg_397));
    tmp14_fu_1250_p2 <= std_logic_vector(unsigned(tmp6_mid2_reg_2301) + unsigned(i_x1_mid2_reg_2248));
    tmp14_mid1_fu_878_p2 <= std_logic_vector(unsigned(tmp_7_reg_1609) + unsigned(o_d_cast_reg_1832));
    tmp15_fu_1259_p2 <= std_logic_vector(unsigned(tmp14_reg_2306) + unsigned(num_weights_reg_1603));
    tmp1_fu_590_p2 <= std_logic_vector(unsigned(tmp_6_reg_1668) + unsigned(o_d_cast_mid1_fu_586_p1));
    tmp1_mid1_fu_882_p2 <= std_logic_vector(unsigned(o_d_cast_reg_1832) + unsigned(tmp_6_mid2_fu_873_p3));
    tmp20_fu_1326_p2 <= std_logic_vector(unsigned(tmp_7_reg_1609) + unsigned(iix_mid2_reg_2344));
    tmp2_mid2_fu_965_p3 <= 
        tmp2_mid1_reg_2018 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        tmp2_mid3_fu_955_p3;
    tmp2_mid3_fu_955_p3 <= 
        tmp2_mid_reg_2012 when (exitcond_flatten_reg_1728(0) = '1') else 
        tmp2_reg_1691;
    tmp3_fu_542_p2 <= std_logic_vector(unsigned(tmp_7_fu_536_p1) + unsigned(od_read_reg_1520));
    tmp3_mid1_fu_1185_p2 <= std_logic_vector(unsigned(i_y_1_reg_2220) + unsigned(tmp5_mid2_fu_1165_p3));
    tmp3_mid_fu_1170_p2 <= std_logic_vector(unsigned(i_y_mid2_reg_2065) + unsigned(tmp5_mid1_reg_2204));
    tmp4_fu_1053_p2 <= std_logic_vector(unsigned(i_d_cast_mid1_fu_1049_p1) + unsigned(tmp_5_mid2_reg_1978));
    tmp4_mid1_fu_1097_p2 <= std_logic_vector(unsigned(i_d_cast_fu_1094_p1) + unsigned(tmp_5_mid2_reg_1978));
    tmp5_mid2_fu_1165_p3 <= 
        tmp5_mid1_reg_2204 when (exitcond_flatten2_reg_2137(0) = '1') else 
        tmp5_reg_2187;
    tmp6_mid241_v_fu_1195_p3 <= 
        tmp3_mid_reg_2238 when (exitcond_flatten2_reg_2137(0) = '1') else 
        tmp12_reg_2243;
    tmp6_mid2_v_fu_1205_p3 <= 
        tmp6_mid241_v_fu_1195_p3 when (tmp_15_mid_reg_2210(0) = '1') else 
        tmp3_mid1_reg_2254;
    tmp7_fu_616_p2 <= std_logic_vector(unsigned(tmp2_reg_1691) + unsigned(o_y_cast_mid1_reg_1685));
    tmp7_mid1_fu_985_p2 <= std_logic_vector(unsigned(o_y_cast_fu_977_p1) + unsigned(tmp2_mid2_fu_965_p3));
    tmp8_fu_612_p2 <= std_logic_vector(unsigned(o_d_cast_mid1_reg_1674) + unsigned(tmp_7_reg_1609));
    tmp8_mid1_fu_1225_p2 <= std_logic_vector(unsigned(iiy_1_reg_2270) + unsigned(tmp10_mid2_fu_1211_p3));
    tmp9_fu_1090_p2 <= std_logic_vector(unsigned(i_d_cast_mid1_reg_2117) + unsigned(tmp_mid2_reg_1994));
    tmp9_mid1_fu_1102_p2 <= std_logic_vector(unsigned(i_d_cast_fu_1094_p1) + unsigned(tmp_mid2_reg_1994));
    tmp_10_mid1_fu_677_p3 <= 
        tmp_10_mid_reg_1638 when (exitcond_flatten_reg_1728(0) = '1') else 
        tmp_1_reg_1717;
    tmp_10_mid2_fu_691_p3 <= 
        tmp_10_mid_reg_1638 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        tmp_10_mid1_fu_677_p3;
    tmp_10_mid_fu_553_p2 <= "1" when (signed(ox_read_reg_1513) > signed(ap_const_lv32_0)) else "0";
    tmp_11_fu_1263_p2 <= std_logic_vector(unsigned(tmp15_reg_2316) + unsigned(tmp3_reg_1622));
    tmp_12_fu_1290_p4 <= input_element_to_int_fu_1287_p1(30 downto 23);
    tmp_13_fu_718_p2 <= std_logic_vector(unsigned(smax_fu_711_p3) + unsigned(indvars_iv_reg_261));
    tmp_14_fu_687_p2 <= (exitcond_flatten72_m_1_reg_1768 or exitcond_flatten_reg_1728);
    tmp_15_fu_1316_p2 <= (notrhs_reg_2355 or notlhs_reg_2350);
    tmp_15_mid_fu_1142_p3 <= 
        p_mid_reg_1597 when (exitcond_flatten2_reg_2137(0) = '1') else 
        tmp_26_reg_2199;
    tmp_17_fu_1320_p2 <= (tmp_15_fu_1316_p2 and grp_fu_456_p2);
    tmp_18_fu_1330_p2 <= std_logic_vector(unsigned(tmp20_fu_1326_p2) + unsigned(tmp11_mid2_reg_2332));
    tmp_19_fu_1350_p4 <= weight_element_to_in_fu_1347_p1(30 downto 23);
    tmp_1_fu_624_p2 <= "1" when (signed(o_x_cast_fu_620_p1) < signed(ox_read_reg_1513)) else "0";
    tmp_20_fu_854_p2 <= "1" when (signed(indvars_iv19_mid2_reg_1899) > signed(indvars_iv21_mid2_reg_1892)) else "0";
    tmp_21_fu_1376_p2 <= (notrhs1_reg_2387 or notlhs1_reg_2382);
    tmp_23_fu_1380_p2 <= (tmp_21_fu_1376_p2 and tmp_22_reg_2392);
    tmp_25_fu_868_p2 <= std_logic_vector(unsigned(indvars_iv24_mid2_reg_1921) + unsigned(smax1_fu_863_p3));
    tmp_26_fu_1137_p2 <= "1" when (signed(i_x1_phi_fu_390_p4) < signed(tmp_4_reg_2107)) else "0";
    tmp_27_fu_1300_p1 <= input_element_to_int_fu_1287_p1(23 - 1 downto 0);
    tmp_28_fu_1360_p1 <= weight_element_to_in_fu_1347_p1(23 - 1 downto 0);
    tmp_4_fu_1045_p2 <= std_logic_vector(signed(k_read_reg_1454) + signed(i_x_reg_2099));
    tmp_5_fu_671_p2 <= "1" when (signed(indvars_iv2_reg_285) > signed(indvars_iv1_reg_273)) else "0";
    tmp_5_mid2_v_fu_655_p3 <= 
        b_s_4_reg_1722 when (exitcond_flatten_reg_1728(0) = '1') else 
        b_s_reg_201;
    tmp_6_mid2_fu_873_p3 <= 
        tmp_6_mid1_reg_1942 when (exitcond_flatten_reg_1728(0) = '1') else 
        tmp_6_reg_1668;
    tmp_7_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1534),32));
    tmp_8_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_1539),32));
    tmp_9_fu_1419_p2 <= std_logic_vector(unsigned(tmp12_mid2_reg_2072) + unsigned(tmp11_reg_2406));
    tmp_9_mid2155_v_fu_899_p3 <= 
        tmp_7_reg_1609 when (exitcond_flatten_reg_1728(0) = '1') else 
        tmp8_reg_1697;
    tmp_9_mid2_fu_914_p2 <= std_logic_vector(unsigned(tmp_9_mid2_v_fu_908_p3) + unsigned(num_weights_reg_1603));
    tmp_9_mid2_v_fu_908_p3 <= 
        tmp14_mid1_reg_1958 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        tmp_9_mid2155_v_fu_899_p3;
    tmp_mid2_fu_929_p3 <= 
        tmp_mid1_reg_1989 when (exitcond_flatten72_m_1_reg_1768(0) = '1') else 
        tmp_mid_fu_923_p3;
    tmp_mid_fu_923_p3 <= 
        ap_const_lv32_0 when (exitcond_flatten_reg_1728(0) = '1') else 
        tmp_s_reg_1702;
    weight_element_to_in_fu_1347_p1 <= weight_element_reg_2375;
end behav;
