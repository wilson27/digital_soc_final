// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.278000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=145,HLS_SYN_FF=22927,HLS_SYN_LUT=9059}" *)

module conv_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 115'd1;
parameter    ap_ST_fsm_state2 = 115'd2;
parameter    ap_ST_fsm_state3 = 115'd4;
parameter    ap_ST_fsm_state4 = 115'd8;
parameter    ap_ST_fsm_state5 = 115'd16;
parameter    ap_ST_fsm_state6 = 115'd32;
parameter    ap_ST_fsm_state7 = 115'd64;
parameter    ap_ST_fsm_state8 = 115'd128;
parameter    ap_ST_fsm_state9 = 115'd256;
parameter    ap_ST_fsm_state10 = 115'd512;
parameter    ap_ST_fsm_state11 = 115'd1024;
parameter    ap_ST_fsm_state12 = 115'd2048;
parameter    ap_ST_fsm_state13 = 115'd4096;
parameter    ap_ST_fsm_state14 = 115'd8192;
parameter    ap_ST_fsm_state15 = 115'd16384;
parameter    ap_ST_fsm_state16 = 115'd32768;
parameter    ap_ST_fsm_state17 = 115'd65536;
parameter    ap_ST_fsm_state18 = 115'd131072;
parameter    ap_ST_fsm_state19 = 115'd262144;
parameter    ap_ST_fsm_state20 = 115'd524288;
parameter    ap_ST_fsm_state21 = 115'd1048576;
parameter    ap_ST_fsm_state22 = 115'd2097152;
parameter    ap_ST_fsm_state23 = 115'd4194304;
parameter    ap_ST_fsm_state24 = 115'd8388608;
parameter    ap_ST_fsm_state25 = 115'd16777216;
parameter    ap_ST_fsm_state26 = 115'd33554432;
parameter    ap_ST_fsm_state27 = 115'd67108864;
parameter    ap_ST_fsm_state28 = 115'd134217728;
parameter    ap_ST_fsm_state29 = 115'd268435456;
parameter    ap_ST_fsm_state30 = 115'd536870912;
parameter    ap_ST_fsm_state31 = 115'd1073741824;
parameter    ap_ST_fsm_state32 = 115'd2147483648;
parameter    ap_ST_fsm_state33 = 115'd4294967296;
parameter    ap_ST_fsm_state34 = 115'd8589934592;
parameter    ap_ST_fsm_state35 = 115'd17179869184;
parameter    ap_ST_fsm_state36 = 115'd34359738368;
parameter    ap_ST_fsm_state37 = 115'd68719476736;
parameter    ap_ST_fsm_state38 = 115'd137438953472;
parameter    ap_ST_fsm_state39 = 115'd274877906944;
parameter    ap_ST_fsm_state40 = 115'd549755813888;
parameter    ap_ST_fsm_state41 = 115'd1099511627776;
parameter    ap_ST_fsm_state42 = 115'd2199023255552;
parameter    ap_ST_fsm_state43 = 115'd4398046511104;
parameter    ap_ST_fsm_state44 = 115'd8796093022208;
parameter    ap_ST_fsm_state45 = 115'd17592186044416;
parameter    ap_ST_fsm_state46 = 115'd35184372088832;
parameter    ap_ST_fsm_state47 = 115'd70368744177664;
parameter    ap_ST_fsm_state48 = 115'd140737488355328;
parameter    ap_ST_fsm_state49 = 115'd281474976710656;
parameter    ap_ST_fsm_state50 = 115'd562949953421312;
parameter    ap_ST_fsm_state51 = 115'd1125899906842624;
parameter    ap_ST_fsm_state52 = 115'd2251799813685248;
parameter    ap_ST_fsm_state53 = 115'd4503599627370496;
parameter    ap_ST_fsm_state54 = 115'd9007199254740992;
parameter    ap_ST_fsm_state55 = 115'd18014398509481984;
parameter    ap_ST_fsm_state56 = 115'd36028797018963968;
parameter    ap_ST_fsm_state57 = 115'd72057594037927936;
parameter    ap_ST_fsm_state58 = 115'd144115188075855872;
parameter    ap_ST_fsm_state59 = 115'd288230376151711744;
parameter    ap_ST_fsm_state60 = 115'd576460752303423488;
parameter    ap_ST_fsm_state61 = 115'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 115'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 115'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 115'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 115'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 115'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 115'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 115'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 115'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 115'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 115'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 115'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 115'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 115'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 115'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 115'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 115'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 115'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 115'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 115'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 115'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 115'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 115'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 115'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 115'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 115'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 115'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 115'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 115'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 115'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 115'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 115'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 115'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 115'd9903520314283042199192993792;
parameter    ap_ST_fsm_pp0_stage0 = 115'd19807040628566084398385987584;
parameter    ap_ST_fsm_pp0_stage1 = 115'd39614081257132168796771975168;
parameter    ap_ST_fsm_pp0_stage2 = 115'd79228162514264337593543950336;
parameter    ap_ST_fsm_pp0_stage3 = 115'd158456325028528675187087900672;
parameter    ap_ST_fsm_pp0_stage4 = 115'd316912650057057350374175801344;
parameter    ap_ST_fsm_pp0_stage5 = 115'd633825300114114700748351602688;
parameter    ap_ST_fsm_pp0_stage6 = 115'd1267650600228229401496703205376;
parameter    ap_ST_fsm_pp0_stage7 = 115'd2535301200456458802993406410752;
parameter    ap_ST_fsm_pp0_stage8 = 115'd5070602400912917605986812821504;
parameter    ap_ST_fsm_pp0_stage9 = 115'd10141204801825835211973625643008;
parameter    ap_ST_fsm_pp0_stage10 = 115'd20282409603651670423947251286016;
parameter    ap_ST_fsm_pp0_stage11 = 115'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state160 = 115'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state161 = 115'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state162 = 115'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state163 = 115'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state164 = 115'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state165 = 115'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state166 = 115'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state167 = 115'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state168 = 115'd20769187434139310514121985316880384;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [114:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] b;
wire   [31:0] od;
wire   [31:0] ox;
wire   [31:0] oy;
wire   [31:0] id;
wire   [31:0] ix;
wire   [31:0] iy;
wire   [31:0] s;
wire   [31:0] k;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage8;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage8_flag00000000;
reg   [0:0] exitcond_flatten4_reg_2127;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten4_reg_2127;
wire   [0:0] tmp_17_fu_1320_p2;
reg    mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage3_flag00000000;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten4_reg_2127;
reg   [0:0] tmp_17_reg_2360;
wire    ap_CS_fsm_pp0_stage9;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage9_flag00000000;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten4_reg_2127;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_flag00000000;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state162;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state163;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state168;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state93;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [31:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg   [95:0] indvar_flatten4_reg_341;
reg   [30:0] i_d_reg_353;
reg   [63:0] indvar_flatten_reg_365;
reg   [31:0] i_y1_reg_377;
reg   [31:0] i_x1_reg_387;
reg   [31:0] iiy_reg_397;
reg   [31:0] iix_reg_409;
reg   [31:0] output_element_2_reg_420;
reg  signed [31:0] k_read_reg_1454;
reg  signed [31:0] s_read_reg_1473;
reg  signed [31:0] iy_read_reg_1486;
reg  signed [31:0] ix_read_reg_1492;
reg  signed [31:0] id_read_reg_1497;
reg  signed [31:0] oy_read_reg_1506;
reg  signed [31:0] ox_read_reg_1513;
reg  signed [31:0] od_read_reg_1520;
reg   [31:0] b_read_reg_1529;
reg   [29:0] tmp_2_reg_1534;
reg   [29:0] tmp_3_reg_1539;
wire   [63:0] grp_fu_489_p2;
reg   [63:0] bound1_reg_1554;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [95:0] grp_fu_501_p2;
reg   [95:0] bound2_reg_1571;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire  signed [31:0] grp_fu_519_p2;
reg  signed [31:0] tmp_reg_1587;
wire    ap_CS_fsm_state38;
wire  signed [31:0] grp_fu_523_p2;
reg  signed [31:0] tmp6_reg_1592;
wire   [0:0] p_mid_fu_531_p2;
reg   [0:0] p_mid_reg_1597;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_527_p2;
reg   [31:0] num_weights_reg_1603;
wire    ap_CS_fsm_state45;
wire   [31:0] tmp_7_fu_536_p1;
reg   [31:0] tmp_7_reg_1609;
wire   [31:0] tmp_8_fu_539_p1;
reg   [31:0] tmp_8_reg_1617;
wire   [31:0] tmp3_fu_542_p2;
reg   [31:0] tmp3_reg_1622;
wire   [127:0] grp_fu_513_p2;
reg   [127:0] bound3_reg_1627;
wire   [31:0] smax16_mid_fu_547_p3;
reg   [31:0] smax16_mid_reg_1632;
wire   [0:0] tmp_10_mid_fu_553_p2;
reg   [0:0] tmp_10_mid_reg_1638;
wire   [0:0] exitcond_flatten72_m_fu_558_p2;
reg   [0:0] exitcond_flatten72_m_reg_1644;
wire   [95:0] cast7_fu_563_p1;
reg   [95:0] cast7_reg_1649;
wire    ap_CS_fsm_state46;
wire   [0:0] exitcond_flatten3_fu_575_p2;
reg   [0:0] exitcond_flatten3_reg_1659;
wire   [127:0] grp_fu_580_p2;
reg   [127:0] indvar_flatten_next3_reg_1663;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_570_p2;
reg   [31:0] tmp_6_reg_1668;
wire    ap_CS_fsm_state52;
wire   [31:0] o_d_cast_mid1_fu_586_p1;
reg   [31:0] o_d_cast_mid1_reg_1674;
wire    ap_CS_fsm_state53;
wire  signed [31:0] tmp1_fu_590_p2;
reg  signed [31:0] tmp1_reg_1680;
wire   [31:0] o_y_cast_mid1_fu_603_p1;
reg   [31:0] o_y_cast_mid1_reg_1685;
wire    ap_CS_fsm_state55;
wire   [31:0] grp_fu_595_p2;
reg   [31:0] tmp2_reg_1691;
wire    ap_CS_fsm_state60;
wire   [31:0] tmp8_fu_612_p2;
reg   [31:0] tmp8_reg_1697;
wire    ap_CS_fsm_state61;
wire   [31:0] grp_fu_599_p2;
reg   [31:0] tmp_s_reg_1702;
wire   [31:0] grp_fu_607_p2;
reg   [31:0] i_y_reg_1707;
wire   [31:0] tmp7_fu_616_p2;
reg   [31:0] tmp7_reg_1712;
wire   [0:0] tmp_1_fu_624_p2;
reg   [0:0] tmp_1_reg_1717;
wire   [30:0] b_s_4_fu_629_p2;
reg   [30:0] b_s_4_reg_1722;
wire   [0:0] exitcond_flatten_fu_635_p2;
reg   [0:0] exitcond_flatten_reg_1728;
wire   [0:0] exitcond_flatten1_fu_640_p2;
reg   [0:0] exitcond_flatten1_reg_1746;
wire    ap_CS_fsm_state62;
wire   [30:0] o_d_mid_fu_648_p3;
reg   [30:0] o_d_mid_reg_1756;
wire   [30:0] tmp_5_mid2_v_fu_655_p3;
reg   [30:0] tmp_5_mid2_v_reg_1762;
wire   [0:0] exitcond_flatten72_m_1_fu_666_p3;
reg   [0:0] exitcond_flatten72_m_1_reg_1768;
wire   [0:0] tmp_5_fu_671_p2;
reg   [0:0] tmp_5_reg_1782;
wire    ap_CS_fsm_state63;
wire   [30:0] o_d_1_fu_682_p2;
reg   [30:0] o_d_1_reg_1787;
wire   [0:0] tmp_14_fu_687_p2;
reg   [0:0] tmp_14_reg_1793;
wire   [0:0] tmp_10_mid2_fu_691_p3;
reg   [0:0] tmp_10_mid2_reg_1806;
wire    ap_CS_fsm_state64;
wire   [31:0] tmp_13_fu_718_p2;
reg   [31:0] tmp_13_reg_1827;
wire   [31:0] o_d_cast_fu_724_p1;
reg   [31:0] o_d_cast_reg_1832;
wire   [31:0] indvars_iv14_mid_fu_727_p3;
reg   [31:0] indvars_iv14_mid_reg_1839;
wire   [31:0] indvars_iv12_mid1_fu_734_p3;
reg   [31:0] indvars_iv12_mid1_reg_1845;
wire   [30:0] o_d_mid2_fu_745_p3;
reg   [30:0] o_d_mid2_reg_1851;
wire   [31:0] indvars_iv17_mid_fu_761_p3;
reg   [31:0] indvars_iv17_mid_reg_1856;
wire    ap_CS_fsm_state65;
wire   [31:0] indvars_iv19_mid1_fu_768_p3;
reg   [31:0] indvars_iv19_mid1_reg_1862;
wire   [31:0] p_mid2_fu_774_p3;
reg   [31:0] p_mid2_reg_1867;
wire   [31:0] indvars_iv_next_fu_780_p2;
reg   [31:0] indvars_iv_next_reg_1872;
wire   [31:0] indvars_iv_next1_fu_784_p2;
reg   [31:0] indvars_iv_next1_reg_1879;
wire   [31:0] indvars_iv_next2_fu_795_p2;
reg   [31:0] indvars_iv_next2_reg_1886;
wire    ap_CS_fsm_state66;
wire   [31:0] indvars_iv21_mid2_fu_799_p3;
reg   [31:0] indvars_iv21_mid2_reg_1892;
wire   [31:0] indvars_iv19_mid2_fu_806_p3;
reg   [31:0] indvars_iv19_mid2_reg_1899;
wire   [0:0] p_mid3_fu_811_p2;
reg   [0:0] p_mid3_reg_1906;
wire   [31:0] indvars_iv14_mid2_fu_815_p3;
reg   [31:0] indvars_iv14_mid2_reg_1911;
wire   [31:0] indvars_iv12_mid2_fu_820_p3;
reg   [31:0] indvars_iv12_mid2_reg_1916;
wire   [31:0] indvars_iv24_mid2_fu_832_p3;
reg   [31:0] indvars_iv24_mid2_reg_1921;
wire    ap_CS_fsm_state67;
wire   [31:0] p_mid4_fu_844_p2;
reg   [31:0] p_mid4_reg_1927;
wire   [31:0] indvars_iv17_mid2_fu_849_p3;
reg   [31:0] indvars_iv17_mid2_reg_1932;
wire   [0:0] tmp_20_fu_854_p2;
reg   [0:0] tmp_20_reg_1937;
wire  signed [31:0] grp_fu_661_p2;
reg  signed [31:0] tmp_6_mid1_reg_1942;
wire    ap_CS_fsm_state68;
wire   [31:0] p_mid5_fu_858_p3;
reg   [31:0] p_mid5_reg_1948;
wire   [31:0] tmp_25_fu_868_p2;
reg   [31:0] tmp_25_reg_1953;
wire   [31:0] tmp14_mid1_fu_878_p2;
reg   [31:0] tmp14_mid1_reg_1958;
wire    ap_CS_fsm_state69;
wire  signed [31:0] tmp1_mid1_fu_882_p2;
reg  signed [31:0] tmp1_mid1_reg_1963;
wire   [31:0] grp_fu_706_p2;
reg   [31:0] tmp_5_mid2_reg_1978;
wire    ap_CS_fsm_state70;
wire   [31:0] tmp_9_mid2_fu_914_p2;
reg   [31:0] tmp_9_mid2_reg_1984;
wire   [31:0] grp_fu_740_p2;
reg   [31:0] tmp_mid1_reg_1989;
wire   [31:0] tmp_mid2_fu_929_p3;
reg   [31:0] tmp_mid2_reg_1994;
wire    ap_CS_fsm_state71;
wire   [30:0] o_y_mid_fu_935_p3;
reg   [30:0] o_y_mid_reg_2000;
wire    ap_CS_fsm_state75;
wire   [63:0] grp_fu_893_p2;
reg   [63:0] bound_reg_2006;
wire   [31:0] grp_fu_904_p2;
reg   [31:0] tmp2_mid_reg_2012;
wire    ap_CS_fsm_state76;
wire   [31:0] grp_fu_919_p2;
reg   [31:0] tmp2_mid1_reg_2018;
wire   [30:0] o_y_1_fu_942_p2;
reg   [30:0] o_y_1_reg_2024;
wire   [31:0] tmp12_mid2117_v_fu_971_p3;
reg   [31:0] tmp12_mid2117_v_reg_2035;
wire    ap_CS_fsm_state77;
wire   [31:0] o_y_cast_fu_977_p1;
wire   [31:0] tmp7_mid1_fu_985_p2;
reg   [31:0] tmp7_mid1_reg_2045;
wire   [30:0] o_y_mid2_fu_991_p3;
reg   [30:0] o_y_mid2_reg_2050;
wire  signed [31:0] tmp12_mid2_v_fu_996_p3;
reg  signed [31:0] tmp12_mid2_v_reg_2055;
wire    ap_CS_fsm_state78;
wire   [31:0] grp_fu_980_p2;
reg   [31:0] i_y_mid1_reg_2060;
wire    ap_CS_fsm_state83;
wire   [31:0] i_y_mid2_fu_1011_p3;
reg   [31:0] i_y_mid2_reg_2065;
wire    ap_CS_fsm_state84;
wire   [31:0] grp_fu_1001_p2;
reg   [31:0] tmp12_mid2_reg_2072;
wire    ap_CS_fsm_state85;
wire   [30:0] o_x_cast_mid2_fu_1024_p3;
reg   [30:0] o_x_cast_mid2_reg_2077;
reg    ap_sig_ioackin_mem_ARREADY;
wire   [31:0] o_x_cast_mid2_cast_fu_1037_p1;
reg   [31:0] o_x_cast_mid2_cast_reg_2088;
wire    ap_CS_fsm_state87;
reg   [31:0] output_element_reg_2094;
wire   [31:0] grp_fu_1040_p2;
reg   [31:0] i_x_reg_2099;
wire   [31:0] tmp_4_fu_1045_p2;
reg   [31:0] tmp_4_reg_2107;
wire    ap_CS_fsm_state94;
wire   [95:0] grp_fu_950_p2;
reg   [95:0] bound4_reg_2112;
wire   [31:0] i_d_cast_mid1_fu_1049_p1;
reg   [31:0] i_d_cast_mid1_reg_2117;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state95_pp0_stage0_iter0;
wire    ap_block_state107_pp0_stage0_iter1;
wire    ap_block_state119_pp0_stage0_iter2;
wire    ap_block_state131_pp0_stage0_iter3;
wire    ap_block_state143_pp0_stage0_iter4;
wire    ap_block_state155_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_flag00011001;
wire  signed [31:0] tmp4_fu_1053_p2;
reg  signed [31:0] tmp4_reg_2122;
wire   [0:0] exitcond_flatten4_fu_1058_p2;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten4_reg_2127;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten4_reg_2127;
wire   [30:0] i_d_s_fu_1069_p2;
reg   [30:0] i_d_s_reg_2131;
wire   [0:0] exitcond_flatten2_fu_1075_p2;
reg   [0:0] exitcond_flatten2_reg_2137;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten2_reg_2137;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten2_reg_2137;
wire  signed [31:0] tmp9_fu_1090_p2;
reg  signed [31:0] tmp9_reg_2152;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state96_pp0_stage1_iter0;
wire    ap_block_state108_pp0_stage1_iter1;
wire    ap_block_state120_pp0_stage1_iter2;
wire    ap_block_state132_pp0_stage1_iter3;
wire    ap_block_state144_pp0_stage1_iter4;
wire    ap_block_state156_pp0_stage1_iter5;
wire    ap_block_pp0_stage1_flag00011001;
wire   [95:0] grp_fu_1063_p2;
reg   [95:0] indvar_flatten_next4_reg_2157;
reg    ap_enable_reg_pp0_iter0;
wire  signed [31:0] tmp4_mid1_fu_1097_p2;
reg  signed [31:0] tmp4_mid1_reg_2162;
wire  signed [31:0] tmp9_mid1_fu_1102_p2;
reg  signed [31:0] tmp9_mid1_reg_2167;
wire   [30:0] i_d_mid2_fu_1107_p3;
reg   [30:0] i_d_mid2_reg_2172;
wire   [63:0] grp_fu_1080_p2;
reg   [63:0] indvar_flatten_op_reg_2177;
wire   [63:0] indvar_flatten_next_fu_1117_p3;
reg   [63:0] indvar_flatten_next_reg_2182;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state97_pp0_stage2_iter0;
wire    ap_block_state109_pp0_stage2_iter1;
wire    ap_block_state121_pp0_stage2_iter2;
wire    ap_block_state133_pp0_stage2_iter3;
wire    ap_block_state145_pp0_stage2_iter4;
wire    ap_block_state157_pp0_stage2_iter5;
wire    ap_block_pp0_stage2_flag00011001;
wire   [31:0] grp_fu_1086_p2;
reg   [31:0] tmp5_reg_2187;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state102_pp0_stage7_iter0;
wire    ap_block_state114_pp0_stage7_iter1;
wire    ap_block_state126_pp0_stage7_iter2;
wire    ap_block_state138_pp0_stage7_iter3;
wire    ap_block_state150_pp0_stage7_iter4;
wire    ap_block_pp0_stage7_flag00011001;
wire   [31:0] i_y1_mid_fu_1131_p3;
reg   [31:0] i_y1_mid_reg_2193;
wire   [0:0] tmp_26_fu_1137_p2;
reg   [0:0] tmp_26_reg_2199;
wire   [31:0] grp_fu_1113_p2;
reg   [31:0] tmp5_mid1_reg_2204;
wire    ap_block_state103_pp0_stage8_iter0;
wire    ap_block_state115_pp0_stage8_iter1;
wire    ap_block_state127_pp0_stage8_iter2;
reg    ap_predicate_op620_readreq_state127;
reg    ap_block_state127_io;
wire    ap_block_state139_pp0_stage8_iter3;
wire    ap_block_state151_pp0_stage8_iter4;
reg    ap_block_pp0_stage8_flag00011001;
wire   [0:0] tmp_15_mid_fu_1142_p3;
reg   [0:0] tmp_15_mid_reg_2210;
reg   [0:0] ap_reg_pp0_iter1_tmp_15_mid_reg_2210;
wire   [31:0] i_y_1_fu_1147_p2;
reg   [31:0] i_y_1_reg_2220;
wire   [31:0] grp_fu_1123_p2;
reg   [31:0] tmp10_reg_2226;
wire    ap_block_state104_pp0_stage9_iter0;
wire    ap_block_state116_pp0_stage9_iter1;
reg    ap_block_state116_io;
wire    ap_block_state128_pp0_stage9_iter2;
wire    ap_block_state140_pp0_stage9_iter3;
wire    ap_block_state152_pp0_stage9_iter4;
reg    ap_block_pp0_stage9_flag00011001;
wire   [31:0] iiy_mid_fu_1152_p3;
reg   [31:0] iiy_mid_reg_2232;
wire   [31:0] tmp3_mid_fu_1170_p2;
reg   [31:0] tmp3_mid_reg_2238;
wire   [31:0] tmp12_fu_1174_p2;
reg   [31:0] tmp12_reg_2243;
wire   [31:0] i_x1_mid2_fu_1179_p3;
reg   [31:0] i_x1_mid2_reg_2248;
wire   [31:0] tmp3_mid1_fu_1185_p2;
reg   [31:0] tmp3_mid1_reg_2254;
wire   [31:0] i_y1_mid2_fu_1190_p3;
reg   [31:0] i_y1_mid2_reg_2259;
wire   [31:0] grp_fu_1127_p2;
reg   [31:0] tmp10_mid1_reg_2264;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state105_pp0_stage10_iter0;
wire    ap_block_state117_pp0_stage10_iter1;
wire    ap_block_state129_pp0_stage10_iter2;
wire    ap_block_state141_pp0_stage10_iter3;
wire    ap_block_state153_pp0_stage10_iter4;
wire    ap_block_pp0_stage10_flag00011001;
wire   [31:0] iiy_1_fu_1200_p2;
reg   [31:0] iiy_1_reg_2270;
wire  signed [31:0] tmp6_mid2_v_fu_1205_p3;
reg  signed [31:0] tmp6_mid2_v_reg_2276;
wire   [31:0] tmp13_fu_1216_p2;
reg   [31:0] tmp13_reg_2281;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state106_pp0_stage11_iter0;
wire    ap_block_state118_pp0_stage11_iter1;
wire    ap_block_state130_pp0_stage11_iter2;
wire    ap_block_state142_pp0_stage11_iter3;
wire    ap_block_state154_pp0_stage11_iter4;
wire    ap_block_pp0_stage11_flag00011001;
wire   [31:0] tmp8_mid1_fu_1225_p2;
reg   [31:0] tmp8_mid1_reg_2286;
wire   [31:0] iiy_mid2_fu_1230_p3;
reg   [31:0] iiy_mid2_reg_2291;
wire  signed [31:0] tmp11_mid2_v_fu_1240_p3;
reg  signed [31:0] tmp11_mid2_v_reg_2296;
wire   [31:0] grp_fu_1221_p2;
reg   [31:0] tmp6_mid2_reg_2301;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state100_pp0_stage5_iter0;
wire    ap_block_state112_pp0_stage5_iter1;
wire    ap_block_state124_pp0_stage5_iter2;
wire    ap_block_state136_pp0_stage5_iter3;
wire    ap_block_state148_pp0_stage5_iter4;
wire    ap_block_pp0_stage5_flag00011001;
wire   [31:0] tmp14_fu_1250_p2;
reg   [31:0] tmp14_reg_2306;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state101_pp0_stage6_iter0;
wire    ap_block_state113_pp0_stage6_iter1;
wire    ap_block_state125_pp0_stage6_iter2;
wire    ap_block_state137_pp0_stage6_iter3;
wire    ap_block_state149_pp0_stage6_iter4;
wire    ap_block_pp0_stage6_flag00011001;
wire   [31:0] i_x_1_fu_1254_p2;
reg   [31:0] i_x_1_reg_2311;
wire   [31:0] tmp15_fu_1259_p2;
reg   [31:0] tmp15_reg_2316;
wire   [31:0] tmp_11_fu_1263_p2;
reg   [31:0] tmp_11_reg_2321;
wire   [31:0] grp_fu_1246_p2;
reg   [31:0] tmp11_mid2_reg_2332;
reg   [31:0] input_element_reg_2337;
wire    ap_block_state99_pp0_stage4_iter0;
wire    ap_block_state111_pp0_stage4_iter1;
reg    ap_block_state123_pp0_stage4_iter2;
wire    ap_block_state135_pp0_stage4_iter3;
wire    ap_block_state147_pp0_stage4_iter4;
wire    ap_block_state159_pp0_stage4_iter5;
reg    ap_block_pp0_stage4_flag00011001;
reg   [31:0] ap_reg_pp0_iter3_input_element_reg_2337;
wire   [31:0] iix_mid2_fu_1280_p3;
reg   [31:0] iix_mid2_reg_2344;
wire   [0:0] notlhs_fu_1304_p2;
reg   [0:0] notlhs_reg_2350;
wire   [0:0] notrhs_fu_1310_p2;
reg   [0:0] notrhs_reg_2355;
reg   [0:0] ap_reg_pp0_iter3_tmp_17_reg_2360;
reg   [0:0] ap_reg_pp0_iter4_tmp_17_reg_2360;
wire   [31:0] iix_1_fu_1342_p2;
reg   [31:0] iix_1_reg_2370;
reg   [31:0] weight_element_reg_2375;
wire    ap_block_state98_pp0_stage3_iter0;
wire    ap_block_state110_pp0_stage3_iter1;
wire    ap_block_state122_pp0_stage3_iter2;
reg    ap_predicate_op628_read_state134;
reg    ap_block_state134_pp0_stage3_iter3;
wire    ap_block_state146_pp0_stage3_iter4;
wire    ap_block_state158_pp0_stage3_iter5;
reg    ap_block_pp0_stage3_flag00011001;
wire   [0:0] notlhs1_fu_1364_p2;
reg   [0:0] notlhs1_reg_2382;
wire   [0:0] notrhs1_fu_1370_p2;
reg   [0:0] notrhs1_reg_2387;
wire   [0:0] grp_fu_456_p2;
reg   [0:0] tmp_22_reg_2392;
wire   [0:0] tmp_23_fu_1380_p2;
reg   [0:0] tmp_23_reg_2397;
reg   [0:0] ap_reg_pp0_iter4_tmp_23_reg_2397;
wire   [31:0] grp_fu_452_p2;
reg   [31:0] tmp_24_reg_2401;
wire   [31:0] tmp11_fu_1385_p2;
reg   [31:0] tmp11_reg_2406;
wire    ap_CS_fsm_state160;
wire   [30:0] o_x_op_fu_1389_p2;
reg   [30:0] o_x_op_reg_2411;
wire   [31:0] indvars_iv_next3_fu_1395_p2;
reg   [31:0] indvars_iv_next3_reg_2416;
wire   [31:0] indvars_iv_next4_fu_1399_p2;
reg   [31:0] indvars_iv_next4_reg_2421;
wire   [31:0] indvars_iv_next5_fu_1403_p2;
reg   [31:0] indvars_iv_next5_reg_2426;
wire   [31:0] tmp_9_fu_1419_p2;
reg   [31:0] tmp_9_reg_2431;
wire    ap_CS_fsm_state161;
wire   [30:0] o_x_1_fu_1429_p3;
reg   [30:0] o_x_1_reg_2436;
wire   [63:0] grp_fu_1407_p2;
reg   [63:0] indvar_flatten70_op_reg_2441;
wire   [95:0] grp_fu_1413_p2;
reg   [95:0] indvar_flatten123_op_reg_2446;
reg    ap_sig_ioackin_mem_AWREADY;
wire   [63:0] indvar_flatten_next1_fu_1442_p3;
reg   [63:0] indvar_flatten_next1_reg_2456;
wire   [95:0] indvar_flatten_next2_fu_1448_p3;
reg   [95:0] indvar_flatten_next2_reg_2461;
wire    ap_block_pp0_stage11_flag00011011;
reg    ap_block_pp0_stage4_flag00011011;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter4_state147;
reg    ap_enable_reg_pp0_iter5;
reg   [127:0] indvar_flatten1_reg_189;
reg   [30:0] b_s_reg_201;
reg   [30:0] o_d_reg_213;
reg   [30:0] o_y_reg_225;
reg   [95:0] indvar_flatten2_reg_237;
reg   [63:0] indvar_flatten3_reg_249;
reg   [31:0] indvars_iv_reg_261;
reg   [31:0] indvars_iv1_reg_273;
reg   [31:0] indvars_iv2_reg_285;
reg   [31:0] indvars_iv3_reg_295;
reg   [31:0] indvars_iv4_reg_307;
reg   [31:0] indvars_iv5_reg_319;
reg   [30:0] o_x_reg_329;
reg   [95:0] indvar_flatten4_phi_fu_345_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [30:0] i_d_phi_fu_357_p4;
reg   [63:0] indvar_flatten_phi_fu_369_p4;
reg   [31:0] i_y1_phi_fu_380_p4;
wire    ap_block_pp0_stage7_flag00000000;
reg   [31:0] i_x1_phi_fu_390_p4;
reg   [31:0] iiy_phi_fu_401_p4;
reg   [31:0] iix_phi_fu_413_p4;
reg   [31:0] output_element_2_phi_fu_424_p4;
reg   [31:0] output_element_4_phi_fu_435_p6;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431;
reg   [31:0] ap_phi_precharge_reg_pp0_iter5_output_element_4_reg_431;
wire   [31:0] ap_phi_precharge_reg_pp0_iter3_output_element_4_reg_431;
wire   [31:0] tmp_18_fu_1330_p2;
reg    ap_reg_ioackin_mem_ARREADY;
wire    ap_block_pp0_stage9_flag00001001;
wire    ap_block_pp0_stage8_flag00001001;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
reg   [31:0] grp_fu_456_p0;
wire    ap_block_pp0_stage5_flag00000000;
wire  signed [31:0] cast1_fu_481_p0;
wire  signed [31:0] cast2_fu_485_p0;
wire   [31:0] grp_fu_489_p0;
wire   [31:0] grp_fu_489_p1;
wire   [63:0] grp_fu_501_p0;
wire   [31:0] grp_fu_501_p1;
wire   [95:0] grp_fu_513_p0;
wire   [31:0] grp_fu_513_p1;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state39;
wire   [30:0] grp_fu_570_p1;
wire    ap_CS_fsm_state54;
wire   [30:0] grp_fu_599_p1;
wire   [30:0] grp_fu_607_p1;
wire   [31:0] o_x_cast_fu_620_p1;
wire   [30:0] grp_fu_661_p1;
wire   [0:0] tmp_10_mid1_fu_677_p3;
wire   [30:0] grp_fu_706_p1;
wire   [31:0] smax_fu_711_p3;
wire   [31:0] indvars_iv12_mid_fu_697_p3;
wire   [30:0] grp_fu_740_p1;
wire   [31:0] indvars_iv19_mid_fu_750_p3;
wire   [31:0] p_mid1_fu_756_p3;
wire   [31:0] indvars_iv21_mid_fu_788_p3;
wire   [31:0] indvars_iv24_mid_fu_825_p3;
wire   [31:0] smax16_mid1_fu_839_p3;
wire   [31:0] smax1_fu_863_p3;
wire   [31:0] tmp_6_mid2_fu_873_p3;
wire   [31:0] grp_fu_893_p0;
wire   [31:0] grp_fu_893_p1;
wire   [31:0] tmp_9_mid2155_v_fu_899_p3;
wire   [31:0] tmp_9_mid2_v_fu_908_p3;
wire   [31:0] tmp_mid_fu_923_p3;
wire   [63:0] grp_fu_950_p0;
wire   [31:0] grp_fu_950_p1;
wire   [31:0] tmp2_mid3_fu_955_p3;
wire   [31:0] tmp12_mid2187_v_fu_960_p3;
wire   [30:0] grp_fu_980_p1;
wire   [31:0] tmp2_mid2_fu_965_p3;
wire    ap_CS_fsm_state79;
wire   [31:0] i_y_mid_fu_1005_p3;
wire   [30:0] o_x_cast_mid_fu_1017_p3;
wire   [30:0] grp_fu_1040_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire   [31:0] i_d_cast_fu_1094_p1;
wire    ap_block_pp0_stage2_flag00000000;
wire   [31:0] i_x1_mid_fu_1159_p3;
wire   [31:0] tmp5_mid2_fu_1165_p3;
wire    ap_block_pp0_stage10_flag00000000;
wire   [31:0] tmp6_mid241_v_fu_1195_p3;
wire    ap_block_pp0_stage11_flag00000000;
wire   [31:0] tmp10_mid2_fu_1211_p3;
wire   [31:0] tmp11_mid245_v_fu_1235_p3;
wire    ap_block_pp0_stage6_flag00000000;
wire   [31:0] iix_mid_fu_1273_p3;
wire   [31:0] input_element_to_int_fu_1287_p1;
wire   [7:0] tmp_12_fu_1290_p4;
wire   [22:0] tmp_27_fu_1300_p1;
wire   [0:0] tmp_15_fu_1316_p2;
wire   [31:0] tmp20_fu_1326_p2;
wire   [31:0] weight_element_to_in_fu_1347_p1;
wire   [7:0] tmp_19_fu_1350_p4;
wire   [22:0] tmp_28_fu_1360_p1;
wire   [0:0] tmp_21_fu_1376_p2;
wire   [30:0] o_x_mid293_op_fu_1423_p3;
reg    grp_fu_446_ce;
reg    grp_fu_452_ce;
reg    grp_fu_456_ce;
reg    ap_predicate_op629_fcmp_state135;
reg    ap_predicate_op637_fcmp_state138;
wire    ap_block_pp0_stage5_flag00000001;
reg    ap_block_pp0_stage4_flag00000001;
reg    grp_fu_950_ce;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
reg    grp_fu_1040_ce;
reg    grp_fu_1063_ce;
reg    grp_fu_1080_ce;
reg    grp_fu_1086_ce;
reg    grp_fu_1113_ce;
reg    grp_fu_1123_ce;
reg    grp_fu_1127_ce;
reg    grp_fu_1221_ce;
reg    grp_fu_1246_ce;
reg   [114:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_flag00011011;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_pp0_stage2_flag00011011;
reg    ap_block_pp0_stage3_flag00011011;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_block_pp0_stage7_flag00011011;
reg    ap_block_pp0_stage8_flag00011011;
reg    ap_block_pp0_stage9_flag00011011;
wire    ap_block_pp0_stage10_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_1040_p10;
wire   [63:0] grp_fu_489_p00;
wire   [63:0] grp_fu_489_p10;
wire   [95:0] grp_fu_501_p00;
wire   [95:0] grp_fu_501_p10;
wire   [127:0] grp_fu_513_p00;
wire   [127:0] grp_fu_513_p10;
wire   [31:0] grp_fu_570_p10;
wire   [31:0] grp_fu_607_p10;
wire   [31:0] grp_fu_661_p10;
wire   [31:0] grp_fu_706_p10;
wire   [31:0] grp_fu_740_p10;
wire   [63:0] grp_fu_893_p00;
wire   [63:0] grp_fu_893_p10;
wire   [95:0] grp_fu_950_p00;
reg    ap_condition_1366;
reg    ap_condition_1376;

// power-on initialization
initial begin
#0 ap_CS_fsm = 115'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

conv_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
conv_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .b(b),
    .od(od),
    .ox(ox),
    .oy(oy),
    .id(id),
    .ix(ix),
    .iy(iy),
    .s(s),
    .k(k)
);

conv_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
conv_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(tmp_9_reg_2431),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(output_element_2_reg_420),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

conv_layer_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fadd_3bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(output_element_2_phi_fu_424_p4),
    .din1(tmp_24_reg_2401),
    .ce(grp_fu_446_ce),
    .dout(grp_fu_446_p2)
);

conv_layer_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_fmul_3cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_reg_pp0_iter3_input_element_reg_2337),
    .din1(weight_element_reg_2375),
    .ce(grp_fu_452_ce),
    .dout(grp_fu_452_p2)
);

conv_layer_fcmp_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_layer_fcmp_3dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_456_p0),
    .din1(32'd0),
    .ce(grp_fu_456_ce),
    .opcode(5'd1),
    .dout(grp_fu_456_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
conv_layer_mul_32eOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_489_p0),
    .din1(grp_fu_489_p1),
    .ce(1'b1),
    .dout(grp_fu_489_p2)
);

conv_layer_mul_64fYi #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
conv_layer_mul_64fYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_501_p0),
    .din1(grp_fu_501_p1),
    .ce(1'b1),
    .dout(grp_fu_501_p2)
);

conv_layer_mul_96g8j #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 128 ))
conv_layer_mul_96g8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_513_p0),
    .din1(grp_fu_513_p1),
    .ce(1'b1),
    .dout(grp_fu_513_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(od_read_reg_1520),
    .din1(k_read_reg_1454),
    .ce(1'b1),
    .dout(grp_fu_519_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(id_read_reg_1497),
    .din1(k_read_reg_1454),
    .ce(1'b1),
    .dout(grp_fu_523_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp6_reg_1592),
    .din1(tmp_reg_1587),
    .ce(1'b1),
    .dout(grp_fu_527_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(od_read_reg_1520),
    .din1(grp_fu_570_p1),
    .ce(1'b1),
    .dout(grp_fu_570_p2)
);

conv_layer_add_12jbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 128 ),
    .din1_WIDTH( 128 ),
    .dout_WIDTH( 128 ))
conv_layer_add_12jbC_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten1_reg_189),
    .din1(128'd1),
    .ce(1'b1),
    .dout(grp_fu_580_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(oy_read_reg_1506),
    .din1(tmp1_reg_1680),
    .ce(1'b1),
    .dout(grp_fu_595_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(id_read_reg_1497),
    .din1(grp_fu_599_p1),
    .ce(1'b1),
    .dout(grp_fu_599_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(s_read_reg_1473),
    .din1(grp_fu_607_p1),
    .ce(1'b1),
    .dout(grp_fu_607_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(od_read_reg_1520),
    .din1(grp_fu_661_p1),
    .ce(1'b1),
    .dout(grp_fu_661_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(id_read_reg_1497),
    .din1(grp_fu_706_p1),
    .ce(1'b1),
    .dout(grp_fu_706_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(id_read_reg_1497),
    .din1(grp_fu_740_p1),
    .ce(1'b1),
    .dout(grp_fu_740_p2)
);

conv_layer_mul_32eOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
conv_layer_mul_32eOg_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_893_p0),
    .din1(grp_fu_893_p1),
    .ce(1'b1),
    .dout(grp_fu_893_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(oy_read_reg_1506),
    .din1(tmp_6_mid1_reg_1942),
    .ce(1'b1),
    .dout(grp_fu_904_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(oy_read_reg_1506),
    .din1(tmp1_mid1_reg_1963),
    .ce(1'b1),
    .dout(grp_fu_919_p2)
);

conv_layer_mul_64fYi #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 96 ))
conv_layer_mul_64fYi_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_950_p0),
    .din1(grp_fu_950_p1),
    .ce(grp_fu_950_ce),
    .dout(grp_fu_950_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(s_read_reg_1473),
    .din1(grp_fu_980_p1),
    .ce(1'b1),
    .dout(grp_fu_980_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ox_read_reg_1513),
    .din1(tmp12_mid2_v_reg_2055),
    .ce(1'b1),
    .dout(grp_fu_1001_p2)
);

conv_layer_mul_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32ibs_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(s_read_reg_1473),
    .din1(grp_fu_1040_p1),
    .ce(grp_fu_1040_ce),
    .dout(grp_fu_1040_p2)
);

conv_layer_add_96kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 96 ))
conv_layer_add_96kbM_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten4_phi_fu_345_p4),
    .din1(96'd1),
    .ce(grp_fu_1063_ce),
    .dout(grp_fu_1063_p2)
);

conv_layer_add_64lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
conv_layer_add_64lbW_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten_phi_fu_369_p4),
    .din1(64'd1),
    .ce(grp_fu_1080_ce),
    .dout(grp_fu_1080_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp4_reg_2122),
    .din1(iy_read_reg_1486),
    .ce(grp_fu_1086_ce),
    .dout(grp_fu_1086_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(iy_read_reg_1486),
    .din1(tmp4_mid1_reg_2162),
    .ce(grp_fu_1113_ce),
    .dout(grp_fu_1113_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp9_reg_2152),
    .din1(k_read_reg_1454),
    .ce(grp_fu_1123_ce),
    .dout(grp_fu_1123_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(k_read_reg_1454),
    .din1(tmp9_mid1_reg_2167),
    .ce(grp_fu_1127_ce),
    .dout(grp_fu_1127_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ix_read_reg_1492),
    .din1(tmp6_mid2_v_reg_2276),
    .ce(grp_fu_1221_ce),
    .dout(grp_fu_1221_p2)
);

conv_layer_mul_32hbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_layer_mul_32hbi_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(k_read_reg_1454),
    .din1(tmp11_mid2_v_reg_2296),
    .ce(grp_fu_1246_ce),
    .dout(grp_fu_1246_p2)
);

conv_layer_add_64lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
conv_layer_add_64lbW_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten3_reg_249),
    .din1(64'd1),
    .ce(1'b1),
    .dout(grp_fu_1407_p2)
);

conv_layer_add_96kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 96 ),
    .dout_WIDTH( 96 ))
conv_layer_add_96kbM_U33(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten2_reg_237),
    .din1(96'd1),
    .ce(1'b1),
    .dout(grp_fu_1413_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0) & (exitcond_flatten4_reg_2127 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state94)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state94) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter4_state147)))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter4_state147) & (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state94)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state86) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_predicate_op620_readreq_state127) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state86) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == mem_ARREADY) & (ap_block_pp0_stage9_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_predicate_op620_readreq_state127) & (1'b1 == mem_ARREADY) & (ap_block_pp0_stage8_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state162)) begin
            if ((ap_sig_ioackin_mem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b0;
            end else if ((1'b1 == mem_AWREADY)) begin
                ap_reg_ioackin_mem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state163)) begin
            if ((ap_sig_ioackin_mem_WREADY == 1'b1)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b0;
            end else if ((1'b1 == mem_WREADY)) begin
                ap_reg_ioackin_mem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten4_reg_2127) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd1 == ap_reg_pp0_iter3_tmp_17_reg_2360)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten4_reg_2127) & (1'd0 == ap_reg_pp0_iter3_tmp_17_reg_2360) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd1 == tmp_23_reg_2397)))) begin
        ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431 <= output_element_2_reg_420;
    end else if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431 <= ap_phi_precharge_reg_pp0_iter3_output_element_4_reg_431;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        b_s_reg_201 <= tmp_5_mid2_v_reg_1762;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        b_s_reg_201 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten4_reg_2127 == 1'd0))) begin
        i_d_reg_353 <= i_d_mid2_reg_2172;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        i_d_reg_353 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        i_x1_reg_387 <= i_x_1_reg_2311;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        i_x1_reg_387 <= i_x_reg_2099;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        i_y1_reg_377 <= i_y1_mid2_reg_2259;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        i_y1_reg_377 <= i_y_mid2_reg_2065;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        iix_reg_409 <= iix_1_reg_2370;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        iix_reg_409 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (ap_block_pp0_stage9_flag00011001 == 1'b0))) begin
        iiy_reg_397 <= iiy_mid2_reg_2291;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        iiy_reg_397 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvar_flatten1_reg_189 <= indvar_flatten_next3_reg_1663;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten1_reg_189 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvar_flatten2_reg_237 <= indvar_flatten_next2_reg_2461;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten2_reg_237 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvar_flatten3_reg_249 <= indvar_flatten_next1_reg_2456;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvar_flatten3_reg_249 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten4_reg_2127 == 1'd0))) begin
        indvar_flatten4_reg_341 <= indvar_flatten_next4_reg_2157;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        indvar_flatten4_reg_341 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten4_reg_2127 == 1'd0))) begin
        indvar_flatten_reg_365 <= indvar_flatten_next_reg_2182;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        indvar_flatten_reg_365 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvars_iv1_reg_273 <= indvars_iv14_mid2_reg_1911;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv1_reg_273 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvars_iv2_reg_285 <= indvars_iv12_mid2_reg_1916;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv2_reg_285 <= k_read_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvars_iv3_reg_295 <= indvars_iv_next5_reg_2426;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv3_reg_295 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvars_iv4_reg_307 <= indvars_iv_next4_reg_2421;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv4_reg_307 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvars_iv5_reg_319 <= indvars_iv_next3_reg_2416;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv5_reg_319 <= k_read_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        indvars_iv_reg_261 <= indvars_iv17_mid2_reg_1932;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv_reg_261 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        o_d_reg_213 <= o_d_mid2_reg_1851;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        o_d_reg_213 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        o_x_reg_329 <= o_x_1_reg_2436;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        o_x_reg_329 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        o_y_reg_225 <= o_y_mid2_reg_2050;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        o_y_reg_225 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten4_reg_2127))) begin
        output_element_2_reg_420 <= output_element_4_phi_fu_435_p6;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        output_element_2_reg_420 <= output_element_reg_2094;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        ap_phi_precharge_reg_pp0_iter5_output_element_4_reg_431 <= ap_phi_precharge_reg_pp0_iter4_output_element_4_reg_431;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten2_reg_2137 <= exitcond_flatten2_reg_2137;
        ap_reg_pp0_iter1_exitcond_flatten4_reg_2127 <= exitcond_flatten4_reg_2127;
        ap_reg_pp0_iter2_exitcond_flatten2_reg_2137 <= ap_reg_pp0_iter1_exitcond_flatten2_reg_2137;
        ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter1_exitcond_flatten4_reg_2127;
        ap_reg_pp0_iter3_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter2_exitcond_flatten4_reg_2127;
        ap_reg_pp0_iter4_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter3_exitcond_flatten4_reg_2127;
        ap_reg_pp0_iter5_exitcond_flatten4_reg_2127 <= ap_reg_pp0_iter4_exitcond_flatten4_reg_2127;
        exitcond_flatten4_reg_2127 <= exitcond_flatten4_fu_1058_p2;
        i_d_cast_mid1_reg_2117[30 : 0] <= i_d_cast_mid1_fu_1049_p1[30 : 0];
        tmp4_reg_2122 <= tmp4_fu_1053_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_15_mid_reg_2210 <= tmp_15_mid_reg_2210;
        ap_reg_pp0_iter3_tmp_17_reg_2360 <= tmp_17_reg_2360;
        ap_reg_pp0_iter4_tmp_17_reg_2360 <= ap_reg_pp0_iter3_tmp_17_reg_2360;
        ap_reg_pp0_iter4_tmp_23_reg_2397 <= tmp_23_reg_2397;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter3_input_element_reg_2337 <= input_element_reg_2337;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_read_reg_1529 <= b;
        id_read_reg_1497 <= id;
        ix_read_reg_1492 <= ix;
        iy_read_reg_1486 <= iy;
        k_read_reg_1454 <= k;
        od_read_reg_1520 <= od;
        ox_read_reg_1513 <= ox;
        oy_read_reg_1506 <= oy;
        s_read_reg_1473 <= s;
        tmp_2_reg_1534 <= {{input_offset[31:2]}};
        tmp_3_reg_1539 <= {{output_offset[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state61) & (1'd0 == exitcond_flatten3_reg_1659))) begin
        b_s_4_reg_1722 <= b_s_4_fu_629_p2;
        exitcond_flatten1_reg_1746 <= exitcond_flatten1_fu_640_p2;
        exitcond_flatten_reg_1728 <= exitcond_flatten_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bound1_reg_1554 <= grp_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        bound2_reg_1571 <= grp_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        bound3_reg_1627 <= grp_fu_513_p2;
        cast7_reg_1649[31 : 0] <= cast7_fu_563_p1[31 : 0];
        exitcond_flatten72_m_reg_1644 <= exitcond_flatten72_m_fu_558_p2;
        num_weights_reg_1603 <= grp_fu_527_p2;
        smax16_mid_reg_1632 <= smax16_mid_fu_547_p3;
        tmp3_reg_1622 <= tmp3_fu_542_p2;
        tmp_10_mid_reg_1638 <= tmp_10_mid_fu_553_p2;
        tmp_7_reg_1609[29 : 0] <= tmp_7_fu_536_p1[29 : 0];
        tmp_8_reg_1617[29 : 0] <= tmp_8_fu_539_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        bound4_reg_2112 <= grp_fu_950_p2;
        tmp_4_reg_2107 <= tmp_4_fu_1045_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        bound_reg_2006 <= grp_fu_893_p2;
        o_y_mid_reg_2000 <= o_y_mid_fu_935_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten4_fu_1058_p2))) begin
        exitcond_flatten2_reg_2137 <= exitcond_flatten2_fu_1075_p2;
        i_d_s_reg_2131 <= i_d_s_fu_1069_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        exitcond_flatten3_reg_1659 <= exitcond_flatten3_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        exitcond_flatten72_m_1_reg_1768 <= exitcond_flatten72_m_1_fu_666_p3;
        o_d_mid_reg_1756 <= o_d_mid_fu_648_p3;
        tmp_5_mid2_v_reg_1762 <= tmp_5_mid2_v_fu_655_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten4_reg_2127 == 1'd0))) begin
        i_d_mid2_reg_2172 <= i_d_mid2_fu_1107_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage9_flag00011001 == 1'b0))) begin
        i_x1_mid2_reg_2248 <= i_x1_mid2_fu_1179_p3;
        iiy_mid_reg_2232 <= iiy_mid_fu_1152_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0))) begin
        i_x_1_reg_2311 <= i_x_1_fu_1254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state93) & (mem_RVALID == 1'b1))) begin
        i_x_reg_2099 <= grp_fu_1040_p2;
        output_element_reg_2094 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage9_flag00011001 == 1'b0))) begin
        i_y1_mid2_reg_2259 <= i_y1_mid2_fu_1190_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        i_y1_mid_reg_2193 <= i_y1_mid_fu_1131_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        i_y_1_reg_2220 <= i_y_1_fu_1147_p2;
        tmp5_mid1_reg_2204 <= grp_fu_1113_p2;
        tmp_15_mid_reg_2210 <= tmp_15_mid_fu_1142_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_10_mid2_reg_1806) & (1'b1 == ap_CS_fsm_state83))) begin
        i_y_mid1_reg_2060 <= grp_fu_980_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        i_y_mid2_reg_2065 <= i_y_mid2_fu_1011_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        i_y_reg_1707 <= grp_fu_607_p2;
        tmp7_reg_1712 <= tmp7_fu_616_p2;
        tmp8_reg_1697 <= tmp8_fu_612_p2;
        tmp_1_reg_1717 <= tmp_1_fu_624_p2;
        tmp_s_reg_1702 <= grp_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        iix_1_reg_2370 <= iix_1_fu_1342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        iix_mid2_reg_2344 <= iix_mid2_fu_1280_p3;
        notlhs_reg_2350 <= notlhs_fu_1304_p2;
        notrhs_reg_2355 <= notrhs_fu_1310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0))) begin
        iiy_1_reg_2270 <= iiy_1_fu_1200_p2;
        tmp10_mid1_reg_2264 <= grp_fu_1127_p2;
        tmp6_mid2_v_reg_2276 <= tmp6_mid2_v_fu_1205_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        iiy_mid2_reg_2291 <= iiy_mid2_fu_1230_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten_reg_1728) & (1'b1 == ap_CS_fsm_state161))) begin
        indvar_flatten123_op_reg_2446 <= grp_fu_1413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_14_reg_1793) & (1'b1 == ap_CS_fsm_state161))) begin
        indvar_flatten70_op_reg_2441 <= grp_fu_1407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state162) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
        indvar_flatten_next1_reg_2456 <= indvar_flatten_next1_fu_1442_p3;
        indvar_flatten_next2_reg_2461 <= indvar_flatten_next2_fu_1448_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        indvar_flatten_next3_reg_1663 <= grp_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next4_reg_2157 <= grp_fu_1063_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        indvar_flatten_next_reg_2182 <= indvar_flatten_next_fu_1117_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten4_reg_2127 == 1'd0))) begin
        indvar_flatten_op_reg_2177 <= grp_fu_1080_p2;
        tmp4_mid1_reg_2162 <= tmp4_mid1_fu_1097_p2;
        tmp9_mid1_reg_2167 <= tmp9_mid1_fu_1102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        indvars_iv12_mid1_reg_1845 <= indvars_iv12_mid1_fu_734_p3;
        indvars_iv14_mid_reg_1839 <= indvars_iv14_mid_fu_727_p3;
        o_d_cast_reg_1832[30 : 0] <= o_d_cast_fu_724_p1[30 : 0];
        o_d_mid2_reg_1851 <= o_d_mid2_fu_745_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        indvars_iv12_mid2_reg_1916 <= indvars_iv12_mid2_fu_820_p3;
        indvars_iv14_mid2_reg_1911 <= indvars_iv14_mid2_fu_815_p3;
        indvars_iv19_mid2_reg_1899 <= indvars_iv19_mid2_fu_806_p3;
        indvars_iv21_mid2_reg_1892 <= indvars_iv21_mid2_fu_799_p3;
        indvars_iv_next2_reg_1886 <= indvars_iv_next2_fu_795_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        indvars_iv17_mid2_reg_1932 <= indvars_iv17_mid2_fu_849_p3;
        indvars_iv24_mid2_reg_1921 <= indvars_iv24_mid2_fu_832_p3;
        tmp_20_reg_1937 <= tmp_20_fu_854_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        indvars_iv17_mid_reg_1856 <= indvars_iv17_mid_fu_761_p3;
        indvars_iv_next1_reg_1879 <= indvars_iv_next1_fu_784_p2;
        indvars_iv_next_reg_1872 <= indvars_iv_next_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_mid2_reg_1806 == 1'd1) & (1'b1 == ap_CS_fsm_state65))) begin
        indvars_iv19_mid1_reg_1862 <= indvars_iv19_mid1_fu_768_p3;
        p_mid2_reg_1867 <= p_mid2_fu_774_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        indvars_iv_next3_reg_2416 <= indvars_iv_next3_fu_1395_p2;
        indvars_iv_next4_reg_2421 <= indvars_iv_next4_fu_1399_p2;
        indvars_iv_next5_reg_2426 <= indvars_iv_next5_fu_1403_p2;
        tmp11_reg_2406 <= tmp11_fu_1385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        input_element_reg_2337 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'd0 == tmp_17_reg_2360) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        notlhs1_reg_2382 <= notlhs1_fu_1364_p2;
        notrhs1_reg_2387 <= notrhs1_fu_1370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        o_d_1_reg_1787 <= o_d_1_fu_682_p2;
        tmp_10_mid2_reg_1806 <= tmp_10_mid2_fu_691_p3;
        tmp_14_reg_1793 <= tmp_14_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        o_d_cast_mid1_reg_1674[30 : 0] <= o_d_cast_mid1_fu_586_p1[30 : 0];
        tmp1_reg_1680 <= tmp1_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        o_x_1_reg_2436 <= o_x_1_fu_1429_p3;
        tmp_9_reg_2431 <= tmp_9_fu_1419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        o_x_cast_mid2_cast_reg_2088[30 : 0] <= o_x_cast_mid2_cast_fu_1037_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
        o_x_cast_mid2_reg_2077 <= o_x_cast_mid2_fu_1024_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_mid2_reg_1806 == 1'd1) & (1'b1 == ap_CS_fsm_state160) & (1'd0 == tmp_14_reg_1793))) begin
        o_x_op_reg_2411 <= o_x_op_fu_1389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        o_y_1_reg_2024 <= o_y_1_fu_942_p2;
        tmp2_mid1_reg_2018 <= grp_fu_919_p2;
        tmp2_mid_reg_2012 <= grp_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        o_y_cast_mid1_reg_1685[30 : 0] <= o_y_cast_mid1_fu_603_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        o_y_mid2_reg_2050 <= o_y_mid2_fu_991_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (1'd0 == tmp_10_mid2_reg_1806))) begin
        p_mid3_reg_1906 <= p_mid3_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_10_mid2_reg_1806) & (1'b1 == ap_CS_fsm_state67))) begin
        p_mid4_reg_1927 <= p_mid4_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        p_mid5_reg_1948 <= p_mid5_fu_858_p3;
        tmp_25_reg_1953 <= tmp_25_fu_868_p2;
        tmp_6_mid1_reg_1942 <= grp_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        p_mid_reg_1597 <= p_mid_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0))) begin
        tmp10_reg_2226 <= grp_fu_1123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        tmp11_mid2_reg_2332 <= grp_fu_1246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten4_reg_2127 == 1'd0))) begin
        tmp11_mid2_v_reg_2296 <= tmp11_mid2_v_fu_1240_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_mid2_reg_1806 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        tmp12_mid2117_v_reg_2035 <= tmp12_mid2117_v_fu_971_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        tmp12_mid2_reg_2072 <= grp_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        tmp12_mid2_v_reg_2055 <= tmp12_mid2_v_fu_996_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (exitcond_flatten4_reg_2127 == 1'd0) & (1'd0 == exitcond_flatten2_reg_2137) & (ap_block_pp0_stage9_flag00011001 == 1'b0) & (1'd1 == tmp_15_mid_reg_2210))) begin
        tmp12_reg_2243 <= tmp12_fu_1174_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2127 == 1'd0) & (1'd0 == exitcond_flatten2_reg_2137) & (1'd1 == tmp_15_mid_reg_2210) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        tmp13_reg_2281 <= tmp13_fu_1216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state69) & (exitcond_flatten72_m_1_reg_1768 == 1'd1))) begin
        tmp14_mid1_reg_1958 <= tmp14_mid1_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0))) begin
        tmp14_reg_2306 <= tmp14_fu_1250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        tmp15_reg_2316 <= tmp15_fu_1259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        tmp1_mid1_reg_1963 <= tmp1_mid1_fu_882_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp2_reg_1691 <= grp_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage9_flag00011001 == 1'b0) & (1'd0 == tmp_15_mid_reg_2210))) begin
        tmp3_mid1_reg_2254 <= tmp3_mid1_fu_1185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage9_flag00011001 == 1'b0) & (1'd1 == tmp_15_mid_reg_2210) & (1'd1 == exitcond_flatten2_reg_2137))) begin
        tmp3_mid_reg_2238 <= tmp3_mid_fu_1170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        tmp5_reg_2187 <= grp_fu_1086_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        tmp6_mid2_reg_2301 <= grp_fu_1221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp6_reg_1592 <= grp_fu_523_p2;
        tmp_reg_1587 <= grp_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_10_mid2_reg_1806) & (1'b1 == ap_CS_fsm_state77))) begin
        tmp7_mid1_reg_2045 <= tmp7_mid1_fu_985_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2127 == 1'd0) & (1'd0 == tmp_15_mid_reg_2210) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        tmp8_mid1_reg_2286 <= tmp8_mid1_fu_1225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp9_reg_2152 <= tmp9_fu_1090_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        tmp_11_reg_2321 <= tmp_11_fu_1263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_flatten72_m_1_reg_1768) & (1'd0 == exitcond_flatten_reg_1728) & (1'b1 == ap_CS_fsm_state64) & (tmp_10_mid2_reg_1806 == 1'd1))) begin
        tmp_13_reg_1827 <= tmp_13_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        tmp_17_reg_2360 <= tmp_17_fu_1320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'd0 == tmp_17_reg_2360) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        tmp_22_reg_2392 <= grp_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'd0 == tmp_17_reg_2360) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        tmp_23_reg_2397 <= tmp_23_fu_1380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten4_reg_2127) & (1'd0 == ap_reg_pp0_iter3_tmp_17_reg_2360) & (1'd0 == tmp_23_reg_2397))) begin
        tmp_24_reg_2401 <= grp_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten2_reg_2137))) begin
        tmp_26_reg_2199 <= tmp_26_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        tmp_5_mid2_reg_1978 <= grp_fu_706_p2;
        tmp_9_mid2_reg_1984 <= tmp_9_mid2_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (1'd0 == exitcond_flatten72_m_1_reg_1768) & (1'd0 == exitcond_flatten_reg_1728))) begin
        tmp_5_reg_1782 <= tmp_5_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        tmp_6_reg_1668 <= grp_fu_570_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten72_m_1_reg_1768 == 1'd1) & (1'b1 == ap_CS_fsm_state70))) begin
        tmp_mid1_reg_1989 <= grp_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        tmp_mid2_reg_1994 <= tmp_mid2_fu_929_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_predicate_op628_read_state134) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        weight_element_reg_2375 <= mem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_condition_pp0_exit_iter4_state147 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter4_state147 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_reg_1659 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_reg_1659 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_AWREADY)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state93) & (mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state92))) begin
        grp_fu_1040_ce = 1'b1;
    end else begin
        grp_fu_1040_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        grp_fu_1063_ce = 1'b1;
    end else begin
        grp_fu_1063_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        grp_fu_1080_ce = 1'b1;
    end else begin
        grp_fu_1080_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_1086_ce = 1'b1;
    end else begin
        grp_fu_1086_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_1113_ce = 1'b1;
    end else begin
        grp_fu_1113_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)))) begin
        grp_fu_1123_ce = 1'b1;
    end else begin
        grp_fu_1123_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)))) begin
        grp_fu_1127_ce = 1'b1;
    end else begin
        grp_fu_1127_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_1221_ce = 1'b1;
    end else begin
        grp_fu_1221_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        grp_fu_1246_ce = 1'b1;
    end else begin
        grp_fu_1246_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_446_ce = 1'b1;
    end else begin
        grp_fu_446_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
        grp_fu_452_ce = 1'b1;
    end else begin
        grp_fu_452_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)))) begin
        grp_fu_456_ce = 1'b1;
    end else begin
        grp_fu_456_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0))) begin
        grp_fu_456_p0 = weight_element_reg_2375;
    end else if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0))) begin
        grp_fu_456_p0 = input_element_reg_2337;
    end else begin
        grp_fu_456_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state85) | ((1'b1 == ap_CS_fsm_state86) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_state93) & (mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state92))) begin
        grp_fu_950_ce = 1'b1;
    end else begin
        grp_fu_950_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_d_phi_fu_357_p4 = i_d_mid2_reg_2172;
    end else begin
        i_d_phi_fu_357_p4 = i_d_reg_353;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0))) begin
        i_x1_phi_fu_390_p4 = i_x_1_reg_2311;
    end else begin
        i_x1_phi_fu_390_p4 = i_x1_reg_387;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0))) begin
        i_y1_phi_fu_380_p4 = i_y1_mid2_reg_2259;
    end else begin
        i_y1_phi_fu_380_p4 = i_y1_reg_377;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0))) begin
        iix_phi_fu_413_p4 = iix_1_reg_2370;
    end else begin
        iix_phi_fu_413_p4 = iix_reg_409;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage9_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127))) begin
        iiy_phi_fu_401_p4 = iiy_mid2_reg_2291;
    end else begin
        iiy_phi_fu_401_p4 = iiy_reg_397;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten4_phi_fu_345_p4 = indvar_flatten_next4_reg_2157;
    end else begin
        indvar_flatten4_phi_fu_345_p4 = indvar_flatten4_reg_341;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten4_reg_2127 == 1'd0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_369_p4 = indvar_flatten_next_reg_2182;
    end else begin
        indvar_flatten_phi_fu_369_p4 = indvar_flatten_reg_365;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        if ((ap_condition_1376 == 1'b1)) begin
            mem_ARADDR = tmp_18_fu_1330_p2;
        end else if ((ap_condition_1366 == 1'b1)) begin
            mem_ARADDR = tmp_11_reg_2321;
        end else if ((1'b1 == ap_CS_fsm_state86)) begin
            mem_ARADDR = tmp_9_mid2_reg_1984;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state86) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b0 == ap_reg_ioackin_mem_ARREADY) & (ap_block_pp0_stage9_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_predicate_op620_readreq_state127) & (1'b0 == ap_reg_ioackin_mem_ARREADY) & (ap_block_pp0_stage8_flag00001001 == 1'b0)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state162) & (1'b0 == ap_reg_ioackin_mem_AWREADY))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state93) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'b1 == ap_predicate_op628_read_state134) & (ap_block_pp0_stage3_flag00011001 == 1'b0)))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state163) & (1'b0 == ap_reg_ioackin_mem_WREADY))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage8_flag00000000 == 1'b0) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'd0 == tmp_17_fu_1320_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage9_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127)) | (1'b1 == ap_CS_fsm_state86))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'd0 == tmp_17_reg_2360)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state93))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten4_reg_2127))) begin
        output_element_2_phi_fu_424_p4 = output_element_4_phi_fu_435_p6;
    end else begin
        output_element_2_phi_fu_424_p4 = output_element_2_reg_420;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5) & (1'd0 == ap_reg_pp0_iter5_exitcond_flatten4_reg_2127) & (1'd0 == ap_reg_pp0_iter4_tmp_17_reg_2360) & (1'd0 == ap_reg_pp0_iter4_tmp_23_reg_2397))) begin
        output_element_4_phi_fu_435_p6 = grp_fu_446_p2;
    end else begin
        output_element_4_phi_fu_435_p6 = ap_phi_precharge_reg_pp0_iter5_output_element_4_reg_431;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            if (((1'b1 == ap_CS_fsm_state61) & (exitcond_flatten3_reg_1659 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((1'b1 == ap_CS_fsm_state86) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            if (((1'b1 == ap_CS_fsm_state93) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state94;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (((ap_block_pp0_stage4_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((ap_block_pp0_stage10_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            if (((1'b1 == ap_CS_fsm_state162) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end
        end
        ap_ST_fsm_state163 : begin
            if (((1'b1 == ap_CS_fsm_state163) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            if (((1'b1 == ap_CS_fsm_state168) & (mem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd98];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b0 == mem_RVALID) & (1'b1 == ap_predicate_op628_read_state134));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter3) & (1'b0 == mem_RVALID) & (1'b1 == ap_predicate_op628_read_state134));
end

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_flag00000001 = ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage4_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage4_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b0 == mem_RVALID));
end

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00000001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state127_io));
end

always @ (*) begin
    ap_block_pp0_stage8_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state127_io));
end

assign ap_block_pp0_stage9_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state116_io));
end

always @ (*) begin
    ap_block_pp0_stage9_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state116_io));
end

assign ap_block_state100_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state116_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (1'b0 == ap_sig_ioackin_mem_ARREADY));
end

assign ap_block_state116_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state123_pp0_stage4_iter2 = ((ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'b0 == mem_RVALID));
end

assign ap_block_state124_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state127_io = ((1'b0 == ap_sig_ioackin_mem_ARREADY) & (1'b1 == ap_predicate_op620_readreq_state127));
end

assign ap_block_state127_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp0_stage11_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state134_pp0_stage3_iter3 = ((1'b0 == mem_RVALID) & (1'b1 == ap_predicate_op628_read_state134));
end

assign ap_block_state135_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp0_stage10_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp0_stage11_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state144_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state147_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state149_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state150_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state151_pp0_stage8_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state152_pp0_stage9_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state153_pp0_stage10_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state154_pp0_stage11_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state155_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state156_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state157_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state158_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1366 = ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten4_reg_2127) & (ap_block_pp0_stage9_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_1376 = ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_predicate_op620_readreq_state127) & (ap_block_pp0_stage8_flag00001001 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_precharge_reg_pp0_iter3_output_element_4_reg_431 = 'bx;

always @ (*) begin
    ap_predicate_op620_readreq_state127 = ((ap_reg_pp0_iter2_exitcond_flatten4_reg_2127 == 1'd0) & (1'd0 == tmp_17_fu_1320_p2));
end

always @ (*) begin
    ap_predicate_op628_read_state134 = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'd0 == tmp_17_reg_2360));
end

always @ (*) begin
    ap_predicate_op629_fcmp_state135 = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'd0 == tmp_17_reg_2360));
end

always @ (*) begin
    ap_predicate_op637_fcmp_state138 = ((1'd0 == ap_reg_pp0_iter3_exitcond_flatten4_reg_2127) & (1'd0 == tmp_17_reg_2360));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_s_4_fu_629_p2 = (b_s_reg_201 + 31'd1);

assign cast1_fu_481_p0 = oy;

assign cast2_fu_485_p0 = ox;

assign cast7_fu_563_p1 = $unsigned(id_read_reg_1497);

assign exitcond_flatten1_fu_640_p2 = ((indvar_flatten3_reg_249 == bound1_reg_1554) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_1075_p2 = ((indvar_flatten_phi_fu_369_p4 == bound_reg_2006) ? 1'b1 : 1'b0);

assign exitcond_flatten3_fu_575_p2 = ((indvar_flatten1_reg_189 == bound3_reg_1627) ? 1'b1 : 1'b0);

assign exitcond_flatten4_fu_1058_p2 = ((indvar_flatten4_phi_fu_345_p4 == bound4_reg_2112) ? 1'b1 : 1'b0);

assign exitcond_flatten72_m_1_fu_666_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? exitcond_flatten72_m_reg_1644 : exitcond_flatten1_reg_1746);

assign exitcond_flatten72_m_fu_558_p2 = ((bound1_reg_1554 == 64'd0) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_635_p2 = ((indvar_flatten2_reg_237 == bound2_reg_1571) ? 1'b1 : 1'b0);

assign grp_fu_1040_p1 = grp_fu_1040_p10;

assign grp_fu_1040_p10 = o_x_cast_mid2_reg_2077;

assign grp_fu_489_p0 = grp_fu_489_p00;

assign grp_fu_489_p00 = $unsigned(cast2_fu_485_p0);

assign grp_fu_489_p1 = grp_fu_489_p10;

assign grp_fu_489_p10 = $unsigned(cast1_fu_481_p0);

assign grp_fu_501_p0 = grp_fu_501_p00;

assign grp_fu_501_p00 = bound1_reg_1554;

assign grp_fu_501_p1 = grp_fu_501_p10;

assign grp_fu_501_p10 = $unsigned(od_read_reg_1520);

assign grp_fu_513_p0 = grp_fu_513_p00;

assign grp_fu_513_p00 = bound2_reg_1571;

assign grp_fu_513_p1 = grp_fu_513_p10;

assign grp_fu_513_p10 = b_read_reg_1529;

assign grp_fu_570_p1 = grp_fu_570_p10;

assign grp_fu_570_p10 = b_s_reg_201;

assign grp_fu_599_p1 = o_d_cast_mid1_reg_1674;

assign grp_fu_607_p1 = grp_fu_607_p10;

assign grp_fu_607_p10 = o_y_reg_225;

assign grp_fu_661_p1 = grp_fu_661_p10;

assign grp_fu_661_p10 = b_s_4_reg_1722;

assign grp_fu_706_p1 = grp_fu_706_p10;

assign grp_fu_706_p10 = tmp_5_mid2_v_reg_1762;

assign grp_fu_740_p1 = grp_fu_740_p10;

assign grp_fu_740_p10 = o_d_1_reg_1787;

assign grp_fu_893_p0 = grp_fu_893_p00;

assign grp_fu_893_p00 = tmp_25_reg_1953;

assign grp_fu_893_p1 = grp_fu_893_p10;

assign grp_fu_893_p10 = p_mid5_reg_1948;

assign grp_fu_950_p0 = grp_fu_950_p00;

assign grp_fu_950_p00 = bound_reg_2006;

assign grp_fu_950_p1 = cast7_reg_1649;

assign grp_fu_980_p1 = o_y_cast_fu_977_p1;

assign i_d_cast_fu_1094_p1 = i_d_s_reg_2131;

assign i_d_cast_mid1_fu_1049_p1 = i_d_phi_fu_357_p4;

assign i_d_mid2_fu_1107_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? i_d_s_reg_2131 : i_d_reg_353);

assign i_d_s_fu_1069_p2 = (31'd1 + i_d_phi_fu_357_p4);

assign i_x1_mid2_fu_1179_p3 = ((tmp_15_mid_reg_2210[0:0] === 1'b1) ? i_x1_mid_fu_1159_p3 : i_x_reg_2099);

assign i_x1_mid_fu_1159_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? i_x_reg_2099 : i_x1_reg_387);

assign i_x_1_fu_1254_p2 = (i_x1_mid2_reg_2248 + 32'd1);

assign i_y1_mid2_fu_1190_p3 = ((tmp_15_mid_reg_2210[0:0] === 1'b1) ? i_y1_mid_reg_2193 : i_y_1_reg_2220);

assign i_y1_mid_fu_1131_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? i_y_mid2_reg_2065 : i_y1_phi_fu_380_p4);

assign i_y_1_fu_1147_p2 = (32'd1 + i_y1_mid_reg_2193);

assign i_y_mid2_fu_1011_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? i_y_mid_fu_1005_p3 : i_y_mid1_reg_2060);

assign i_y_mid_fu_1005_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 32'd0 : i_y_reg_1707);

assign iix_1_fu_1342_p2 = (iix_mid2_reg_2344 + 32'd1);

assign iix_mid2_fu_1280_p3 = ((ap_reg_pp0_iter1_tmp_15_mid_reg_2210[0:0] === 1'b1) ? iix_mid_fu_1273_p3 : 32'd0);

assign iix_mid_fu_1273_p3 = ((ap_reg_pp0_iter2_exitcond_flatten2_reg_2137[0:0] === 1'b1) ? 32'd0 : iix_phi_fu_413_p4);

assign iiy_1_fu_1200_p2 = (32'd1 + iiy_mid_reg_2232);

assign iiy_mid2_fu_1230_p3 = ((tmp_15_mid_reg_2210[0:0] === 1'b1) ? iiy_mid_reg_2232 : iiy_1_reg_2270);

assign iiy_mid_fu_1152_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? 32'd0 : iiy_phi_fu_401_p4);

assign indvar_flatten_next1_fu_1442_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 64'd1 : indvar_flatten70_op_reg_2441);

assign indvar_flatten_next2_fu_1448_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? 96'd1 : indvar_flatten123_op_reg_2446);

assign indvar_flatten_next_fu_1117_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? 64'd1 : indvar_flatten_op_reg_2177);

assign indvars_iv12_mid1_fu_734_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? k_read_reg_1454 : indvars_iv12_mid_fu_697_p3);

assign indvars_iv12_mid2_fu_820_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? indvars_iv12_mid1_reg_1845 : indvars_iv_next_reg_1872);

assign indvars_iv12_mid_fu_697_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? k_read_reg_1454 : indvars_iv2_reg_285);

assign indvars_iv14_mid2_fu_815_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? indvars_iv14_mid_reg_1839 : indvars_iv_next1_reg_1879);

assign indvars_iv14_mid_fu_727_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 32'd0 : indvars_iv1_reg_273);

assign indvars_iv17_mid2_fu_849_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? indvars_iv17_mid_reg_1856 : indvars_iv_next2_reg_1886);

assign indvars_iv17_mid_fu_761_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 32'd0 : indvars_iv_reg_261);

assign indvars_iv19_mid1_fu_768_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? k_read_reg_1454 : indvars_iv19_mid_fu_750_p3);

assign indvars_iv19_mid2_fu_806_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? indvars_iv19_mid1_reg_1862 : k_read_reg_1454);

assign indvars_iv19_mid_fu_750_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? k_read_reg_1454 : indvars_iv5_reg_319);

assign indvars_iv21_mid2_fu_799_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? indvars_iv21_mid_fu_788_p3 : 32'd0);

assign indvars_iv21_mid_fu_788_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 32'd0 : indvars_iv4_reg_307);

assign indvars_iv24_mid2_fu_832_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? indvars_iv24_mid_fu_825_p3 : 32'd0);

assign indvars_iv24_mid_fu_825_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 32'd0 : indvars_iv3_reg_295);

assign indvars_iv_next1_fu_784_p2 = ($signed(s_read_reg_1473) + $signed(indvars_iv14_mid_reg_1839));

assign indvars_iv_next2_fu_795_p2 = ($signed(indvars_iv17_mid_reg_1856) - $signed(s_read_reg_1473));

assign indvars_iv_next3_fu_1395_p2 = ($signed(indvars_iv19_mid2_reg_1899) + $signed(s_read_reg_1473));

assign indvars_iv_next4_fu_1399_p2 = ($signed(indvars_iv21_mid2_reg_1892) + $signed(s_read_reg_1473));

assign indvars_iv_next5_fu_1403_p2 = ($signed(indvars_iv24_mid2_reg_1921) - $signed(s_read_reg_1473));

assign indvars_iv_next_fu_780_p2 = ($signed(s_read_reg_1473) + $signed(indvars_iv12_mid1_reg_1845));

assign input_element_to_int_fu_1287_p1 = input_element_reg_2337;

assign notlhs1_fu_1364_p2 = ((tmp_19_fu_1350_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_1304_p2 = ((tmp_12_fu_1290_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_1370_p2 = ((tmp_28_fu_1360_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_1310_p2 = ((tmp_27_fu_1300_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_d_1_fu_682_p2 = (o_d_mid_reg_1756 + 31'd1);

assign o_d_cast_fu_724_p1 = o_d_1_reg_1787;

assign o_d_cast_mid1_fu_586_p1 = o_d_reg_213;

assign o_d_mid2_fu_745_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? o_d_1_reg_1787 : o_d_mid_reg_1756);

assign o_d_mid_fu_648_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? 31'd0 : o_d_reg_213);

assign o_x_1_fu_1429_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? o_x_mid293_op_fu_1423_p3 : 31'd1);

assign o_x_cast_fu_620_p1 = o_x_reg_329;

assign o_x_cast_mid2_cast_fu_1037_p1 = o_x_cast_mid2_reg_2077;

assign o_x_cast_mid2_fu_1024_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? o_x_cast_mid_fu_1017_p3 : 31'd0);

assign o_x_cast_mid_fu_1017_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 31'd0 : o_x_reg_329);

assign o_x_mid293_op_fu_1423_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 31'd1 : o_x_op_reg_2411);

assign o_x_op_fu_1389_p2 = (o_x_reg_329 + 31'd1);

assign o_y_1_fu_942_p2 = (o_y_mid_reg_2000 + 31'd1);

assign o_y_cast_fu_977_p1 = o_y_1_reg_2024;

assign o_y_cast_mid1_fu_603_p1 = o_y_reg_225;

assign o_y_mid2_fu_991_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? o_y_mid_reg_2000 : o_y_1_reg_2024);

assign o_y_mid_fu_935_p3 = ((tmp_14_reg_1793[0:0] === 1'b1) ? 31'd0 : o_y_reg_225);

assign p_mid1_fu_756_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? smax16_mid_reg_1632 : tmp_13_reg_1827);

assign p_mid2_fu_774_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? smax16_mid_reg_1632 : p_mid1_fu_756_p3);

assign p_mid3_fu_811_p2 = (($signed(indvars_iv_next_reg_1872) > $signed(indvars_iv_next1_reg_1879)) ? 1'b1 : 1'b0);

assign p_mid4_fu_844_p2 = (indvars_iv_next2_reg_1886 + smax16_mid1_fu_839_p3);

assign p_mid5_fu_858_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? p_mid2_reg_1867 : p_mid4_reg_1927);

assign p_mid_fu_531_p2 = (($signed(k_read_reg_1454) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign smax16_mid1_fu_839_p3 = ((p_mid3_reg_1906[0:0] === 1'b1) ? indvars_iv_next_reg_1872 : indvars_iv_next1_reg_1879);

assign smax16_mid_fu_547_p3 = ((p_mid_reg_1597[0:0] === 1'b1) ? k_read_reg_1454 : 32'd0);

assign smax1_fu_863_p3 = ((tmp_20_reg_1937[0:0] === 1'b1) ? indvars_iv19_mid2_reg_1899 : indvars_iv21_mid2_reg_1892);

assign smax_fu_711_p3 = ((tmp_5_reg_1782[0:0] === 1'b1) ? indvars_iv2_reg_285 : indvars_iv1_reg_273);

assign tmp10_mid2_fu_1211_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? tmp10_mid1_reg_2264 : tmp10_reg_2226);

assign tmp11_fu_1385_p2 = (o_x_cast_mid2_cast_reg_2088 + tmp_8_reg_1617);

assign tmp11_mid245_v_fu_1235_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? tmp10_mid1_reg_2264 : tmp13_reg_2281);

assign tmp11_mid2_v_fu_1240_p3 = ((tmp_15_mid_reg_2210[0:0] === 1'b1) ? tmp11_mid245_v_fu_1235_p3 : tmp8_mid1_reg_2286);

assign tmp12_fu_1174_p2 = (tmp5_reg_2187 + i_y1_reg_377);

assign tmp12_mid2117_v_fu_971_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? tmp2_mid1_reg_2018 : tmp12_mid2187_v_fu_960_p3);

assign tmp12_mid2187_v_fu_960_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? tmp2_mid_reg_2012 : tmp7_reg_1712);

assign tmp12_mid2_v_fu_996_p3 = ((tmp_10_mid2_reg_1806[0:0] === 1'b1) ? tmp12_mid2117_v_reg_2035 : tmp7_mid1_reg_2045);

assign tmp13_fu_1216_p2 = (tmp10_reg_2226 + iiy_reg_397);

assign tmp14_fu_1250_p2 = (tmp6_mid2_reg_2301 + i_x1_mid2_reg_2248);

assign tmp14_mid1_fu_878_p2 = (tmp_7_reg_1609 + o_d_cast_reg_1832);

assign tmp15_fu_1259_p2 = (tmp14_reg_2306 + num_weights_reg_1603);

assign tmp1_fu_590_p2 = (tmp_6_reg_1668 + o_d_cast_mid1_fu_586_p1);

assign tmp1_mid1_fu_882_p2 = (o_d_cast_reg_1832 + tmp_6_mid2_fu_873_p3);

assign tmp20_fu_1326_p2 = (tmp_7_reg_1609 + iix_mid2_reg_2344);

assign tmp2_mid2_fu_965_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? tmp2_mid1_reg_2018 : tmp2_mid3_fu_955_p3);

assign tmp2_mid3_fu_955_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? tmp2_mid_reg_2012 : tmp2_reg_1691);

assign tmp3_fu_542_p2 = ($signed(tmp_7_fu_536_p1) + $signed(od_read_reg_1520));

assign tmp3_mid1_fu_1185_p2 = (i_y_1_reg_2220 + tmp5_mid2_fu_1165_p3);

assign tmp3_mid_fu_1170_p2 = (i_y_mid2_reg_2065 + tmp5_mid1_reg_2204);

assign tmp4_fu_1053_p2 = (i_d_cast_mid1_fu_1049_p1 + tmp_5_mid2_reg_1978);

assign tmp4_mid1_fu_1097_p2 = (i_d_cast_fu_1094_p1 + tmp_5_mid2_reg_1978);

assign tmp5_mid2_fu_1165_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? tmp5_mid1_reg_2204 : tmp5_reg_2187);

assign tmp6_mid241_v_fu_1195_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? tmp3_mid_reg_2238 : tmp12_reg_2243);

assign tmp6_mid2_v_fu_1205_p3 = ((tmp_15_mid_reg_2210[0:0] === 1'b1) ? tmp6_mid241_v_fu_1195_p3 : tmp3_mid1_reg_2254);

assign tmp7_fu_616_p2 = (tmp2_reg_1691 + o_y_cast_mid1_reg_1685);

assign tmp7_mid1_fu_985_p2 = (o_y_cast_fu_977_p1 + tmp2_mid2_fu_965_p3);

assign tmp8_fu_612_p2 = (o_d_cast_mid1_reg_1674 + tmp_7_reg_1609);

assign tmp8_mid1_fu_1225_p2 = (iiy_1_reg_2270 + tmp10_mid2_fu_1211_p3);

assign tmp9_fu_1090_p2 = (i_d_cast_mid1_reg_2117 + tmp_mid2_reg_1994);

assign tmp9_mid1_fu_1102_p2 = (i_d_cast_fu_1094_p1 + tmp_mid2_reg_1994);

assign tmp_10_mid1_fu_677_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? tmp_10_mid_reg_1638 : tmp_1_reg_1717);

assign tmp_10_mid2_fu_691_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? tmp_10_mid_reg_1638 : tmp_10_mid1_fu_677_p3);

assign tmp_10_mid_fu_553_p2 = (($signed(ox_read_reg_1513) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmp_11_fu_1263_p2 = (tmp15_reg_2316 + tmp3_reg_1622);

assign tmp_12_fu_1290_p4 = {{input_element_to_int_fu_1287_p1[30:23]}};

assign tmp_13_fu_718_p2 = (smax_fu_711_p3 + indvars_iv_reg_261);

assign tmp_14_fu_687_p2 = (exitcond_flatten72_m_1_reg_1768 | exitcond_flatten_reg_1728);

assign tmp_15_fu_1316_p2 = (notrhs_reg_2355 | notlhs_reg_2350);

assign tmp_15_mid_fu_1142_p3 = ((exitcond_flatten2_reg_2137[0:0] === 1'b1) ? p_mid_reg_1597 : tmp_26_reg_2199);

assign tmp_17_fu_1320_p2 = (tmp_15_fu_1316_p2 & grp_fu_456_p2);

assign tmp_18_fu_1330_p2 = (tmp20_fu_1326_p2 + tmp11_mid2_reg_2332);

assign tmp_19_fu_1350_p4 = {{weight_element_to_in_fu_1347_p1[30:23]}};

assign tmp_1_fu_624_p2 = (($signed(o_x_cast_fu_620_p1) < $signed(ox_read_reg_1513)) ? 1'b1 : 1'b0);

assign tmp_20_fu_854_p2 = (($signed(indvars_iv19_mid2_reg_1899) > $signed(indvars_iv21_mid2_reg_1892)) ? 1'b1 : 1'b0);

assign tmp_21_fu_1376_p2 = (notrhs1_reg_2387 | notlhs1_reg_2382);

assign tmp_23_fu_1380_p2 = (tmp_21_fu_1376_p2 & tmp_22_reg_2392);

assign tmp_25_fu_868_p2 = (indvars_iv24_mid2_reg_1921 + smax1_fu_863_p3);

assign tmp_26_fu_1137_p2 = (($signed(i_x1_phi_fu_390_p4) < $signed(tmp_4_reg_2107)) ? 1'b1 : 1'b0);

assign tmp_27_fu_1300_p1 = input_element_to_int_fu_1287_p1[22:0];

assign tmp_28_fu_1360_p1 = weight_element_to_in_fu_1347_p1[22:0];

assign tmp_4_fu_1045_p2 = ($signed(k_read_reg_1454) + $signed(i_x_reg_2099));

assign tmp_5_fu_671_p2 = (($signed(indvars_iv2_reg_285) > $signed(indvars_iv1_reg_273)) ? 1'b1 : 1'b0);

assign tmp_5_mid2_v_fu_655_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? b_s_4_reg_1722 : b_s_reg_201);

assign tmp_6_mid2_fu_873_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? tmp_6_mid1_reg_1942 : tmp_6_reg_1668);

assign tmp_7_fu_536_p1 = tmp_2_reg_1534;

assign tmp_8_fu_539_p1 = tmp_3_reg_1539;

assign tmp_9_fu_1419_p2 = (tmp12_mid2_reg_2072 + tmp11_reg_2406);

assign tmp_9_mid2155_v_fu_899_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? tmp_7_reg_1609 : tmp8_reg_1697);

assign tmp_9_mid2_fu_914_p2 = (tmp_9_mid2_v_fu_908_p3 + num_weights_reg_1603);

assign tmp_9_mid2_v_fu_908_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? tmp14_mid1_reg_1958 : tmp_9_mid2155_v_fu_899_p3);

assign tmp_mid2_fu_929_p3 = ((exitcond_flatten72_m_1_reg_1768[0:0] === 1'b1) ? tmp_mid1_reg_1989 : tmp_mid_fu_923_p3);

assign tmp_mid_fu_923_p3 = ((exitcond_flatten_reg_1728[0:0] === 1'b1) ? 32'd0 : tmp_s_reg_1702);

assign weight_element_to_in_fu_1347_p1 = weight_element_reg_2375;

always @ (posedge ap_clk) begin
    tmp_7_reg_1609[31:30] <= 2'b00;
    tmp_8_reg_1617[31:30] <= 2'b00;
    cast7_reg_1649[95:32] <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    o_d_cast_mid1_reg_1674[31] <= 1'b0;
    o_y_cast_mid1_reg_1685[31] <= 1'b0;
    o_d_cast_reg_1832[31] <= 1'b0;
    o_x_cast_mid2_cast_reg_2088[31] <= 1'b0;
    i_d_cast_mid1_reg_2117[31] <= 1'b0;
end

endmodule //conv_layer
