-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fc_layer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fc_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=9,HLS_SYN_FF=4603,HLS_SYN_LUT=2670}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (68 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (68 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (68 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (68 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (68 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (68 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (68 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (68 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (68 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (68 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (68 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (68 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (68 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (68 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_size : STD_LOGIC_VECTOR (31 downto 0);
    signal num_inputs : STD_LOGIC_VECTOR (31 downto 0);
    signal num_outputs : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_relu : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal tmp_1_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_5_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal enable_relu_read_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_outputs_read_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_inputs_read_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_size_read_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_467 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_reg_472 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_weights_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_s_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul4_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul4_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal next_mul2_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_1_fu_297_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_1_reg_516 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal o_cast_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_cast_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_1_fu_322_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_1_reg_539 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp1_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal output_element_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_352_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_568 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp4_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_573 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_11_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal input_element_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_element_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal notlhs_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal notrhs_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_433_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal b_reg_127 : STD_LOGIC_VECTOR (30 downto 0);
    signal phi_mul1_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul3_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_reg_161 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state62 : BOOLEAN;
    signal phi_mul_reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_reg_195 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal b_cast_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_to_int_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_408_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_16_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (68 downto 0);

    component fc_layer_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fcmp_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_layer_mul_32s_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        batch_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_inputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_outputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_relu : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fc_layer_CTRL_BUS_s_axi_U : component fc_layer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_offset => input_offset,
        output_offset => output_offset,
        batch_size => batch_size,
        num_inputs => num_inputs,
        num_outputs => num_outputs,
        enable_relu => enable_relu);

    fc_layer_mem_m_axi_U : component fc_layer_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => reg_225,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => mem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    fc_layer_fadd_32nbkb_U0 : component fc_layer_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_reg_184,
        din1 => tmp_12_reg_620,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p2);

    fc_layer_fmul_32ncud_U1 : component fc_layer_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_element_reg_610,
        din1 => weight_element_reg_615,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);

    fc_layer_fcmp_32ndEe_U2 : component fc_layer_fcmp_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_reg_184,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_215_p2);

    fc_layer_mul_32s_eOg_U3 : component fc_layer_mul_32s_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => num_outputs,
        din1 => num_inputs,
        ce => ap_const_logic_1,
        dout => grp_fu_236_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_logic_1 = mem_ARREADY)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_logic_1 = mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_const_logic_1 = mem_AWREADY)))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_const_logic_1 = mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_logic_1 = mem_WREADY)))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    b_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_317_p2))) then 
                b_reg_127 <= b_1_reg_516;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                b_reg_127 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_reg_195 <= i_1_reg_568;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_reg_195 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_3_fu_292_p2))) then 
                o_reg_161 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state62) and not(((tmp_1_reg_477 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID))))) then 
                o_reg_161 <= o_1_reg_539;
            end if; 
        end if;
    end process;

    phi_mul1_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_317_p2))) then 
                phi_mul1_reg_138 <= next_mul2_reg_508;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul1_reg_138 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_317_p2))) then 
                phi_mul3_reg_150 <= next_mul4_reg_503;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul3_reg_150 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_3_fu_292_p2))) then 
                phi_mul_reg_172 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state62) and not(((tmp_1_reg_477 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID))))) then 
                phi_mul_reg_172 <= next_mul_reg_526;
            end if; 
        end if;
    end process;

    tmp_8_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                tmp_8_reg_184 <= grp_fu_206_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                tmp_8_reg_184 <= output_element_reg_560;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                b_1_reg_516 <= b_1_fu_297_p2;
                next_mul2_reg_508 <= next_mul2_fu_283_p2;
                next_mul4_reg_503 <= next_mul4_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                batch_size_read_reg_462 <= batch_size;
                enable_relu_read_reg_441 <= enable_relu;
                num_inputs_read_reg_454 <= num_inputs;
                num_outputs_read_reg_446 <= num_outputs;
                tmp_2_reg_472 <= output_offset(31 downto 2);
                tmp_reg_467 <= input_offset(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_1_reg_568 <= i_1_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (mem_RVALID = ap_const_logic_1))) then
                input_element_reg_610 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                next_mul_reg_526 <= next_mul_fu_308_p2;
                o_1_reg_539 <= o_1_fu_322_p2;
                    o_cast_reg_531(30 downto 0) <= o_cast_fu_313_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                notlhs_reg_630 <= notlhs_fu_412_p2;
                notrhs_reg_635 <= notrhs_fu_418_p2;
                tmp_17_reg_640 <= grp_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                num_weights_reg_481 <= grp_fu_236_p2;
                tmp2_reg_498 <= tmp2_fu_273_p2;
                    tmp_4_reg_493(29 downto 0) <= tmp_4_fu_270_p1(29 downto 0);
                    tmp_s_reg_487(29 downto 0) <= tmp_s_fu_267_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (mem_RVALID = ap_const_logic_1))) then
                output_element_reg_560 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_1_reg_477 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_5_fu_347_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_5_fu_347_p2) and (tmp_1_reg_477 = ap_const_lv1_1)))) then
                reg_225 <= grp_fu_221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = tmp_7_fu_317_p2))) then
                tmp1_reg_544 <= tmp1_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp3_reg_583 <= tmp3_fu_369_p2;
                tmp_11_reg_588 <= tmp_11_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_5_fu_347_p2 = ap_const_lv1_1))) then
                tmp4_reg_573 <= tmp4_fu_358_p2;
                tmp5_reg_578 <= tmp5_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_10_reg_593 <= tmp_10_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_12_reg_620 <= grp_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                tmp_19_reg_645 <= tmp_19_fu_433_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_1_reg_477 <= tmp_1_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_3_fu_292_p2))) then
                tmp_6_reg_521 <= tmp_6_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_9_reg_549 <= tmp_9_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (mem_RVALID = ap_const_logic_1))) then
                weight_element_reg_615 <= mem_RDATA;
            end if;
        end if;
    end process;
    tmp_s_reg_487(31 downto 30) <= "00";
    tmp_4_reg_493(31 downto 30) <= "00";
    o_cast_reg_531(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state30, ap_CS_fsm_state24, ap_CS_fsm_state31, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state62, tmp_1_reg_477, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state69, mem_RVALID, mem_BVALID, ap_CS_fsm_state20, tmp_5_fu_347_p2, ap_CS_fsm_state8, tmp_3_fu_292_p2, ap_CS_fsm_state9, tmp_7_fu_317_p2, ap_sig_ioackin_mem_ARREADY, ap_sig_ioackin_mem_AWREADY, ap_sig_ioackin_mem_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_3_fu_292_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_7_fu_317_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_5_fu_347_p2) and (tmp_1_reg_477 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                elsif (((tmp_1_reg_477 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_lv1_0 = tmp_5_fu_347_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state57;
                else
                    ap_NS_fsm <= ap_ST_fsm_state56;
                end if;
            when ap_ST_fsm_state57 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state58;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and not(((tmp_1_reg_477 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state69) and (mem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state62_assign_proc : process(tmp_1_reg_477, mem_BVALID)
    begin
                ap_block_state62 <= ((tmp_1_reg_477 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, tmp_3_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_3_fu_292_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, tmp_3_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = tmp_3_fu_292_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b_1_fu_297_p2 <= std_logic_vector(unsigned(b_reg_127) + unsigned(ap_const_lv31_1));
    b_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_127),32));
    grp_fu_221_p2 <= std_logic_vector(unsigned(o_cast_reg_531) + unsigned(tmp_6_reg_521));
    i_1_fu_352_p2 <= std_logic_vector(unsigned(i_reg_195) + unsigned(ap_const_lv31_1));
    i_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_195),32));

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state24, tmp_9_reg_549, tmp_11_reg_588, tmp_10_reg_593, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                mem_ARADDR <= tmp_11_reg_588;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                mem_ARADDR <= tmp_10_reg_593;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                mem_ARADDR <= tmp_9_reg_549;
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state63, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state56) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state63) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state62, tmp_1_reg_477, ap_CS_fsm_state69, mem_BVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_1_reg_477 = ap_const_lv1_0) and not(((tmp_1_reg_477 = ap_const_lv1_0) and (ap_const_logic_0 = mem_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state69) and (mem_BVALID = ap_const_logic_1)))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31, mem_RVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state18) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (mem_RVALID = ap_const_logic_1)))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WDATA_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state64, tmp_19_reg_645, tmp_8_reg_184, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                mem_WDATA <= tmp_8_reg_184;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                mem_WDATA <= tmp_19_reg_645;
            else 
                mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state64, ap_reg_ioackin_mem_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state57) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state64) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_state11, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state56, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state63))) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state62, tmp_1_reg_477, ap_CS_fsm_state69)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state62) and (tmp_1_reg_477 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_CS_fsm_state18, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state57, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state64))) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    next_mul2_fu_283_p2 <= std_logic_vector(unsigned(phi_mul1_reg_138) + unsigned(num_inputs_read_reg_454));
    next_mul4_fu_278_p2 <= std_logic_vector(unsigned(phi_mul3_reg_150) + unsigned(num_outputs_read_reg_446));
    next_mul_fu_308_p2 <= std_logic_vector(unsigned(phi_mul_reg_172) + unsigned(num_inputs_read_reg_454));
    notlhs_fu_412_p2 <= "0" when (tmp_14_fu_398_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_418_p2 <= "1" when (tmp_15_fu_408_p1 = ap_const_lv23_0) else "0";
    o_1_fu_322_p2 <= std_logic_vector(unsigned(o_reg_161) + unsigned(ap_const_lv31_1));
    o_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_161),32));
    tmp1_fu_328_p2 <= std_logic_vector(unsigned(tmp_s_reg_487) + unsigned(o_cast_fu_313_p1));
    tmp2_fu_273_p2 <= std_logic_vector(unsigned(tmp_s_fu_267_p1) + unsigned(num_outputs_read_reg_446));
    tmp3_fu_369_p2 <= std_logic_vector(unsigned(tmp4_reg_573) + unsigned(num_weights_reg_481));
    tmp4_fu_358_p2 <= std_logic_vector(unsigned(phi_mul1_reg_138) + unsigned(i_cast_fu_343_p1));
    tmp5_fu_364_p2 <= std_logic_vector(unsigned(tmp_s_reg_487) + unsigned(i_cast_fu_343_p1));
    tmp_10_fu_378_p2 <= std_logic_vector(unsigned(tmp3_reg_583) + unsigned(tmp2_reg_498));
    tmp_10_to_int_fu_394_p1 <= tmp_8_reg_184;
    tmp_11_fu_373_p2 <= std_logic_vector(unsigned(tmp5_reg_578) + unsigned(phi_mul_reg_172));
    tmp_14_fu_398_p4 <= tmp_10_to_int_fu_394_p1(30 downto 23);
    tmp_15_fu_408_p1 <= tmp_10_to_int_fu_394_p1(23 - 1 downto 0);
    tmp_16_fu_424_p2 <= (notrhs_reg_635 or notlhs_reg_630);
    tmp_18_fu_428_p2 <= (tmp_16_fu_424_p2 and tmp_17_reg_640);
    tmp_19_fu_433_p3 <= 
        tmp_8_reg_184 when (tmp_18_fu_428_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_1_fu_262_p2 <= "1" when (enable_relu_read_reg_441 = ap_const_lv32_0) else "0";
    tmp_3_fu_292_p2 <= "1" when (signed(b_cast_fu_288_p1) < signed(batch_size_read_reg_462)) else "0";
    tmp_4_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_472),32));
    tmp_5_fu_347_p2 <= "1" when (signed(i_cast_fu_343_p1) < signed(num_inputs_read_reg_454)) else "0";
    tmp_6_fu_303_p2 <= std_logic_vector(unsigned(phi_mul3_reg_150) + unsigned(tmp_4_reg_493));
    tmp_7_fu_317_p2 <= "1" when (signed(o_cast_fu_313_p1) < signed(num_outputs_read_reg_446)) else "0";
    tmp_9_fu_333_p2 <= std_logic_vector(unsigned(tmp1_reg_544) + unsigned(num_weights_reg_481));
    tmp_s_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_467),32));
end behav;
