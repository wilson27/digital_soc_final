// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fc_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.239000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=25,HLS_SYN_FF=5927,HLS_SYN_LUT=2943}" *)

module fc_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        ap_ce,
        interrupt
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_pp0_stage0 = 51'd1048576;
parameter    ap_ST_fsm_pp0_stage1 = 51'd2097152;
parameter    ap_ST_fsm_pp0_stage2 = 51'd4194304;
parameter    ap_ST_fsm_pp0_stage3 = 51'd8388608;
parameter    ap_ST_fsm_pp0_stage4 = 51'd16777216;
parameter    ap_ST_fsm_pp0_stage5 = 51'd33554432;
parameter    ap_ST_fsm_pp0_stage6 = 51'd67108864;
parameter    ap_ST_fsm_pp0_stage7 = 51'd134217728;
parameter    ap_ST_fsm_pp0_stage8 = 51'd268435456;
parameter    ap_ST_fsm_pp0_stage9 = 51'd536870912;
parameter    ap_ST_fsm_pp0_stage10 = 51'd1073741824;
parameter    ap_ST_fsm_pp0_stage11 = 51'd2147483648;
parameter    ap_ST_fsm_state68 = 51'd4294967296;
parameter    ap_ST_fsm_state69 = 51'd8589934592;
parameter    ap_ST_fsm_state70 = 51'd17179869184;
parameter    ap_ST_fsm_state71 = 51'd34359738368;
parameter    ap_ST_fsm_state72 = 51'd68719476736;
parameter    ap_ST_fsm_state73 = 51'd137438953472;
parameter    ap_ST_fsm_state74 = 51'd274877906944;
parameter    ap_ST_fsm_state75 = 51'd549755813888;
parameter    ap_ST_fsm_state76 = 51'd1099511627776;
parameter    ap_ST_fsm_state77 = 51'd2199023255552;
parameter    ap_ST_fsm_state78 = 51'd4398046511104;
parameter    ap_ST_fsm_state79 = 51'd8796093022208;
parameter    ap_ST_fsm_state80 = 51'd17592186044416;
parameter    ap_ST_fsm_state81 = 51'd35184372088832;
parameter    ap_ST_fsm_state82 = 51'd70368744177664;
parameter    ap_ST_fsm_state83 = 51'd140737488355328;
parameter    ap_ST_fsm_state84 = 51'd281474976710656;
parameter    ap_ST_fsm_state85 = 51'd562949953421312;
parameter    ap_ST_fsm_state86 = 51'd1125899906842624;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
input   ap_ce;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] batch_size;
wire  signed [31:0] num_inputs;
wire  signed [31:0] num_outputs;
wire   [31:0] enable_relu;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3_flag00000000;
reg   [0:0] tmp_5_reg_726;
reg    mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_flag00000000;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_flag00000000;
reg   [0:0] ap_reg_pp0_iter1_tmp_5_reg_726;
wire   [0:0] tmp_15_fu_445_p2;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9_flag00000000;
reg   [0:0] tmp_15_reg_773;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state72;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state73;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state78;
reg   [0:0] tmp_1_reg_605;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg   [31:0] mem_WDATA;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [31:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
reg   [30:0] i_reg_177;
reg   [31:0] tmp_8_reg_188;
wire   [31:0] grp_fu_230_p2;
reg   [31:0] reg_234;
wire    ap_CS_fsm_state68;
reg   [31:0] enable_relu_read_reg_564;
reg  signed [31:0] num_outputs_read_reg_569;
reg  signed [31:0] num_inputs_read_reg_577;
reg   [29:0] tmp_reg_585;
reg   [29:0] tmp_2_reg_590;
wire   [0:0] tmp_1_fu_285_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_245_p2;
reg   [31:0] num_weights_reg_609;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_3_fu_290_p1;
reg   [31:0] tmp_3_reg_615;
wire   [31:0] tmp_4_fu_293_p1;
reg   [31:0] tmp_4_reg_621;
wire   [31:0] tmp2_fu_296_p2;
reg   [31:0] tmp2_reg_626;
wire   [63:0] grp_fu_279_p2;
reg   [63:0] bound_reg_631;
wire   [0:0] tmp_7_fu_305_p2;
reg   [0:0] tmp_7_reg_636;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_flatten_fu_310_p2;
reg   [0:0] exitcond_flatten_reg_643;
wire   [63:0] grp_fu_315_p2;
reg   [63:0] indvar_flatten_next_reg_647;
wire    ap_CS_fsm_state9;
wire   [30:0] b_s_fu_321_p2;
reg   [30:0] b_s_reg_652;
wire   [30:0] o_cast_mid2_fu_327_p3;
reg   [30:0] o_cast_mid2_reg_657;
wire   [30:0] tmp_4_mid2_v_v_fu_334_p3;
reg   [30:0] tmp_4_mid2_v_v_reg_662;
wire    ap_CS_fsm_state10;
wire   [31:0] o_cast_mid2_cast_fu_340_p1;
reg   [31:0] o_cast_mid2_cast_reg_668;
wire   [31:0] tmp1_fu_343_p2;
reg   [31:0] tmp1_reg_674;
wire   [31:0] tmp_4_mid2_v_fu_348_p1;
reg   [31:0] tmp_4_mid2_v_reg_679;
wire    ap_CS_fsm_state11;
wire   [31:0] tmp_9_fu_356_p2;
reg   [31:0] tmp_9_reg_685;
reg    ap_sig_ioackin_mem_ARREADY;
wire   [31:0] grp_fu_351_p2;
reg   [31:0] tmp_6_mid2_v_reg_696;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_6_mid2_fu_374_p2;
reg   [31:0] tmp_6_mid2_reg_701;
wire    ap_CS_fsm_state18;
reg   [31:0] output_element_reg_706;
wire   [31:0] grp_fu_366_p2;
reg   [31:0] tmp_4_mid2_reg_711;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_370_p2;
reg   [31:0] tmp_s_reg_716;
wire   [31:0] i_cast_fu_378_p1;
reg   [31:0] i_cast_reg_721;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state21_pp0_stage0_iter0;
wire    ap_block_state33_pp0_stage0_iter1;
wire    ap_block_state45_pp0_stage0_iter2;
wire    ap_block_state57_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_flag00011001;
reg   [31:0] ap_reg_pp0_iter1_i_cast_reg_721;
wire   [0:0] tmp_5_fu_382_p2;
reg   [0:0] ap_reg_pp0_iter2_tmp_5_reg_726;
reg   [0:0] ap_reg_pp0_iter3_tmp_5_reg_726;
wire   [30:0] i_1_fu_387_p2;
reg   [30:0] i_1_reg_730;
wire   [31:0] tmp4_fu_393_p2;
reg   [31:0] tmp4_reg_735;
wire   [31:0] tmp3_fu_398_p2;
reg   [31:0] tmp3_reg_740;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state22_pp0_stage1_iter0;
wire    ap_block_state34_pp0_stage1_iter1;
wire    ap_block_state46_pp0_stage1_iter2;
wire    ap_block_state58_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_flag00011001;
wire   [31:0] tmp_10_fu_402_p2;
reg   [31:0] tmp_10_reg_745;
wire    ap_block_state23_pp0_stage2_iter0;
wire    ap_block_state35_pp0_stage2_iter1;
reg    ap_predicate_op211_readreq_state35;
reg    ap_block_state35_io;
wire    ap_block_state47_pp0_stage2_iter2;
wire    ap_block_state59_pp0_stage2_iter3;
reg    ap_block_pp0_stage2_flag00011001;
wire    ap_block_state24_pp0_stage3_iter0;
reg    ap_block_state24_io;
wire    ap_block_state36_pp0_stage3_iter1;
wire    ap_block_state48_pp0_stage3_iter2;
wire    ap_block_state60_pp0_stage3_iter3;
reg    ap_block_pp0_stage3_flag00011001;
reg   [31:0] input_element_reg_756;
reg    ap_block_state31_pp0_stage10_iter0;
wire    ap_block_state43_pp0_stage10_iter1;
wire    ap_block_state55_pp0_stage10_iter2;
wire    ap_block_state67_pp0_stage10_iter3;
reg    ap_block_pp0_stage10_flag00011001;
reg   [31:0] ap_reg_pp0_iter1_input_element_reg_756;
wire   [0:0] notlhs8_fu_429_p2;
reg   [0:0] notlhs8_reg_763;
wire   [0:0] notrhs9_fu_435_p2;
reg   [0:0] notrhs9_reg_768;
reg   [0:0] ap_reg_pp0_iter2_tmp_15_reg_773;
reg   [0:0] ap_reg_pp0_iter3_tmp_15_reg_773;
reg   [31:0] weight_element_reg_783;
wire    ap_block_state30_pp0_stage9_iter0;
reg    ap_predicate_op218_read_state42;
reg    ap_block_state42_pp0_stage9_iter1;
wire    ap_block_state54_pp0_stage9_iter2;
wire    ap_block_state66_pp0_stage9_iter3;
reg    ap_block_pp0_stage9_flag00011001;
wire   [0:0] notlhs1_fu_484_p2;
reg   [0:0] notlhs1_reg_790;
wire   [0:0] notrhs1_fu_490_p2;
reg   [0:0] notrhs1_reg_795;
wire   [0:0] grp_fu_224_p2;
reg   [0:0] tmp_21_reg_800;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] tmp_26_fu_500_p2;
reg   [0:0] tmp_26_reg_805;
reg   [0:0] ap_reg_pp0_iter3_tmp_26_reg_805;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] tmp_24_reg_809;
wire   [0:0] notlhs_fu_523_p2;
reg   [0:0] notlhs_reg_814;
wire    ap_CS_fsm_state71;
wire   [0:0] notrhs_fu_529_p2;
reg   [0:0] notrhs_reg_819;
reg   [0:0] tmp_30_reg_824;
wire   [31:0] tmp_22_fu_544_p3;
reg   [31:0] tmp_22_reg_829;
reg    ap_sig_ioackin_mem_AWREADY;
wire   [30:0] o_op_fu_552_p2;
reg   [30:0] o_op_reg_839;
reg    ap_block_state78;
wire   [30:0] o_1_fu_558_p3;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state32_pp0_stage11_iter0;
wire    ap_block_state44_pp0_stage11_iter1;
wire    ap_block_state56_pp0_stage11_iter2;
reg    ap_block_pp0_stage11_flag00011011;
reg    ap_block_pp0_stage10_flag00011011;
reg    ap_condition_pp0_exit_iter2_state55;
reg    ap_enable_reg_pp0_iter3;
reg   [63:0] indvar_flatten_reg_141;
reg   [30:0] o_reg_153;
reg   [30:0] b_reg_165;
reg   [30:0] i_phi_fu_181_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [31:0] tmp_8_phi_fu_192_p4;
reg   [31:0] tmp_25_phi_fu_203_p6;
wire   [31:0] ap_phi_precharge_reg_pp0_iter2_tmp_25_reg_199;
reg   [31:0] ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199;
wire    ap_block_pp0_stage11_flag00011001;
wire   [31:0] grp_fu_214_p2;
wire   [31:0] tmp_16_fu_455_p2;
reg    ap_reg_ioackin_mem_ARREADY;
wire    ap_block_pp0_stage3_flag00001001;
wire    ap_block_pp0_stage2_flag00001001;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
reg   [31:0] grp_fu_224_p0;
wire    ap_block_pp0_stage11_flag00000000;
wire  signed [31:0] cast1_fu_275_p0;
wire   [31:0] grp_fu_279_p0;
wire   [31:0] grp_fu_279_p1;
wire   [31:0] o_cast_fu_301_p1;
wire   [30:0] grp_fu_351_p0;
wire   [30:0] grp_fu_366_p0;
wire    ap_CS_fsm_state14;
wire   [30:0] grp_fu_370_p0;
wire    ap_block_pp0_stage1_flag00000000;
wire   [31:0] input_element_to_int_fu_412_p1;
wire   [7:0] tmp_11_fu_415_p4;
wire   [22:0] tmp_12_fu_425_p1;
wire   [0:0] tmp_13_fu_441_p2;
wire   [31:0] tmp5_fu_451_p2;
wire   [31:0] weight_element_to_in_fu_467_p1;
wire   [7:0] tmp_17_fu_470_p4;
wire   [22:0] tmp_18_fu_480_p1;
wire   [0:0] tmp_19_fu_496_p2;
wire   [31:0] tmp_10_to_int_fu_505_p1;
wire   [7:0] tmp_27_fu_509_p4;
wire   [22:0] tmp_28_fu_519_p1;
wire   [0:0] tmp_29_fu_535_p2;
wire   [0:0] tmp_31_fu_539_p2;
reg    grp_fu_214_ce;
wire    ap_block_state25_pp0_stage4_iter0;
wire    ap_block_state37_pp0_stage4_iter1;
wire    ap_block_state49_pp0_stage4_iter2;
wire    ap_block_state61_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_flag00011001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state26_pp0_stage5_iter0;
wire    ap_block_state38_pp0_stage5_iter1;
wire    ap_block_state50_pp0_stage5_iter2;
wire    ap_block_state62_pp0_stage5_iter3;
wire    ap_block_pp0_stage5_flag00011001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state27_pp0_stage6_iter0;
wire    ap_block_state39_pp0_stage6_iter1;
wire    ap_block_state51_pp0_stage6_iter2;
wire    ap_block_state63_pp0_stage6_iter3;
wire    ap_block_pp0_stage6_flag00011001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state28_pp0_stage7_iter0;
wire    ap_block_state40_pp0_stage7_iter1;
wire    ap_block_state52_pp0_stage7_iter2;
wire    ap_block_state64_pp0_stage7_iter3;
wire    ap_block_pp0_stage7_flag00011001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state29_pp0_stage8_iter0;
wire    ap_block_state41_pp0_stage8_iter1;
wire    ap_block_state53_pp0_stage8_iter2;
wire    ap_block_state65_pp0_stage8_iter3;
wire    ap_block_pp0_stage8_flag00011001;
wire    ap_CS_fsm_pp0_stage8;
reg    grp_fu_220_ce;
reg    grp_fu_224_ce;
reg    ap_predicate_op219_fcmp_state43;
reg    ap_predicate_op227_fcmp_state46;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
reg   [4:0] grp_fu_224_opcode;
wire    ap_block_pp0_stage11_flag00000001;
reg    ap_block_pp0_stage10_flag00000001;
reg    grp_fu_245_ce;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_fu_279_ce;
reg    grp_fu_315_ce;
reg    grp_fu_351_ce;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    grp_fu_366_ce;
reg    grp_fu_370_ce;
reg   [50:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_block_pp0_stage1_flag00011011;
reg    ap_block_pp0_stage2_flag00011011;
reg    ap_block_pp0_stage3_flag00011011;
reg    ap_block_pp0_stage4_flag00011011;
reg    ap_block_pp0_stage5_flag00011011;
reg    ap_block_pp0_stage6_flag00011011;
reg    ap_block_pp0_stage7_flag00011011;
reg    ap_block_pp0_stage8_flag00011011;
reg    ap_block_pp0_stage9_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_279_p00;
wire   [63:0] grp_fu_279_p10;
wire   [31:0] grp_fu_351_p00;
reg    ap_condition_1526;
reg    ap_condition_1531;
reg    ap_condition_1535;
reg    ap_condition_1539;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

fc_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
fc_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(ap_ce),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .batch_size(batch_size),
    .num_inputs(num_inputs),
    .num_outputs(num_outputs),
    .enable_relu(enable_relu)
);

fc_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
fc_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(ap_ce),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(reg_234),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(mem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

fc_layer_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fadd_32nbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_phi_fu_192_p4),
    .din1(tmp_24_reg_809),
    .ce(grp_fu_214_ce),
    .dout(grp_fu_214_p2)
);

fc_layer_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fmul_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(ap_reg_pp0_iter1_input_element_reg_756),
    .din1(weight_element_reg_783),
    .ce(grp_fu_220_ce),
    .dout(grp_fu_220_p2)
);

fc_layer_fcmp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fc_layer_fcmp_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_224_p0),
    .din1(32'd0),
    .ce(grp_fu_224_ce),
    .opcode(grp_fu_224_opcode),
    .dout(grp_fu_224_p2)
);

fc_layer_mul_32s_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_32s_eOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(num_outputs),
    .din1(num_inputs),
    .ce(grp_fu_245_ce),
    .dout(grp_fu_245_p2)
);

fc_layer_mul_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fc_layer_mul_32nsfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_279_p0),
    .din1(grp_fu_279_p1),
    .ce(grp_fu_279_ce),
    .dout(grp_fu_279_p2)
);

fc_layer_add_64nsg8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fc_layer_add_64nsg8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(indvar_flatten_reg_141),
    .din1(64'd1),
    .ce(grp_fu_315_ce),
    .dout(grp_fu_315_p2)
);

fc_layer_mul_31nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_31nshbi_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_351_p0),
    .din1(num_outputs_read_reg_569),
    .ce(grp_fu_351_ce),
    .dout(grp_fu_351_p2)
);

fc_layer_mul_31nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_31nshbi_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_366_p0),
    .din1(num_inputs_read_reg_577),
    .ce(grp_fu_366_ce),
    .dout(grp_fu_366_p2)
);

fc_layer_mul_31nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_31nshbi_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_370_p0),
    .din1(num_inputs_read_reg_577),
    .ce(grp_fu_370_ce),
    .dout(grp_fu_370_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        if ((1'b1 == ap_ce)) begin
            ap_CS_fsm <= ap_NS_fsm;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0) & (tmp_5_reg_726 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter2_state55)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter2_state55) & (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state12) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (ap_ce == 1'b1) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_ce == 1'b1) & (1'b1 == ap_predicate_op211_readreq_state35) & (ap_block_pp0_stage2_flag00011001 == 1'b0)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state12) & (ap_ce == 1'b1) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (ap_ce == 1'b1) & (1'b1 == mem_ARREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_ce == 1'b1) & (1'b1 == ap_predicate_op211_readreq_state35) & (1'b1 == mem_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state72) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state79) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state72) & (ap_ce == 1'b1) & (1'b1 == mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state79) & (ap_ce == 1'b1) & (1'b1 == mem_AWREADY)))) begin
            ap_reg_ioackin_mem_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state73) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state80) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_WREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state73) & (ap_ce == 1'b1) & (1'b1 == mem_WREADY)) | ((1'b1 == ap_CS_fsm_state80) & (ap_ce == 1'b1) & (1'b1 == mem_WREADY)))) begin
            ap_reg_ioackin_mem_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_ce == 1'b1) & (1'd1 == ap_reg_pp0_iter2_tmp_5_reg_726) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_15_reg_773)) | ((ap_ce == 1'b1) & (1'd1 == ap_reg_pp0_iter2_tmp_5_reg_726) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter2_tmp_15_reg_773) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0) & (1'd1 == tmp_26_reg_805)))) begin
        ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199 <= tmp_8_reg_188;
    end else if (((ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199 <= ap_phi_precharge_reg_pp0_iter2_tmp_25_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ce == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state86)) begin
            b_reg_165 <= tmp_4_mid2_v_v_reg_662;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            b_reg_165 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ce == 1'b1)) begin
        if ((ap_condition_1526 == 1'b1)) begin
            i_reg_177 <= i_1_reg_730;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            i_reg_177 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ce == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state86)) begin
            indvar_flatten_reg_141 <= indvar_flatten_next_reg_647;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            indvar_flatten_reg_141 <= 64'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ce == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state86)) begin
            o_reg_153 <= o_1_fu_558_p3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            o_reg_153 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_ce == 1'b1)) begin
        if ((ap_condition_1539 == 1'b1)) begin
            tmp_8_reg_188 <= tmp_25_phi_fu_203_p6;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            tmp_8_reg_188 <= output_element_reg_706;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_i_cast_reg_721[30 : 0] <= i_cast_reg_721[30 : 0];
        ap_reg_pp0_iter1_tmp_5_reg_726 <= tmp_5_reg_726;
        ap_reg_pp0_iter2_tmp_5_reg_726 <= ap_reg_pp0_iter1_tmp_5_reg_726;
        ap_reg_pp0_iter3_tmp_5_reg_726 <= ap_reg_pp0_iter2_tmp_5_reg_726;
        i_cast_reg_721[30 : 0] <= i_cast_fu_378_p1[30 : 0];
        tmp_5_reg_726 <= tmp_5_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_ce == 1'b1) & (ap_block_pp0_stage10_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_input_element_reg_756 <= input_element_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_ce == 1'b1) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter2_tmp_15_reg_773 <= tmp_15_reg_773;
        ap_reg_pp0_iter3_tmp_15_reg_773 <= ap_reg_pp0_iter2_tmp_15_reg_773;
        ap_reg_pp0_iter3_tmp_26_reg_805 <= tmp_26_reg_805;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_flatten_reg_643) & (1'd0 == tmp_7_reg_636))) begin
        b_s_reg_652 <= b_s_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        bound_reg_631 <= grp_fu_279_p2;
        num_weights_reg_609 <= grp_fu_245_p2;
        tmp2_reg_626 <= tmp2_fu_296_p2;
        tmp_3_reg_615[29 : 0] <= tmp_3_fu_290_p1[29 : 0];
        tmp_4_reg_621[29 : 0] <= tmp_4_fu_293_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_ce == 1'b1) & (ap_start == 1'b1))) begin
        enable_relu_read_reg_564 <= enable_relu;
        num_inputs_read_reg_577 <= num_inputs;
        num_outputs_read_reg_569 <= num_outputs;
        tmp_2_reg_590 <= {{output_offset[31:2]}};
        tmp_reg_585 <= {{input_offset[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        exitcond_flatten_reg_643 <= exitcond_flatten_fu_310_p2;
        tmp_7_reg_636 <= tmp_7_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_1_reg_730 <= i_1_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        indvar_flatten_next_reg_647 <= grp_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_ce == 1'b1) & (ap_block_pp0_stage10_flag00011001 == 1'b0))) begin
        input_element_reg_756 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_15_reg_773) & (ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_5_reg_726))) begin
        notlhs1_reg_790 <= notlhs1_fu_484_p2;
        notrhs1_reg_795 <= notrhs1_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_reg_pp0_iter1_tmp_5_reg_726) & (ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        notlhs8_reg_763 <= notlhs8_fu_429_p2;
        notrhs9_reg_768 <= notrhs9_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state71))) begin
        notlhs_reg_814 <= notlhs_fu_523_p2;
        notrhs_reg_819 <= notrhs_fu_529_p2;
        tmp_30_reg_824 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        o_cast_mid2_cast_reg_668[30 : 0] <= o_cast_mid2_cast_fu_340_p1[30 : 0];
        tmp1_reg_674 <= tmp1_fu_343_p2;
        tmp_4_mid2_v_v_reg_662 <= tmp_4_mid2_v_v_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond_flatten_reg_643))) begin
        o_cast_mid2_reg_657 <= o_cast_mid2_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (ap_ce == 1'b1) & ~((1'd0 == tmp_1_reg_605) & (1'b0 == mem_BVALID)) & (1'd1 == tmp_7_reg_636))) begin
        o_op_reg_839 <= o_op_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1) & (mem_RVALID == 1'b1))) begin
        output_element_reg_706 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd0 == tmp_1_reg_605) & (1'b1 == ap_CS_fsm_state68) & (ap_ce == 1'b1)) | ((1'b1 == ap_CS_fsm_state68) & (ap_ce == 1'b1) & (1'd1 == tmp_1_reg_605)))) begin
        reg_234 <= grp_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_reg_726 == 1'd1) & (ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp3_reg_740 <= tmp3_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd1 == tmp_5_fu_382_p2))) begin
        tmp4_reg_735 <= tmp4_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_reg_726 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_ce == 1'b1) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp_10_reg_745 <= tmp_10_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == ap_reg_pp0_iter1_tmp_5_reg_726) & (ap_ce == 1'b1) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp_15_reg_773 <= tmp_15_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_605 <= tmp_1_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_15_reg_773) & (ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_5_reg_726) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        tmp_21_reg_800 <= grp_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
        tmp_22_reg_829 <= tmp_22_fu_544_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_ce == 1'b1) & (ap_block_pp0_stage9_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_5_reg_726) & (1'd0 == ap_reg_pp0_iter2_tmp_15_reg_773) & (1'd0 == tmp_26_reg_805))) begin
        tmp_24_reg_809 <= grp_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'd0 == tmp_15_reg_773) & (ap_ce == 1'b1) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_5_reg_726))) begin
        tmp_26_reg_805 <= tmp_26_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
        tmp_4_mid2_reg_711 <= grp_fu_366_p2;
        tmp_s_reg_716 <= grp_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_4_mid2_v_reg_679[30 : 0] <= tmp_4_mid2_v_fu_348_p1[30 : 0];
        tmp_9_reg_685 <= tmp_9_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        tmp_6_mid2_reg_701 <= tmp_6_mid2_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_6_mid2_v_reg_696 <= grp_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_ce == 1'b1) & (1'b1 == ap_predicate_op218_read_state42) & (ap_block_pp0_stage9_flag00011001 == 1'b0))) begin
        weight_element_reg_783 <= mem_RDATA;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_condition_pp0_exit_iter2_state55 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state55 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_flatten_reg_643))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_flatten_reg_643))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_AWREADY)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0))))) begin
        grp_fu_214_ce = 1'b1;
    end else begin
        grp_fu_214_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0))))) begin
        grp_fu_220_ce = 1'b1;
    end else begin
        grp_fu_220_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state68) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state71) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state70)))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == tmp_1_reg_605) & (1'b1 == ap_CS_fsm_state68))) begin
        grp_fu_224_opcode = 5'd2;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_predicate_op219_fcmp_state43) & (ap_block_pp0_stage10_flag00000001 == 1'b0)))) begin
        grp_fu_224_opcode = 5'd1;
    end else begin
        grp_fu_224_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_224_p0 = tmp_8_reg_188;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        grp_fu_224_p0 = weight_element_reg_783;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0))) begin
        grp_fu_224_p0 = input_element_reg_756;
    end else begin
        grp_fu_224_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_245_ce = 1'b1;
    end else begin
        grp_fu_245_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_279_ce = 1'b1;
    end else begin
        grp_fu_279_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9)))) begin
        grp_fu_315_ce = 1'b1;
    end else begin
        grp_fu_315_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state12) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_351_ce = 1'b1;
    end else begin
        grp_fu_351_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state19) & (mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_366_ce = 1'b1;
    end else begin
        grp_fu_366_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & ((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state19) & (mem_RVALID == 1'b1)) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16)))) begin
        grp_fu_370_ce = 1'b1;
    end else begin
        grp_fu_370_ce = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_reg_726 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_181_p4 = i_1_reg_730;
    end else begin
        i_phi_fu_181_p4 = i_reg_177;
    end
end

always @ (*) begin
    if (((ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_ARREADY))) begin
        if ((ap_condition_1535 == 1'b1)) begin
            mem_ARADDR = tmp_16_fu_455_p2;
        end else if ((ap_condition_1531 == 1'b1)) begin
            mem_ARADDR = tmp_10_reg_745;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            mem_ARADDR = tmp_9_reg_685;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_ARREADY) & (ap_block_pp0_stage3_flag00001001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_ce == 1'b1) & (1'b1 == ap_predicate_op211_readreq_state35) & (1'b0 == ap_reg_ioackin_mem_ARREADY) & (ap_block_pp0_stage2_flag00001001 == 1'b0)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state72) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state79) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_AWREADY)))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state78) & (1'd0 == tmp_1_reg_605) & (ap_ce == 1'b1) & ~((1'd0 == tmp_1_reg_605) & (1'b0 == mem_BVALID))) | ((1'b1 == ap_CS_fsm_state85) & (ap_ce == 1'b1) & (mem_BVALID == 1'b1)))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_ce == 1'b1) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_ce == 1'b1) & (1'b1 == ap_predicate_op218_read_state42) & (ap_block_pp0_stage9_flag00011001 == 1'b0)))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_WREADY))) begin
        if ((1'b1 == ap_CS_fsm_state80)) begin
            mem_WDATA = tmp_8_reg_188;
        end else if ((1'b1 == ap_CS_fsm_state73)) begin
            mem_WDATA = tmp_22_reg_829;
        end else begin
            mem_WDATA = 'bx;
        end
    end else begin
        mem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state73) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_WREADY)) | ((1'b1 == ap_CS_fsm_state80) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_mem_WREADY)))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage3_flag00000000 == 1'b0) & (tmp_5_reg_726 == 1'd1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_5_reg_726) & (tmp_15_fu_445_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state12))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state79))) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state78) & (1'd0 == tmp_1_reg_605)) | (1'b1 == ap_CS_fsm_state85))) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_tmp_5_reg_726) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0) & (1'd0 == tmp_15_reg_773)) | (1'b1 == ap_CS_fsm_state19))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state80))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter3_tmp_5_reg_726) & (1'd0 == ap_reg_pp0_iter3_tmp_15_reg_773) & (1'd0 == ap_reg_pp0_iter3_tmp_26_reg_805))) begin
        tmp_25_phi_fu_203_p6 = grp_fu_214_p2;
    end else begin
        tmp_25_phi_fu_203_p6 = ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter3_tmp_5_reg_726))) begin
        tmp_8_phi_fu_192_p4 = tmp_25_phi_fu_203_p6;
    end else begin
        tmp_8_phi_fu_192_p4 = tmp_8_reg_188;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_ce == 1'b1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond_flatten_reg_643))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if (((ap_block_pp0_stage10_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage10_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage10_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (ap_ce == 1'b1) & (1'd1 == tmp_1_reg_605))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (ap_ce == 1'b1) & ~((1'd0 == tmp_1_reg_605) & (1'b0 == mem_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((1'b1 == ap_CS_fsm_state79) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((1'b1 == ap_CS_fsm_state80) & (ap_ce == 1'b1) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            if (((1'b1 == ap_CS_fsm_state85) & (ap_ce == 1'b1) & (mem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage10_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_flag00000001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage10_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (1'b0 == mem_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage10_flag00011011 = ((ap_ce == 1'b0) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (1'b0 == mem_RVALID)));
end

assign ap_block_pp0_stage11_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00000001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state35_io));
end

always @ (*) begin
    ap_block_pp0_stage2_flag00011011 = ((ap_ce == 1'b0) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state35_io)));
end

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state24_io));
end

always @ (*) begin
    ap_block_pp0_stage3_flag00011011 = ((ap_ce == 1'b0) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state24_io)));
end

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage8_flag00011001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_flag00011011 = (ap_ce == 1'b0);
end

assign ap_block_pp0_stage9_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == mem_RVALID) & (1'b1 == ap_predicate_op218_read_state42));
end

always @ (*) begin
    ap_block_pp0_stage9_flag00011011 = ((ap_ce == 1'b0) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == mem_RVALID) & (1'b1 == ap_predicate_op218_read_state42)));
end

assign ap_block_state21_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((tmp_5_reg_726 == 1'd1) & (1'b0 == ap_sig_ioackin_mem_ARREADY));
end

assign ap_block_state24_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state31_pp0_stage10_iter0 = ((tmp_5_reg_726 == 1'd1) & (1'b0 == mem_RVALID));
end

assign ap_block_state32_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((1'b0 == ap_sig_ioackin_mem_ARREADY) & (1'b1 == ap_predicate_op211_readreq_state35));
end

assign ap_block_state35_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_pp0_stage9_iter1 = ((1'b0 == mem_RVALID) & (1'b1 == ap_predicate_op218_read_state42));
end

assign ap_block_state43_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage11_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage10_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state78 = ((1'd0 == tmp_1_reg_605) & (1'b0 == mem_BVALID));
end

always @ (*) begin
    ap_condition_1526 = ((tmp_5_reg_726 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0));
end

always @ (*) begin
    ap_condition_1531 = ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_5_reg_726 == 1'd1) & (ap_block_pp0_stage3_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_1535 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_predicate_op211_readreq_state35) & (ap_block_pp0_stage2_flag00001001 == 1'b0));
end

always @ (*) begin
    ap_condition_1539 = ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter3_tmp_5_reg_726));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_precharge_reg_pp0_iter2_tmp_25_reg_199 = 'bx;

always @ (*) begin
    ap_predicate_op211_readreq_state35 = ((1'd1 == ap_reg_pp0_iter1_tmp_5_reg_726) & (tmp_15_fu_445_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op218_read_state42 = ((1'd1 == ap_reg_pp0_iter1_tmp_5_reg_726) & (1'd0 == tmp_15_reg_773));
end

always @ (*) begin
    ap_predicate_op219_fcmp_state43 = ((1'd1 == ap_reg_pp0_iter1_tmp_5_reg_726) & (1'd0 == tmp_15_reg_773));
end

always @ (*) begin
    ap_predicate_op227_fcmp_state46 = ((1'd0 == tmp_15_reg_773) & (1'd1 == ap_reg_pp0_iter2_tmp_5_reg_726));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_s_fu_321_p2 = (b_reg_165 + 31'd1);

assign cast1_fu_275_p0 = num_outputs;

assign exitcond_flatten_fu_310_p2 = ((indvar_flatten_reg_141 == bound_reg_631) ? 1'b1 : 1'b0);

assign grp_fu_230_p2 = (o_cast_mid2_cast_reg_668 + tmp_6_mid2_reg_701);

assign grp_fu_279_p0 = grp_fu_279_p00;

assign grp_fu_279_p00 = $unsigned(cast1_fu_275_p0);

assign grp_fu_279_p1 = grp_fu_279_p10;

assign grp_fu_279_p10 = batch_size;

assign grp_fu_351_p0 = grp_fu_351_p00;

assign grp_fu_351_p00 = tmp_4_mid2_v_v_reg_662;

assign grp_fu_366_p0 = tmp_4_mid2_v_reg_679;

assign grp_fu_370_p0 = o_cast_mid2_cast_reg_668;

assign i_1_fu_387_p2 = (i_phi_fu_181_p4 + 31'd1);

assign i_cast_fu_378_p1 = i_phi_fu_181_p4;

assign input_element_to_int_fu_412_p1 = input_element_reg_756;

assign notlhs1_fu_484_p2 = ((tmp_17_fu_470_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs8_fu_429_p2 = ((tmp_11_fu_415_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_523_p2 = ((tmp_27_fu_509_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_490_p2 = ((tmp_18_fu_480_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs9_fu_435_p2 = ((tmp_12_fu_425_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_529_p2 = ((tmp_28_fu_519_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_1_fu_558_p3 = ((tmp_7_reg_636[0:0] === 1'b1) ? o_op_reg_839 : 31'd1);

assign o_cast_fu_301_p1 = o_reg_153;

assign o_cast_mid2_cast_fu_340_p1 = o_cast_mid2_reg_657;

assign o_cast_mid2_fu_327_p3 = ((tmp_7_reg_636[0:0] === 1'b1) ? o_reg_153 : 31'd0);

assign o_op_fu_552_p2 = (o_reg_153 + 31'd1);

assign tmp1_fu_343_p2 = (tmp_3_reg_615 + o_cast_mid2_cast_fu_340_p1);

assign tmp2_fu_296_p2 = ($signed(tmp_3_fu_290_p1) + $signed(num_outputs_read_reg_569));

assign tmp3_fu_398_p2 = (tmp4_reg_735 + num_weights_reg_609);

assign tmp4_fu_393_p2 = (tmp_4_mid2_reg_711 + i_cast_fu_378_p1);

assign tmp5_fu_451_p2 = (tmp_3_reg_615 + ap_reg_pp0_iter1_i_cast_reg_721);

assign tmp_10_fu_402_p2 = (tmp3_reg_740 + tmp2_reg_626);

assign tmp_10_to_int_fu_505_p1 = tmp_8_reg_188;

assign tmp_11_fu_415_p4 = {{input_element_to_int_fu_412_p1[30:23]}};

assign tmp_12_fu_425_p1 = input_element_to_int_fu_412_p1[22:0];

assign tmp_13_fu_441_p2 = (notrhs9_reg_768 | notlhs8_reg_763);

assign tmp_15_fu_445_p2 = (tmp_13_fu_441_p2 & grp_fu_224_p2);

assign tmp_16_fu_455_p2 = (tmp5_fu_451_p2 + tmp_s_reg_716);

assign tmp_17_fu_470_p4 = {{weight_element_to_in_fu_467_p1[30:23]}};

assign tmp_18_fu_480_p1 = weight_element_to_in_fu_467_p1[22:0];

assign tmp_19_fu_496_p2 = (notrhs1_reg_795 | notlhs1_reg_790);

assign tmp_1_fu_285_p2 = ((enable_relu_read_reg_564 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_22_fu_544_p3 = ((tmp_31_fu_539_p2[0:0] === 1'b1) ? tmp_8_reg_188 : 32'd0);

assign tmp_26_fu_500_p2 = (tmp_19_fu_496_p2 & tmp_21_reg_800);

assign tmp_27_fu_509_p4 = {{tmp_10_to_int_fu_505_p1[30:23]}};

assign tmp_28_fu_519_p1 = tmp_10_to_int_fu_505_p1[22:0];

assign tmp_29_fu_535_p2 = (notrhs_reg_819 | notlhs_reg_814);

assign tmp_31_fu_539_p2 = (tmp_29_fu_535_p2 & tmp_30_reg_824);

assign tmp_3_fu_290_p1 = tmp_reg_585;

assign tmp_4_fu_293_p1 = tmp_2_reg_590;

assign tmp_4_mid2_v_fu_348_p1 = tmp_4_mid2_v_v_reg_662;

assign tmp_4_mid2_v_v_fu_334_p3 = ((tmp_7_reg_636[0:0] === 1'b1) ? b_reg_165 : b_s_reg_652);

assign tmp_5_fu_382_p2 = (($signed(i_cast_fu_378_p1) < $signed(num_inputs_read_reg_577)) ? 1'b1 : 1'b0);

assign tmp_6_mid2_fu_374_p2 = (tmp_6_mid2_v_reg_696 + tmp_4_reg_621);

assign tmp_7_fu_305_p2 = (($signed(o_cast_fu_301_p1) < $signed(num_outputs_read_reg_569)) ? 1'b1 : 1'b0);

assign tmp_9_fu_356_p2 = (tmp1_reg_674 + num_weights_reg_609);

assign weight_element_to_in_fu_467_p1 = weight_element_reg_783;

always @ (posedge ap_clk) begin
    tmp_3_reg_615[31:30] <= 2'b00;
    tmp_4_reg_621[31:30] <= 2'b00;
    o_cast_mid2_cast_reg_668[31] <= 1'b0;
    tmp_4_mid2_v_reg_679[31] <= 1'b0;
    i_cast_reg_721[31] <= 1'b0;
    ap_reg_pp0_iter1_i_cast_reg_721[31] <= 1'b0;
end

endmodule //fc_layer
