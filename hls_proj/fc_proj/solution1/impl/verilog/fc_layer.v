// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fc_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=9,HLS_SYN_FF=4603,HLS_SYN_LUT=2670}" *)

module fc_layer (
        ap_clk,
        ap_rst_n,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_state3 = 69'd4;
parameter    ap_ST_fsm_state4 = 69'd8;
parameter    ap_ST_fsm_state5 = 69'd16;
parameter    ap_ST_fsm_state6 = 69'd32;
parameter    ap_ST_fsm_state7 = 69'd64;
parameter    ap_ST_fsm_state8 = 69'd128;
parameter    ap_ST_fsm_state9 = 69'd256;
parameter    ap_ST_fsm_state10 = 69'd512;
parameter    ap_ST_fsm_state11 = 69'd1024;
parameter    ap_ST_fsm_state12 = 69'd2048;
parameter    ap_ST_fsm_state13 = 69'd4096;
parameter    ap_ST_fsm_state14 = 69'd8192;
parameter    ap_ST_fsm_state15 = 69'd16384;
parameter    ap_ST_fsm_state16 = 69'd32768;
parameter    ap_ST_fsm_state17 = 69'd65536;
parameter    ap_ST_fsm_state18 = 69'd131072;
parameter    ap_ST_fsm_state19 = 69'd262144;
parameter    ap_ST_fsm_state20 = 69'd524288;
parameter    ap_ST_fsm_state21 = 69'd1048576;
parameter    ap_ST_fsm_state22 = 69'd2097152;
parameter    ap_ST_fsm_state23 = 69'd4194304;
parameter    ap_ST_fsm_state24 = 69'd8388608;
parameter    ap_ST_fsm_state25 = 69'd16777216;
parameter    ap_ST_fsm_state26 = 69'd33554432;
parameter    ap_ST_fsm_state27 = 69'd67108864;
parameter    ap_ST_fsm_state28 = 69'd134217728;
parameter    ap_ST_fsm_state29 = 69'd268435456;
parameter    ap_ST_fsm_state30 = 69'd536870912;
parameter    ap_ST_fsm_state31 = 69'd1073741824;
parameter    ap_ST_fsm_state32 = 69'd2147483648;
parameter    ap_ST_fsm_state33 = 69'd4294967296;
parameter    ap_ST_fsm_state34 = 69'd8589934592;
parameter    ap_ST_fsm_state35 = 69'd17179869184;
parameter    ap_ST_fsm_state36 = 69'd34359738368;
parameter    ap_ST_fsm_state37 = 69'd68719476736;
parameter    ap_ST_fsm_state38 = 69'd137438953472;
parameter    ap_ST_fsm_state39 = 69'd274877906944;
parameter    ap_ST_fsm_state40 = 69'd549755813888;
parameter    ap_ST_fsm_state41 = 69'd1099511627776;
parameter    ap_ST_fsm_state42 = 69'd2199023255552;
parameter    ap_ST_fsm_state43 = 69'd4398046511104;
parameter    ap_ST_fsm_state44 = 69'd8796093022208;
parameter    ap_ST_fsm_state45 = 69'd17592186044416;
parameter    ap_ST_fsm_state46 = 69'd35184372088832;
parameter    ap_ST_fsm_state47 = 69'd70368744177664;
parameter    ap_ST_fsm_state48 = 69'd140737488355328;
parameter    ap_ST_fsm_state49 = 69'd281474976710656;
parameter    ap_ST_fsm_state50 = 69'd562949953421312;
parameter    ap_ST_fsm_state51 = 69'd1125899906842624;
parameter    ap_ST_fsm_state52 = 69'd2251799813685248;
parameter    ap_ST_fsm_state53 = 69'd4503599627370496;
parameter    ap_ST_fsm_state54 = 69'd9007199254740992;
parameter    ap_ST_fsm_state55 = 69'd18014398509481984;
parameter    ap_ST_fsm_state56 = 69'd36028797018963968;
parameter    ap_ST_fsm_state57 = 69'd72057594037927936;
parameter    ap_ST_fsm_state58 = 69'd144115188075855872;
parameter    ap_ST_fsm_state59 = 69'd288230376151711744;
parameter    ap_ST_fsm_state60 = 69'd576460752303423488;
parameter    ap_ST_fsm_state61 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 69'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 69'd295147905179352825856;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_TARGET_ADDR = 0;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_offset;
wire   [31:0] output_offset;
wire   [31:0] batch_size;
wire  signed [31:0] num_inputs;
wire  signed [31:0] num_outputs;
wire   [31:0] enable_relu;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_state11;
reg    mem_blk_n_R;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state31;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_state56;
reg    mem_blk_n_W;
wire    ap_CS_fsm_state57;
reg    mem_blk_n_B;
wire    ap_CS_fsm_state62;
reg   [0:0] tmp_1_reg_477;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state69;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg    mem_WVALID;
wire    mem_WREADY;
reg   [31:0] mem_WDATA;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [31:0] mem_ARADDR;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [31:0] mem_RDATA;
wire    mem_RLAST;
wire   [0:0] mem_RID;
wire   [0:0] mem_RUSER;
wire   [1:0] mem_RRESP;
wire    mem_BVALID;
reg    mem_BREADY;
wire   [1:0] mem_BRESP;
wire   [0:0] mem_BID;
wire   [0:0] mem_BUSER;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] reg_225;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_5_fu_347_p2;
reg   [31:0] enable_relu_read_reg_441;
reg  signed [31:0] num_outputs_read_reg_446;
reg  signed [31:0] num_inputs_read_reg_454;
reg   [31:0] batch_size_read_reg_462;
reg   [29:0] tmp_reg_467;
reg   [29:0] tmp_2_reg_472;
wire   [0:0] tmp_1_fu_262_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_236_p2;
reg   [31:0] num_weights_reg_481;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_s_fu_267_p1;
reg   [31:0] tmp_s_reg_487;
wire   [31:0] tmp_4_fu_270_p1;
reg   [31:0] tmp_4_reg_493;
wire   [31:0] tmp2_fu_273_p2;
reg   [31:0] tmp2_reg_498;
wire   [31:0] next_mul4_fu_278_p2;
reg   [31:0] next_mul4_reg_503;
wire    ap_CS_fsm_state8;
wire   [31:0] next_mul2_fu_283_p2;
reg   [31:0] next_mul2_reg_508;
wire   [30:0] b_1_fu_297_p2;
reg   [30:0] b_1_reg_516;
wire   [31:0] tmp_6_fu_303_p2;
reg   [31:0] tmp_6_reg_521;
wire   [0:0] tmp_3_fu_292_p2;
wire   [31:0] next_mul_fu_308_p2;
reg   [31:0] next_mul_reg_526;
wire    ap_CS_fsm_state9;
wire   [31:0] o_cast_fu_313_p1;
reg   [31:0] o_cast_reg_531;
wire   [30:0] o_1_fu_322_p2;
reg   [30:0] o_1_reg_539;
wire   [31:0] tmp1_fu_328_p2;
reg   [31:0] tmp1_reg_544;
wire   [0:0] tmp_7_fu_317_p2;
wire   [31:0] tmp_9_fu_333_p2;
reg   [31:0] tmp_9_reg_549;
wire    ap_CS_fsm_state10;
reg    ap_sig_ioackin_mem_ARREADY;
reg   [31:0] output_element_reg_560;
wire   [30:0] i_1_fu_352_p2;
reg   [30:0] i_1_reg_568;
wire   [31:0] tmp4_fu_358_p2;
reg   [31:0] tmp4_reg_573;
wire   [31:0] tmp5_fu_364_p2;
reg   [31:0] tmp5_reg_578;
wire   [31:0] tmp3_fu_369_p2;
reg   [31:0] tmp3_reg_583;
wire    ap_CS_fsm_state21;
wire   [31:0] tmp_11_fu_373_p2;
reg   [31:0] tmp_11_reg_588;
wire   [31:0] tmp_10_fu_378_p2;
reg   [31:0] tmp_10_reg_593;
wire    ap_CS_fsm_state22;
reg   [31:0] input_element_reg_610;
reg   [31:0] weight_element_reg_615;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] tmp_12_reg_620;
wire    ap_CS_fsm_state39;
wire   [31:0] grp_fu_206_p2;
wire    ap_CS_fsm_state52;
wire   [0:0] notlhs_fu_412_p2;
reg   [0:0] notlhs_reg_630;
wire    ap_CS_fsm_state55;
wire   [0:0] notrhs_fu_418_p2;
reg   [0:0] notrhs_reg_635;
wire   [0:0] grp_fu_215_p2;
reg   [0:0] tmp_17_reg_640;
wire   [31:0] tmp_19_fu_433_p3;
reg   [31:0] tmp_19_reg_645;
reg    ap_sig_ioackin_mem_AWREADY;
reg   [30:0] b_reg_127;
reg   [31:0] phi_mul1_reg_138;
reg   [31:0] phi_mul3_reg_150;
reg   [30:0] o_reg_161;
reg    ap_block_state62;
reg   [31:0] phi_mul_reg_172;
reg   [31:0] tmp_8_reg_184;
wire    ap_CS_fsm_state19;
reg   [30:0] i_reg_195;
reg    ap_reg_ioackin_mem_ARREADY;
reg    ap_reg_ioackin_mem_AWREADY;
reg    ap_reg_ioackin_mem_WREADY;
reg    ap_sig_ioackin_mem_WREADY;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state32;
wire   [31:0] b_cast_fu_288_p1;
wire   [31:0] i_cast_fu_343_p1;
wire   [31:0] tmp_10_to_int_fu_394_p1;
wire   [7:0] tmp_14_fu_398_p4;
wire   [22:0] tmp_15_fu_408_p1;
wire   [0:0] tmp_16_fu_424_p2;
wire   [0:0] tmp_18_fu_428_p2;
reg   [68:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 69'd1;
#0 ap_reg_ioackin_mem_ARREADY = 1'b0;
#0 ap_reg_ioackin_mem_AWREADY = 1'b0;
#0 ap_reg_ioackin_mem_WREADY = 1'b0;
end

fc_layer_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
fc_layer_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_offset(input_offset),
    .output_offset(output_offset),
    .batch_size(batch_size),
    .num_inputs(num_inputs),
    .num_outputs(num_outputs),
    .enable_relu(enable_relu)
);

fc_layer_mem_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_MEM_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ))
fc_layer_mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RID(mem_RID),
    .I_RUSER(mem_RUSER),
    .I_RRESP(mem_RRESP),
    .I_RLAST(mem_RLAST),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(reg_225),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(mem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY),
    .I_BRESP(mem_BRESP),
    .I_BID(mem_BID),
    .I_BUSER(mem_BUSER)
);

fc_layer_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fadd_32nbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_reg_184),
    .din1(tmp_12_reg_620),
    .ce(1'b1),
    .dout(grp_fu_206_p2)
);

fc_layer_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_fmul_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(input_element_reg_610),
    .din1(weight_element_reg_615),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

fc_layer_fcmp_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fc_layer_fcmp_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_8_reg_184),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_215_p2)
);

fc_layer_mul_32s_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fc_layer_mul_32s_eOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(num_outputs),
    .din1(num_inputs),
    .ce(1'b1),
    .dout(grp_fu_236_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state11) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_mem_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (ap_sig_ioackin_mem_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state11) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state23) & (1'b1 == mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state24) & (1'b1 == mem_ARREADY)))) begin
            ap_reg_ioackin_mem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_AWREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state56) & (ap_sig_ioackin_mem_AWREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state63) & (ap_sig_ioackin_mem_AWREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_AWREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state56) & (1'b1 == mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state63) & (1'b1 == mem_AWREADY)))) begin
            ap_reg_ioackin_mem_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_mem_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state57) & (ap_sig_ioackin_mem_WREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state64) & (ap_sig_ioackin_mem_WREADY == 1'b1)))) begin
            ap_reg_ioackin_mem_WREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state57) & (1'b1 == mem_WREADY)) | ((1'b1 == ap_CS_fsm_state64) & (1'b1 == mem_WREADY)))) begin
            ap_reg_ioackin_mem_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_317_p2))) begin
        b_reg_127 <= b_1_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        b_reg_127 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_reg_195 <= i_1_reg_568;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i_reg_195 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_3_fu_292_p2))) begin
        o_reg_161 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state62) & ~((tmp_1_reg_477 == 1'd0) & (1'b0 == mem_BVALID)))) begin
        o_reg_161 <= o_1_reg_539;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_317_p2))) begin
        phi_mul1_reg_138 <= next_mul2_reg_508;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul1_reg_138 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_317_p2))) begin
        phi_mul3_reg_150 <= next_mul4_reg_503;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul3_reg_150 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_3_fu_292_p2))) begin
        phi_mul_reg_172 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state62) & ~((tmp_1_reg_477 == 1'd0) & (1'b0 == mem_BVALID)))) begin
        phi_mul_reg_172 <= next_mul_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        tmp_8_reg_184 <= grp_fu_206_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_8_reg_184 <= output_element_reg_560;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        b_1_reg_516 <= b_1_fu_297_p2;
        next_mul2_reg_508 <= next_mul2_fu_283_p2;
        next_mul4_reg_503 <= next_mul4_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        batch_size_read_reg_462 <= batch_size;
        enable_relu_read_reg_441 <= enable_relu;
        num_inputs_read_reg_454 <= num_inputs;
        num_outputs_read_reg_446 <= num_outputs;
        tmp_2_reg_472 <= {{output_offset[31:2]}};
        tmp_reg_467 <= {{input_offset[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_1_reg_568 <= i_1_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & (mem_RVALID == 1'b1))) begin
        input_element_reg_610 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        next_mul_reg_526 <= next_mul_fu_308_p2;
        o_1_reg_539 <= o_1_fu_322_p2;
        o_cast_reg_531[30 : 0] <= o_cast_fu_313_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        notlhs_reg_630 <= notlhs_fu_412_p2;
        notrhs_reg_635 <= notrhs_fu_418_p2;
        tmp_17_reg_640 <= grp_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        num_weights_reg_481 <= grp_fu_236_p2;
        tmp2_reg_498 <= tmp2_fu_273_p2;
        tmp_4_reg_493[29 : 0] <= tmp_4_fu_270_p1[29 : 0];
        tmp_s_reg_487[29 : 0] <= tmp_s_fu_267_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (mem_RVALID == 1'b1))) begin
        output_element_reg_560 <= mem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_1_reg_477 == 1'd0) & (1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_5_fu_347_p2)) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_5_fu_347_p2) & (tmp_1_reg_477 == 1'd1)))) begin
        reg_225 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_317_p2))) begin
        tmp1_reg_544 <= tmp1_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp3_reg_583 <= tmp3_fu_369_p2;
        tmp_11_reg_588 <= tmp_11_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (tmp_5_fu_347_p2 == 1'd1))) begin
        tmp4_reg_573 <= tmp4_fu_358_p2;
        tmp5_reg_578 <= tmp5_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_10_reg_593 <= tmp_10_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        tmp_12_reg_620 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
        tmp_19_reg_645 <= tmp_19_fu_433_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_1_reg_477 <= tmp_1_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_3_fu_292_p2))) begin
        tmp_6_reg_521 <= tmp_6_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_9_reg_549 <= tmp_9_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (mem_RVALID == 1'b1))) begin
        weight_element_reg_615 <= mem_RDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_3_fu_292_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_3_fu_292_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY;
    end else begin
        ap_sig_ioackin_mem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_AWREADY)) begin
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY;
    end else begin
        ap_sig_ioackin_mem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        ap_sig_ioackin_mem_WREADY = mem_WREADY;
    end else begin
        ap_sig_ioackin_mem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            mem_ARADDR = tmp_11_reg_588;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            mem_ARADDR = tmp_10_reg_593;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            mem_ARADDR = tmp_9_reg_549;
        end else begin
            mem_ARADDR = 'bx;
        end
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state23) & (1'b0 == ap_reg_ioackin_mem_ARREADY)) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_reg_ioackin_mem_ARREADY)))) begin
        mem_ARVALID = 1'b1;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state56) & (1'b0 == ap_reg_ioackin_mem_AWREADY)) | ((1'b1 == ap_CS_fsm_state63) & (1'b0 == ap_reg_ioackin_mem_AWREADY)))) begin
        mem_AWVALID = 1'b1;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state62) & (tmp_1_reg_477 == 1'd0) & ~((tmp_1_reg_477 == 1'd0) & (1'b0 == mem_BVALID))) | ((1'b1 == ap_CS_fsm_state69) & (mem_BVALID == 1'b1)))) begin
        mem_BREADY = 1'b1;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state18) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (mem_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (mem_RVALID == 1'b1)))) begin
        mem_RREADY = 1'b1;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_mem_WREADY)) begin
        if ((1'b1 == ap_CS_fsm_state64)) begin
            mem_WDATA = tmp_8_reg_184;
        end else if ((1'b1 == ap_CS_fsm_state57)) begin
            mem_WDATA = tmp_19_reg_645;
        end else begin
            mem_WDATA = 'bx;
        end
    end else begin
        mem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state57) & (1'b0 == ap_reg_ioackin_mem_WREADY)) | ((1'b1 == ap_CS_fsm_state64) & (1'b0 == ap_reg_ioackin_mem_WREADY)))) begin
        mem_WVALID = 1'b1;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state63))) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state62) & (tmp_1_reg_477 == 1'd0)) | (1'b1 == ap_CS_fsm_state69))) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state64))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == tmp_3_fu_292_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_317_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_5_fu_347_p2) & (tmp_1_reg_477 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else if (((tmp_1_reg_477 == 1'd0) & (1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_5_fu_347_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (ap_sig_ioackin_mem_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (mem_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            if (((1'b1 == ap_CS_fsm_state56) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (((1'b1 == ap_CS_fsm_state57) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & ~((tmp_1_reg_477 == 1'd0) & (1'b0 == mem_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (ap_sig_ioackin_mem_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == ap_CS_fsm_state64) & (ap_sig_ioackin_mem_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            if (((1'b1 == ap_CS_fsm_state69) & (mem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state62 = ((tmp_1_reg_477 == 1'd0) & (1'b0 == mem_BVALID));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_1_fu_297_p2 = (b_reg_127 + 31'd1);

assign b_cast_fu_288_p1 = b_reg_127;

assign grp_fu_221_p2 = (o_cast_reg_531 + tmp_6_reg_521);

assign i_1_fu_352_p2 = (i_reg_195 + 31'd1);

assign i_cast_fu_343_p1 = i_reg_195;

assign next_mul2_fu_283_p2 = ($signed(phi_mul1_reg_138) + $signed(num_inputs_read_reg_454));

assign next_mul4_fu_278_p2 = ($signed(phi_mul3_reg_150) + $signed(num_outputs_read_reg_446));

assign next_mul_fu_308_p2 = ($signed(phi_mul_reg_172) + $signed(num_inputs_read_reg_454));

assign notlhs_fu_412_p2 = ((tmp_14_fu_398_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_418_p2 = ((tmp_15_fu_408_p1 == 23'd0) ? 1'b1 : 1'b0);

assign o_1_fu_322_p2 = (o_reg_161 + 31'd1);

assign o_cast_fu_313_p1 = o_reg_161;

assign tmp1_fu_328_p2 = (tmp_s_reg_487 + o_cast_fu_313_p1);

assign tmp2_fu_273_p2 = ($signed(tmp_s_fu_267_p1) + $signed(num_outputs_read_reg_446));

assign tmp3_fu_369_p2 = (tmp4_reg_573 + num_weights_reg_481);

assign tmp4_fu_358_p2 = (phi_mul1_reg_138 + i_cast_fu_343_p1);

assign tmp5_fu_364_p2 = (tmp_s_reg_487 + i_cast_fu_343_p1);

assign tmp_10_fu_378_p2 = (tmp3_reg_583 + tmp2_reg_498);

assign tmp_10_to_int_fu_394_p1 = tmp_8_reg_184;

assign tmp_11_fu_373_p2 = (tmp5_reg_578 + phi_mul_reg_172);

assign tmp_14_fu_398_p4 = {{tmp_10_to_int_fu_394_p1[30:23]}};

assign tmp_15_fu_408_p1 = tmp_10_to_int_fu_394_p1[22:0];

assign tmp_16_fu_424_p2 = (notrhs_reg_635 | notlhs_reg_630);

assign tmp_18_fu_428_p2 = (tmp_16_fu_424_p2 & tmp_17_reg_640);

assign tmp_19_fu_433_p3 = ((tmp_18_fu_428_p2[0:0] === 1'b1) ? tmp_8_reg_184 : 32'd0);

assign tmp_1_fu_262_p2 = ((enable_relu_read_reg_441 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_292_p2 = (($signed(b_cast_fu_288_p1) < $signed(batch_size_read_reg_462)) ? 1'b1 : 1'b0);

assign tmp_4_fu_270_p1 = tmp_2_reg_472;

assign tmp_5_fu_347_p2 = (($signed(i_cast_fu_343_p1) < $signed(num_inputs_read_reg_454)) ? 1'b1 : 1'b0);

assign tmp_6_fu_303_p2 = (phi_mul3_reg_150 + tmp_4_reg_493);

assign tmp_7_fu_317_p2 = (($signed(o_cast_fu_313_p1) < $signed(num_outputs_read_reg_446)) ? 1'b1 : 1'b0);

assign tmp_9_fu_333_p2 = (tmp1_reg_544 + num_weights_reg_481);

assign tmp_s_fu_267_p1 = tmp_reg_467;

always @ (posedge ap_clk) begin
    tmp_s_reg_487[31:30] <= 2'b00;
    tmp_4_reg_493[31:30] <= 2'b00;
    o_cast_reg_531[31] <= 1'b0;
end

endmodule //fc_layer
