// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fc_layer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fc_layer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fc_layer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<89> fc_layer::ap_ST_fsm_state1 = "1";
const sc_lv<89> fc_layer::ap_ST_fsm_state2 = "10";
const sc_lv<89> fc_layer::ap_ST_fsm_state3 = "100";
const sc_lv<89> fc_layer::ap_ST_fsm_state4 = "1000";
const sc_lv<89> fc_layer::ap_ST_fsm_state5 = "10000";
const sc_lv<89> fc_layer::ap_ST_fsm_state6 = "100000";
const sc_lv<89> fc_layer::ap_ST_fsm_state7 = "1000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state8 = "10000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state9 = "100000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state10 = "1000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state11 = "10000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state12 = "100000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state70 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state71 = "10000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state72 = "100000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state73 = "1000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state74 = "10000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state75 = "100000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state76 = "1000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state77 = "10000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state78 = "100000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state79 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state80 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state81 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state82 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state83 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state84 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state85 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state86 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state87 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state88 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> fc_layer::ap_ST_fsm_state89 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> fc_layer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fc_layer::ap_const_lv32_A = "1010";
const sc_lv<32> fc_layer::ap_const_lv32_11 = "10001";
const sc_lv<32> fc_layer::ap_const_lv32_16 = "10110";
const sc_lv<32> fc_layer::ap_const_lv32_1D = "11101";
const sc_lv<32> fc_layer::ap_const_lv32_25 = "100101";
const sc_lv<32> fc_layer::ap_const_lv32_2C = "101100";
const sc_lv<32> fc_layer::ap_const_lv32_4B = "1001011";
const sc_lv<32> fc_layer::ap_const_lv32_4C = "1001100";
const sc_lv<32> fc_layer::ap_const_lv32_51 = "1010001";
const sc_lv<1> fc_layer::ap_const_lv1_0 = "0";
const sc_lv<32> fc_layer::ap_const_lv32_52 = "1010010";
const sc_lv<32> fc_layer::ap_const_lv32_53 = "1010011";
const sc_lv<32> fc_layer::ap_const_lv32_58 = "1011000";
const int fc_layer::C_S_AXI_DATA_WIDTH = "100000";
const int fc_layer::C_M_AXI_MEM_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int fc_layer::C_M_AXI_MEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fc_layer::C_M_AXI_MEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int fc_layer::C_M_AXI_MEM_CACHE_VALUE = "11";
const int fc_layer::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> fc_layer::ap_const_lv32_13 = "10011";
const sc_lv<1> fc_layer::ap_const_lv1_1 = "1";
const sc_lv<32> fc_layer::ap_const_lv32_1 = "1";
const sc_lv<32> fc_layer::ap_const_lv32_6 = "110";
const sc_lv<32> fc_layer::ap_const_lv32_7 = "111";
const sc_lv<32> fc_layer::ap_const_lv32_8 = "1000";
const sc_lv<32> fc_layer::ap_const_lv32_9 = "1001";
const sc_lv<32> fc_layer::ap_const_lv32_14 = "10100";
const sc_lv<32> fc_layer::ap_const_lv32_15 = "10101";
const sc_lv<32> fc_layer::ap_const_lv32_21 = "100001";
const sc_lv<32> fc_layer::ap_const_lv32_22 = "100010";
const sc_lv<32> fc_layer::ap_const_lv32_23 = "100011";
const sc_lv<32> fc_layer::ap_const_lv32_24 = "100100";
const sc_lv<32> fc_layer::ap_const_lv32_30 = "110000";
const sc_lv<32> fc_layer::ap_const_lv32_31 = "110001";
const sc_lv<32> fc_layer::ap_const_lv32_39 = "111001";
const sc_lv<32> fc_layer::ap_const_lv32_46 = "1000110";
const sc_lv<32> fc_layer::ap_const_lv32_4A = "1001010";
const sc_lv<31> fc_layer::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> fc_layer::ap_const_lv32_12 = "10010";
const sc_lv<32> fc_layer::ap_const_lv32_47 = "1000111";
const sc_lv<32> fc_layer::ap_const_lv32_32 = "110010";
const sc_lv<3> fc_layer::ap_const_lv3_0 = "000";
const sc_lv<2> fc_layer::ap_const_lv2_0 = "00";
const sc_lv<4> fc_layer::ap_const_lv4_0 = "0000";
const sc_lv<4> fc_layer::ap_const_lv4_F = "1111";
const sc_lv<32> fc_layer::ap_const_lv32_3A = "111010";
const sc_lv<32> fc_layer::ap_const_lv32_1E = "11110";
const sc_lv<32> fc_layer::ap_const_lv32_2D = "101101";
const sc_lv<32> fc_layer::ap_const_lv32_2 = "10";
const sc_lv<32> fc_layer::ap_const_lv32_1F = "11111";
const sc_lv<31> fc_layer::ap_const_lv31_1 = "1";
const sc_lv<32> fc_layer::ap_const_lv32_17 = "10111";
const sc_lv<8> fc_layer::ap_const_lv8_FF = "11111111";
const sc_lv<23> fc_layer::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> fc_layer::ap_const_lv5_2 = "10";
const sc_lv<5> fc_layer::ap_const_lv5_1 = "1";
const bool fc_layer::ap_const_boolean_1 = true;

fc_layer::fc_layer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc_layer_CTRL_BUS_s_axi_U = new fc_layer_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("fc_layer_CTRL_BUS_s_axi_U");
    fc_layer_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    fc_layer_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    fc_layer_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    fc_layer_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    fc_layer_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    fc_layer_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    fc_layer_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    fc_layer_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    fc_layer_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    fc_layer_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    fc_layer_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    fc_layer_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    fc_layer_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    fc_layer_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    fc_layer_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    fc_layer_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    fc_layer_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    fc_layer_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    fc_layer_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    fc_layer_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    fc_layer_CTRL_BUS_s_axi_U->ap_start(ap_start);
    fc_layer_CTRL_BUS_s_axi_U->interrupt(interrupt);
    fc_layer_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    fc_layer_CTRL_BUS_s_axi_U->ap_done(ap_done);
    fc_layer_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    fc_layer_CTRL_BUS_s_axi_U->input_offset(input_offset);
    fc_layer_CTRL_BUS_s_axi_U->output_offset(output_offset);
    fc_layer_CTRL_BUS_s_axi_U->batch_size(batch_size);
    fc_layer_CTRL_BUS_s_axi_U->num_inputs(num_inputs);
    fc_layer_CTRL_BUS_s_axi_U->num_outputs(num_outputs);
    fc_layer_CTRL_BUS_s_axi_U->enable_relu(enable_relu);
    fc_layer_mem_m_axi_U = new fc_layer_mem_m_axi<32,32,5,16,16,16,16,C_M_AXI_MEM_ID_WIDTH,C_M_AXI_MEM_ADDR_WIDTH,C_M_AXI_MEM_DATA_WIDTH,C_M_AXI_MEM_AWUSER_WIDTH,C_M_AXI_MEM_ARUSER_WIDTH,C_M_AXI_MEM_WUSER_WIDTH,C_M_AXI_MEM_RUSER_WIDTH,C_M_AXI_MEM_BUSER_WIDTH,C_M_AXI_MEM_TARGET_ADDR,C_M_AXI_MEM_USER_VALUE,C_M_AXI_MEM_PROT_VALUE,C_M_AXI_MEM_CACHE_VALUE>("fc_layer_mem_m_axi_U");
    fc_layer_mem_m_axi_U->AWVALID(m_axi_mem_AWVALID);
    fc_layer_mem_m_axi_U->AWREADY(m_axi_mem_AWREADY);
    fc_layer_mem_m_axi_U->AWADDR(m_axi_mem_AWADDR);
    fc_layer_mem_m_axi_U->AWID(m_axi_mem_AWID);
    fc_layer_mem_m_axi_U->AWLEN(m_axi_mem_AWLEN);
    fc_layer_mem_m_axi_U->AWSIZE(m_axi_mem_AWSIZE);
    fc_layer_mem_m_axi_U->AWBURST(m_axi_mem_AWBURST);
    fc_layer_mem_m_axi_U->AWLOCK(m_axi_mem_AWLOCK);
    fc_layer_mem_m_axi_U->AWCACHE(m_axi_mem_AWCACHE);
    fc_layer_mem_m_axi_U->AWPROT(m_axi_mem_AWPROT);
    fc_layer_mem_m_axi_U->AWQOS(m_axi_mem_AWQOS);
    fc_layer_mem_m_axi_U->AWREGION(m_axi_mem_AWREGION);
    fc_layer_mem_m_axi_U->AWUSER(m_axi_mem_AWUSER);
    fc_layer_mem_m_axi_U->WVALID(m_axi_mem_WVALID);
    fc_layer_mem_m_axi_U->WREADY(m_axi_mem_WREADY);
    fc_layer_mem_m_axi_U->WDATA(m_axi_mem_WDATA);
    fc_layer_mem_m_axi_U->WSTRB(m_axi_mem_WSTRB);
    fc_layer_mem_m_axi_U->WLAST(m_axi_mem_WLAST);
    fc_layer_mem_m_axi_U->WID(m_axi_mem_WID);
    fc_layer_mem_m_axi_U->WUSER(m_axi_mem_WUSER);
    fc_layer_mem_m_axi_U->ARVALID(m_axi_mem_ARVALID);
    fc_layer_mem_m_axi_U->ARREADY(m_axi_mem_ARREADY);
    fc_layer_mem_m_axi_U->ARADDR(m_axi_mem_ARADDR);
    fc_layer_mem_m_axi_U->ARID(m_axi_mem_ARID);
    fc_layer_mem_m_axi_U->ARLEN(m_axi_mem_ARLEN);
    fc_layer_mem_m_axi_U->ARSIZE(m_axi_mem_ARSIZE);
    fc_layer_mem_m_axi_U->ARBURST(m_axi_mem_ARBURST);
    fc_layer_mem_m_axi_U->ARLOCK(m_axi_mem_ARLOCK);
    fc_layer_mem_m_axi_U->ARCACHE(m_axi_mem_ARCACHE);
    fc_layer_mem_m_axi_U->ARPROT(m_axi_mem_ARPROT);
    fc_layer_mem_m_axi_U->ARQOS(m_axi_mem_ARQOS);
    fc_layer_mem_m_axi_U->ARREGION(m_axi_mem_ARREGION);
    fc_layer_mem_m_axi_U->ARUSER(m_axi_mem_ARUSER);
    fc_layer_mem_m_axi_U->RVALID(m_axi_mem_RVALID);
    fc_layer_mem_m_axi_U->RREADY(m_axi_mem_RREADY);
    fc_layer_mem_m_axi_U->RDATA(m_axi_mem_RDATA);
    fc_layer_mem_m_axi_U->RLAST(m_axi_mem_RLAST);
    fc_layer_mem_m_axi_U->RID(m_axi_mem_RID);
    fc_layer_mem_m_axi_U->RUSER(m_axi_mem_RUSER);
    fc_layer_mem_m_axi_U->RRESP(m_axi_mem_RRESP);
    fc_layer_mem_m_axi_U->BVALID(m_axi_mem_BVALID);
    fc_layer_mem_m_axi_U->BREADY(m_axi_mem_BREADY);
    fc_layer_mem_m_axi_U->BRESP(m_axi_mem_BRESP);
    fc_layer_mem_m_axi_U->BID(m_axi_mem_BID);
    fc_layer_mem_m_axi_U->BUSER(m_axi_mem_BUSER);
    fc_layer_mem_m_axi_U->ACLK(ap_clk);
    fc_layer_mem_m_axi_U->ARESET(ap_rst_n_inv);
    fc_layer_mem_m_axi_U->ACLK_EN(ap_var_for_const0);
    fc_layer_mem_m_axi_U->I_ARVALID(mem_ARVALID);
    fc_layer_mem_m_axi_U->I_ARREADY(mem_ARREADY);
    fc_layer_mem_m_axi_U->I_ARADDR(mem_ARADDR);
    fc_layer_mem_m_axi_U->I_ARID(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_ARLEN(ap_var_for_const2);
    fc_layer_mem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_ARQOS(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_ARPROT(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_ARUSER(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_ARBURST(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_ARREGION(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_RVALID(mem_RVALID);
    fc_layer_mem_m_axi_U->I_RREADY(mem_RREADY);
    fc_layer_mem_m_axi_U->I_RDATA(mem_RDATA);
    fc_layer_mem_m_axi_U->I_RID(mem_RID);
    fc_layer_mem_m_axi_U->I_RUSER(mem_RUSER);
    fc_layer_mem_m_axi_U->I_RRESP(mem_RRESP);
    fc_layer_mem_m_axi_U->I_RLAST(mem_RLAST);
    fc_layer_mem_m_axi_U->I_AWVALID(mem_AWVALID);
    fc_layer_mem_m_axi_U->I_AWREADY(mem_AWREADY);
    fc_layer_mem_m_axi_U->I_AWADDR(reg_240);
    fc_layer_mem_m_axi_U->I_AWID(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_AWLEN(ap_var_for_const2);
    fc_layer_mem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_AWQOS(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_AWPROT(ap_var_for_const3);
    fc_layer_mem_m_axi_U->I_AWUSER(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_AWBURST(ap_var_for_const4);
    fc_layer_mem_m_axi_U->I_AWREGION(ap_var_for_const5);
    fc_layer_mem_m_axi_U->I_WVALID(mem_WVALID);
    fc_layer_mem_m_axi_U->I_WREADY(mem_WREADY);
    fc_layer_mem_m_axi_U->I_WDATA(mem_WDATA);
    fc_layer_mem_m_axi_U->I_WID(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_WUSER(ap_var_for_const1);
    fc_layer_mem_m_axi_U->I_WLAST(ap_var_for_const6);
    fc_layer_mem_m_axi_U->I_WSTRB(ap_var_for_const7);
    fc_layer_mem_m_axi_U->I_BVALID(mem_BVALID);
    fc_layer_mem_m_axi_U->I_BREADY(mem_BREADY);
    fc_layer_mem_m_axi_U->I_BRESP(mem_BRESP);
    fc_layer_mem_m_axi_U->I_BID(mem_BID);
    fc_layer_mem_m_axi_U->I_BUSER(mem_BUSER);
    fc_layer_fadd_32nbkb_U0 = new fc_layer_fadd_32nbkb<1,13,32,32,32>("fc_layer_fadd_32nbkb_U0");
    fc_layer_fadd_32nbkb_U0->clk(ap_clk);
    fc_layer_fadd_32nbkb_U0->reset(ap_rst_n_inv);
    fc_layer_fadd_32nbkb_U0->din0(tmp_8_reg_184);
    fc_layer_fadd_32nbkb_U0->din1(tmp_24_reg_757);
    fc_layer_fadd_32nbkb_U0->ce(ap_var_for_const0);
    fc_layer_fadd_32nbkb_U0->dout(grp_fu_221_p2);
    fc_layer_fmul_32ncud_U1 = new fc_layer_fmul_32ncud<1,8,32,32,32>("fc_layer_fmul_32ncud_U1");
    fc_layer_fmul_32ncud_U1->clk(ap_clk);
    fc_layer_fmul_32ncud_U1->reset(ap_rst_n_inv);
    fc_layer_fmul_32ncud_U1->din0(input_element_reg_689);
    fc_layer_fmul_32ncud_U1->din1(weight_element_reg_731);
    fc_layer_fmul_32ncud_U1->ce(ap_var_for_const0);
    fc_layer_fmul_32ncud_U1->dout(grp_fu_226_p2);
    fc_layer_fcmp_32ndEe_U2 = new fc_layer_fcmp_32ndEe<1,4,32,32,1>("fc_layer_fcmp_32ndEe_U2");
    fc_layer_fcmp_32ndEe_U2->clk(ap_clk);
    fc_layer_fcmp_32ndEe_U2->reset(ap_rst_n_inv);
    fc_layer_fcmp_32ndEe_U2->din0(grp_fu_230_p0);
    fc_layer_fcmp_32ndEe_U2->din1(ap_var_for_const8);
    fc_layer_fcmp_32ndEe_U2->ce(ap_var_for_const0);
    fc_layer_fcmp_32ndEe_U2->opcode(grp_fu_230_opcode);
    fc_layer_fcmp_32ndEe_U2->dout(grp_fu_230_p2);
    fc_layer_mul_32s_eOg_U3 = new fc_layer_mul_32s_eOg<1,7,32,32,32>("fc_layer_mul_32s_eOg_U3");
    fc_layer_mul_32s_eOg_U3->clk(ap_clk);
    fc_layer_mul_32s_eOg_U3->reset(ap_rst_n_inv);
    fc_layer_mul_32s_eOg_U3->din0(num_outputs);
    fc_layer_mul_32s_eOg_U3->din1(num_inputs);
    fc_layer_mul_32s_eOg_U3->ce(ap_var_for_const0);
    fc_layer_mul_32s_eOg_U3->dout(grp_fu_251_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state49);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state59);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state71);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state72);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state75);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state76);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state77);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state82);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state83);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state84);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state89);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state82);
    sensitive << ( tmp_1_reg_567 );
    sensitive << ( mem_BVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_3_fu_307_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_3_fu_307_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_mem_ARREADY);
    sensitive << ( mem_ARREADY );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_mem_AWREADY);
    sensitive << ( mem_AWREADY );
    sensitive << ( ap_reg_ioackin_mem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_mem_WREADY);
    sensitive << ( mem_WREADY );
    sensitive << ( ap_reg_ioackin_mem_WREADY );

    SC_METHOD(thread_b_1_fu_312_p2);
    sensitive << ( b_reg_127 );

    SC_METHOD(thread_b_cast_fu_303_p1);
    sensitive << ( b_reg_127 );

    SC_METHOD(thread_grp_fu_230_opcode);
    sensitive << ( tmp_1_reg_567 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( tmp_5_fu_362_p2 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_grp_fu_230_p0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( input_element_reg_689 );
    sensitive << ( weight_element_reg_731 );
    sensitive << ( tmp_8_reg_184 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_grp_fu_236_p2);
    sensitive << ( tmp_6_reg_611 );
    sensitive << ( o_cast_reg_621 );

    SC_METHOD(thread_i_1_fu_367_p2);
    sensitive << ( i_reg_195 );

    SC_METHOD(thread_i_cast_fu_358_p1);
    sensitive << ( i_reg_195 );

    SC_METHOD(thread_input_element_to_int_fu_393_p1);
    sensitive << ( input_element_reg_689 );

    SC_METHOD(thread_mem_ARADDR);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( tmp_9_reg_639 );
    sensitive << ( tmp_10_reg_678 );
    sensitive << ( tmp_16_reg_720 );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_mem_ARVALID);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_reg_ioackin_mem_ARREADY );

    SC_METHOD(thread_mem_AWVALID);
    sensitive << ( ap_CS_fsm_state76 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_reg_ioackin_mem_AWREADY );

    SC_METHOD(thread_mem_BREADY);
    sensitive << ( ap_CS_fsm_state82 );
    sensitive << ( tmp_1_reg_567 );
    sensitive << ( ap_CS_fsm_state89 );
    sensitive << ( mem_BVALID );

    SC_METHOD(thread_mem_RREADY);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( mem_RVALID );

    SC_METHOD(thread_mem_WDATA);
    sensitive << ( ap_CS_fsm_state77 );
    sensitive << ( ap_CS_fsm_state84 );
    sensitive << ( tmp_22_reg_782 );
    sensitive << ( tmp_8_reg_184 );
    sensitive << ( ap_reg_ioackin_mem_WREADY );

    SC_METHOD(thread_mem_WVALID);
    sensitive << ( ap_CS_fsm_state77 );
    sensitive << ( ap_CS_fsm_state84 );
    sensitive << ( ap_reg_ioackin_mem_WREADY );

    SC_METHOD(thread_mem_blk_n_AR);
    sensitive << ( m_axi_mem_ARREADY );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_mem_blk_n_AW);
    sensitive << ( m_axi_mem_AWREADY );
    sensitive << ( ap_CS_fsm_state76 );
    sensitive << ( ap_CS_fsm_state83 );

    SC_METHOD(thread_mem_blk_n_B);
    sensitive << ( m_axi_mem_BVALID );
    sensitive << ( ap_CS_fsm_state82 );
    sensitive << ( tmp_1_reg_567 );
    sensitive << ( ap_CS_fsm_state89 );

    SC_METHOD(thread_mem_blk_n_R);
    sensitive << ( m_axi_mem_RVALID );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_mem_blk_n_W);
    sensitive << ( m_axi_mem_WREADY );
    sensitive << ( ap_CS_fsm_state77 );
    sensitive << ( ap_CS_fsm_state84 );

    SC_METHOD(thread_next_mul2_fu_298_p2);
    sensitive << ( num_inputs_read_reg_544 );
    sensitive << ( phi_mul1_reg_138 );

    SC_METHOD(thread_next_mul4_fu_293_p2);
    sensitive << ( num_outputs_read_reg_536 );
    sensitive << ( phi_mul3_reg_150 );

    SC_METHOD(thread_next_mul_fu_323_p2);
    sensitive << ( num_inputs_read_reg_544 );
    sensitive << ( phi_mul_reg_172 );

    SC_METHOD(thread_notlhs1_fu_463_p2);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( tmp_17_fu_449_p4 );

    SC_METHOD(thread_notlhs8_fu_410_p2);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( tmp_11_fu_396_p4 );

    SC_METHOD(thread_notlhs_fu_502_p2);
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( tmp_26_fu_488_p4 );

    SC_METHOD(thread_notrhs1_fu_469_p2);
    sensitive << ( ap_CS_fsm_state49 );
    sensitive << ( tmp_18_fu_459_p1 );

    SC_METHOD(thread_notrhs9_fu_416_p2);
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( tmp_12_fu_406_p1 );

    SC_METHOD(thread_notrhs_fu_508_p2);
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( tmp_27_fu_498_p1 );

    SC_METHOD(thread_o_1_fu_337_p2);
    sensitive << ( o_reg_161 );

    SC_METHOD(thread_o_cast_fu_328_p1);
    sensitive << ( o_reg_161 );

    SC_METHOD(thread_tmp1_fu_343_p2);
    sensitive << ( tmp_s_reg_577 );
    sensitive << ( o_cast_fu_328_p1 );

    SC_METHOD(thread_tmp2_fu_288_p2);
    sensitive << ( num_outputs_read_reg_536 );
    sensitive << ( tmp_s_fu_282_p1 );

    SC_METHOD(thread_tmp3_fu_379_p2);
    sensitive << ( num_weights_reg_571 );
    sensitive << ( tmp4_reg_668 );

    SC_METHOD(thread_tmp4_fu_373_p2);
    sensitive << ( i_cast_fu_358_p1 );
    sensitive << ( phi_mul1_reg_138 );

    SC_METHOD(thread_tmp5_fu_431_p2);
    sensitive << ( tmp_s_reg_577 );
    sensitive << ( i_cast_reg_655 );

    SC_METHOD(thread_tmp_10_fu_383_p2);
    sensitive << ( tmp2_reg_588 );
    sensitive << ( tmp3_reg_673 );

    SC_METHOD(thread_tmp_10_to_int_fu_484_p1);
    sensitive << ( tmp_8_reg_184 );

    SC_METHOD(thread_tmp_11_fu_396_p4);
    sensitive << ( input_element_to_int_fu_393_p1 );

    SC_METHOD(thread_tmp_12_fu_406_p1);
    sensitive << ( input_element_to_int_fu_393_p1 );

    SC_METHOD(thread_tmp_13_fu_422_p2);
    sensitive << ( notlhs8_reg_696 );
    sensitive << ( notrhs9_reg_701 );

    SC_METHOD(thread_tmp_15_fu_426_p2);
    sensitive << ( tmp_14_reg_706 );
    sensitive << ( tmp_13_fu_422_p2 );

    SC_METHOD(thread_tmp_16_fu_435_p2);
    sensitive << ( tmp5_reg_715 );
    sensitive << ( phi_mul_reg_172 );

    SC_METHOD(thread_tmp_17_fu_449_p4);
    sensitive << ( weight_element_to_in_fu_446_p1 );

    SC_METHOD(thread_tmp_18_fu_459_p1);
    sensitive << ( weight_element_to_in_fu_446_p1 );

    SC_METHOD(thread_tmp_19_fu_475_p2);
    sensitive << ( notlhs1_reg_738 );
    sensitive << ( notrhs1_reg_743 );

    SC_METHOD(thread_tmp_1_fu_277_p2);
    sensitive << ( enable_relu_read_reg_531 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_22_fu_523_p3);
    sensitive << ( tmp_8_reg_184 );
    sensitive << ( tmp_30_fu_518_p2 );

    SC_METHOD(thread_tmp_25_fu_479_p2);
    sensitive << ( tmp_21_reg_748 );
    sensitive << ( tmp_19_fu_475_p2 );

    SC_METHOD(thread_tmp_26_fu_488_p4);
    sensitive << ( tmp_10_to_int_fu_484_p1 );

    SC_METHOD(thread_tmp_27_fu_498_p1);
    sensitive << ( tmp_10_to_int_fu_484_p1 );

    SC_METHOD(thread_tmp_28_fu_514_p2);
    sensitive << ( notlhs_reg_767 );
    sensitive << ( notrhs_reg_772 );

    SC_METHOD(thread_tmp_30_fu_518_p2);
    sensitive << ( tmp_29_reg_777 );
    sensitive << ( tmp_28_fu_514_p2 );

    SC_METHOD(thread_tmp_3_fu_307_p2);
    sensitive << ( batch_size_read_reg_552 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( b_cast_fu_303_p1 );

    SC_METHOD(thread_tmp_4_fu_285_p1);
    sensitive << ( tmp_2_reg_562 );

    SC_METHOD(thread_tmp_5_fu_362_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( num_inputs_read_reg_544 );
    sensitive << ( i_cast_fu_358_p1 );

    SC_METHOD(thread_tmp_6_fu_318_p2);
    sensitive << ( tmp_4_reg_583 );
    sensitive << ( phi_mul3_reg_150 );

    SC_METHOD(thread_tmp_7_fu_332_p2);
    sensitive << ( num_outputs_read_reg_536 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( o_cast_fu_328_p1 );

    SC_METHOD(thread_tmp_8_be_phi_fu_210_p6);
    sensitive << ( tmp_15_reg_711 );
    sensitive << ( tmp_25_reg_753 );
    sensitive << ( output_element_1_reg_762 );
    sensitive << ( ap_CS_fsm_state72 );
    sensitive << ( tmp_8_be_reg_206 );

    SC_METHOD(thread_tmp_9_fu_348_p2);
    sensitive << ( num_weights_reg_571 );
    sensitive << ( tmp1_reg_634 );

    SC_METHOD(thread_tmp_s_fu_282_p1);
    sensitive << ( tmp_reg_557 );

    SC_METHOD(thread_weight_element_to_in_fu_446_p1);
    sensitive << ( weight_element_reg_731 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state76 );
    sensitive << ( ap_CS_fsm_state77 );
    sensitive << ( ap_CS_fsm_state82 );
    sensitive << ( tmp_1_reg_567 );
    sensitive << ( ap_CS_fsm_state83 );
    sensitive << ( ap_CS_fsm_state84 );
    sensitive << ( ap_CS_fsm_state89 );
    sensitive << ( mem_RVALID );
    sensitive << ( mem_BVALID );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( tmp_5_fu_362_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_3_fu_307_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_7_fu_332_p2 );
    sensitive << ( ap_sig_ioackin_mem_ARREADY );
    sensitive << ( tmp_15_reg_711 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( tmp_25_reg_753 );
    sensitive << ( ap_sig_ioackin_mem_AWREADY );
    sensitive << ( ap_CS_fsm_state51 );
    sensitive << ( ap_sig_ioackin_mem_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const8);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    ap_reg_ioackin_mem_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_mem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_mem_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fc_layer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_mem_AWVALID, "(port)m_axi_mem_AWVALID");
    sc_trace(mVcdFile, m_axi_mem_AWREADY, "(port)m_axi_mem_AWREADY");
    sc_trace(mVcdFile, m_axi_mem_AWADDR, "(port)m_axi_mem_AWADDR");
    sc_trace(mVcdFile, m_axi_mem_AWID, "(port)m_axi_mem_AWID");
    sc_trace(mVcdFile, m_axi_mem_AWLEN, "(port)m_axi_mem_AWLEN");
    sc_trace(mVcdFile, m_axi_mem_AWSIZE, "(port)m_axi_mem_AWSIZE");
    sc_trace(mVcdFile, m_axi_mem_AWBURST, "(port)m_axi_mem_AWBURST");
    sc_trace(mVcdFile, m_axi_mem_AWLOCK, "(port)m_axi_mem_AWLOCK");
    sc_trace(mVcdFile, m_axi_mem_AWCACHE, "(port)m_axi_mem_AWCACHE");
    sc_trace(mVcdFile, m_axi_mem_AWPROT, "(port)m_axi_mem_AWPROT");
    sc_trace(mVcdFile, m_axi_mem_AWQOS, "(port)m_axi_mem_AWQOS");
    sc_trace(mVcdFile, m_axi_mem_AWREGION, "(port)m_axi_mem_AWREGION");
    sc_trace(mVcdFile, m_axi_mem_AWUSER, "(port)m_axi_mem_AWUSER");
    sc_trace(mVcdFile, m_axi_mem_WVALID, "(port)m_axi_mem_WVALID");
    sc_trace(mVcdFile, m_axi_mem_WREADY, "(port)m_axi_mem_WREADY");
    sc_trace(mVcdFile, m_axi_mem_WDATA, "(port)m_axi_mem_WDATA");
    sc_trace(mVcdFile, m_axi_mem_WSTRB, "(port)m_axi_mem_WSTRB");
    sc_trace(mVcdFile, m_axi_mem_WLAST, "(port)m_axi_mem_WLAST");
    sc_trace(mVcdFile, m_axi_mem_WID, "(port)m_axi_mem_WID");
    sc_trace(mVcdFile, m_axi_mem_WUSER, "(port)m_axi_mem_WUSER");
    sc_trace(mVcdFile, m_axi_mem_ARVALID, "(port)m_axi_mem_ARVALID");
    sc_trace(mVcdFile, m_axi_mem_ARREADY, "(port)m_axi_mem_ARREADY");
    sc_trace(mVcdFile, m_axi_mem_ARADDR, "(port)m_axi_mem_ARADDR");
    sc_trace(mVcdFile, m_axi_mem_ARID, "(port)m_axi_mem_ARID");
    sc_trace(mVcdFile, m_axi_mem_ARLEN, "(port)m_axi_mem_ARLEN");
    sc_trace(mVcdFile, m_axi_mem_ARSIZE, "(port)m_axi_mem_ARSIZE");
    sc_trace(mVcdFile, m_axi_mem_ARBURST, "(port)m_axi_mem_ARBURST");
    sc_trace(mVcdFile, m_axi_mem_ARLOCK, "(port)m_axi_mem_ARLOCK");
    sc_trace(mVcdFile, m_axi_mem_ARCACHE, "(port)m_axi_mem_ARCACHE");
    sc_trace(mVcdFile, m_axi_mem_ARPROT, "(port)m_axi_mem_ARPROT");
    sc_trace(mVcdFile, m_axi_mem_ARQOS, "(port)m_axi_mem_ARQOS");
    sc_trace(mVcdFile, m_axi_mem_ARREGION, "(port)m_axi_mem_ARREGION");
    sc_trace(mVcdFile, m_axi_mem_ARUSER, "(port)m_axi_mem_ARUSER");
    sc_trace(mVcdFile, m_axi_mem_RVALID, "(port)m_axi_mem_RVALID");
    sc_trace(mVcdFile, m_axi_mem_RREADY, "(port)m_axi_mem_RREADY");
    sc_trace(mVcdFile, m_axi_mem_RDATA, "(port)m_axi_mem_RDATA");
    sc_trace(mVcdFile, m_axi_mem_RLAST, "(port)m_axi_mem_RLAST");
    sc_trace(mVcdFile, m_axi_mem_RID, "(port)m_axi_mem_RID");
    sc_trace(mVcdFile, m_axi_mem_RUSER, "(port)m_axi_mem_RUSER");
    sc_trace(mVcdFile, m_axi_mem_RRESP, "(port)m_axi_mem_RRESP");
    sc_trace(mVcdFile, m_axi_mem_BVALID, "(port)m_axi_mem_BVALID");
    sc_trace(mVcdFile, m_axi_mem_BREADY, "(port)m_axi_mem_BREADY");
    sc_trace(mVcdFile, m_axi_mem_BRESP, "(port)m_axi_mem_BRESP");
    sc_trace(mVcdFile, m_axi_mem_BID, "(port)m_axi_mem_BID");
    sc_trace(mVcdFile, m_axi_mem_BUSER, "(port)m_axi_mem_BUSER");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, input_offset, "input_offset");
    sc_trace(mVcdFile, output_offset, "output_offset");
    sc_trace(mVcdFile, batch_size, "batch_size");
    sc_trace(mVcdFile, num_inputs, "num_inputs");
    sc_trace(mVcdFile, num_outputs, "num_outputs");
    sc_trace(mVcdFile, enable_relu, "enable_relu");
    sc_trace(mVcdFile, mem_blk_n_AR, "mem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, mem_blk_n_R, "mem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, mem_blk_n_AW, "mem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state76, "ap_CS_fsm_state76");
    sc_trace(mVcdFile, mem_blk_n_W, "mem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state77, "ap_CS_fsm_state77");
    sc_trace(mVcdFile, mem_blk_n_B, "mem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state82, "ap_CS_fsm_state82");
    sc_trace(mVcdFile, tmp_1_reg_567, "tmp_1_reg_567");
    sc_trace(mVcdFile, ap_CS_fsm_state83, "ap_CS_fsm_state83");
    sc_trace(mVcdFile, ap_CS_fsm_state84, "ap_CS_fsm_state84");
    sc_trace(mVcdFile, ap_CS_fsm_state89, "ap_CS_fsm_state89");
    sc_trace(mVcdFile, mem_AWVALID, "mem_AWVALID");
    sc_trace(mVcdFile, mem_AWREADY, "mem_AWREADY");
    sc_trace(mVcdFile, mem_WVALID, "mem_WVALID");
    sc_trace(mVcdFile, mem_WREADY, "mem_WREADY");
    sc_trace(mVcdFile, mem_WDATA, "mem_WDATA");
    sc_trace(mVcdFile, mem_ARVALID, "mem_ARVALID");
    sc_trace(mVcdFile, mem_ARREADY, "mem_ARREADY");
    sc_trace(mVcdFile, mem_ARADDR, "mem_ARADDR");
    sc_trace(mVcdFile, mem_RVALID, "mem_RVALID");
    sc_trace(mVcdFile, mem_RREADY, "mem_RREADY");
    sc_trace(mVcdFile, mem_RDATA, "mem_RDATA");
    sc_trace(mVcdFile, mem_RLAST, "mem_RLAST");
    sc_trace(mVcdFile, mem_RID, "mem_RID");
    sc_trace(mVcdFile, mem_RUSER, "mem_RUSER");
    sc_trace(mVcdFile, mem_RRESP, "mem_RRESP");
    sc_trace(mVcdFile, mem_BVALID, "mem_BVALID");
    sc_trace(mVcdFile, mem_BREADY, "mem_BREADY");
    sc_trace(mVcdFile, mem_BRESP, "mem_BRESP");
    sc_trace(mVcdFile, mem_BID, "mem_BID");
    sc_trace(mVcdFile, mem_BUSER, "mem_BUSER");
    sc_trace(mVcdFile, grp_fu_236_p2, "grp_fu_236_p2");
    sc_trace(mVcdFile, reg_240, "reg_240");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, tmp_5_fu_362_p2, "tmp_5_fu_362_p2");
    sc_trace(mVcdFile, enable_relu_read_reg_531, "enable_relu_read_reg_531");
    sc_trace(mVcdFile, num_outputs_read_reg_536, "num_outputs_read_reg_536");
    sc_trace(mVcdFile, num_inputs_read_reg_544, "num_inputs_read_reg_544");
    sc_trace(mVcdFile, batch_size_read_reg_552, "batch_size_read_reg_552");
    sc_trace(mVcdFile, tmp_reg_557, "tmp_reg_557");
    sc_trace(mVcdFile, tmp_2_reg_562, "tmp_2_reg_562");
    sc_trace(mVcdFile, tmp_1_fu_277_p2, "tmp_1_fu_277_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_251_p2, "grp_fu_251_p2");
    sc_trace(mVcdFile, num_weights_reg_571, "num_weights_reg_571");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_s_fu_282_p1, "tmp_s_fu_282_p1");
    sc_trace(mVcdFile, tmp_s_reg_577, "tmp_s_reg_577");
    sc_trace(mVcdFile, tmp_4_fu_285_p1, "tmp_4_fu_285_p1");
    sc_trace(mVcdFile, tmp_4_reg_583, "tmp_4_reg_583");
    sc_trace(mVcdFile, tmp2_fu_288_p2, "tmp2_fu_288_p2");
    sc_trace(mVcdFile, tmp2_reg_588, "tmp2_reg_588");
    sc_trace(mVcdFile, next_mul4_fu_293_p2, "next_mul4_fu_293_p2");
    sc_trace(mVcdFile, next_mul4_reg_593, "next_mul4_reg_593");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, next_mul2_fu_298_p2, "next_mul2_fu_298_p2");
    sc_trace(mVcdFile, next_mul2_reg_598, "next_mul2_reg_598");
    sc_trace(mVcdFile, b_1_fu_312_p2, "b_1_fu_312_p2");
    sc_trace(mVcdFile, b_1_reg_606, "b_1_reg_606");
    sc_trace(mVcdFile, tmp_6_fu_318_p2, "tmp_6_fu_318_p2");
    sc_trace(mVcdFile, tmp_6_reg_611, "tmp_6_reg_611");
    sc_trace(mVcdFile, tmp_3_fu_307_p2, "tmp_3_fu_307_p2");
    sc_trace(mVcdFile, next_mul_fu_323_p2, "next_mul_fu_323_p2");
    sc_trace(mVcdFile, next_mul_reg_616, "next_mul_reg_616");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, o_cast_fu_328_p1, "o_cast_fu_328_p1");
    sc_trace(mVcdFile, o_cast_reg_621, "o_cast_reg_621");
    sc_trace(mVcdFile, o_1_fu_337_p2, "o_1_fu_337_p2");
    sc_trace(mVcdFile, o_1_reg_629, "o_1_reg_629");
    sc_trace(mVcdFile, tmp1_fu_343_p2, "tmp1_fu_343_p2");
    sc_trace(mVcdFile, tmp1_reg_634, "tmp1_reg_634");
    sc_trace(mVcdFile, tmp_7_fu_332_p2, "tmp_7_fu_332_p2");
    sc_trace(mVcdFile, tmp_9_fu_348_p2, "tmp_9_fu_348_p2");
    sc_trace(mVcdFile, tmp_9_reg_639, "tmp_9_reg_639");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_ARREADY, "ap_sig_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, output_element_reg_650, "output_element_reg_650");
    sc_trace(mVcdFile, i_cast_fu_358_p1, "i_cast_fu_358_p1");
    sc_trace(mVcdFile, i_cast_reg_655, "i_cast_reg_655");
    sc_trace(mVcdFile, i_1_fu_367_p2, "i_1_fu_367_p2");
    sc_trace(mVcdFile, i_1_reg_663, "i_1_reg_663");
    sc_trace(mVcdFile, tmp4_fu_373_p2, "tmp4_fu_373_p2");
    sc_trace(mVcdFile, tmp4_reg_668, "tmp4_reg_668");
    sc_trace(mVcdFile, tmp3_fu_379_p2, "tmp3_fu_379_p2");
    sc_trace(mVcdFile, tmp3_reg_673, "tmp3_reg_673");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_10_fu_383_p2, "tmp_10_fu_383_p2");
    sc_trace(mVcdFile, tmp_10_reg_678, "tmp_10_reg_678");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, input_element_reg_689, "input_element_reg_689");
    sc_trace(mVcdFile, notlhs8_fu_410_p2, "notlhs8_fu_410_p2");
    sc_trace(mVcdFile, notlhs8_reg_696, "notlhs8_reg_696");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, notrhs9_fu_416_p2, "notrhs9_fu_416_p2");
    sc_trace(mVcdFile, notrhs9_reg_701, "notrhs9_reg_701");
    sc_trace(mVcdFile, grp_fu_230_p2, "grp_fu_230_p2");
    sc_trace(mVcdFile, tmp_14_reg_706, "tmp_14_reg_706");
    sc_trace(mVcdFile, tmp_15_fu_426_p2, "tmp_15_fu_426_p2");
    sc_trace(mVcdFile, tmp_15_reg_711, "tmp_15_reg_711");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, tmp5_fu_431_p2, "tmp5_fu_431_p2");
    sc_trace(mVcdFile, tmp5_reg_715, "tmp5_reg_715");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, tmp_16_fu_435_p2, "tmp_16_fu_435_p2");
    sc_trace(mVcdFile, tmp_16_reg_720, "tmp_16_reg_720");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, weight_element_reg_731, "weight_element_reg_731");
    sc_trace(mVcdFile, notlhs1_fu_463_p2, "notlhs1_fu_463_p2");
    sc_trace(mVcdFile, notlhs1_reg_738, "notlhs1_reg_738");
    sc_trace(mVcdFile, ap_CS_fsm_state49, "ap_CS_fsm_state49");
    sc_trace(mVcdFile, notrhs1_fu_469_p2, "notrhs1_fu_469_p2");
    sc_trace(mVcdFile, notrhs1_reg_743, "notrhs1_reg_743");
    sc_trace(mVcdFile, tmp_21_reg_748, "tmp_21_reg_748");
    sc_trace(mVcdFile, tmp_25_fu_479_p2, "tmp_25_fu_479_p2");
    sc_trace(mVcdFile, tmp_25_reg_753, "tmp_25_reg_753");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, grp_fu_226_p2, "grp_fu_226_p2");
    sc_trace(mVcdFile, tmp_24_reg_757, "tmp_24_reg_757");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, grp_fu_221_p2, "grp_fu_221_p2");
    sc_trace(mVcdFile, output_element_1_reg_762, "output_element_1_reg_762");
    sc_trace(mVcdFile, ap_CS_fsm_state71, "ap_CS_fsm_state71");
    sc_trace(mVcdFile, notlhs_fu_502_p2, "notlhs_fu_502_p2");
    sc_trace(mVcdFile, notlhs_reg_767, "notlhs_reg_767");
    sc_trace(mVcdFile, ap_CS_fsm_state75, "ap_CS_fsm_state75");
    sc_trace(mVcdFile, notrhs_fu_508_p2, "notrhs_fu_508_p2");
    sc_trace(mVcdFile, notrhs_reg_772, "notrhs_reg_772");
    sc_trace(mVcdFile, tmp_29_reg_777, "tmp_29_reg_777");
    sc_trace(mVcdFile, tmp_22_fu_523_p3, "tmp_22_fu_523_p3");
    sc_trace(mVcdFile, tmp_22_reg_782, "tmp_22_reg_782");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_AWREADY, "ap_sig_ioackin_mem_AWREADY");
    sc_trace(mVcdFile, b_reg_127, "b_reg_127");
    sc_trace(mVcdFile, phi_mul1_reg_138, "phi_mul1_reg_138");
    sc_trace(mVcdFile, phi_mul3_reg_150, "phi_mul3_reg_150");
    sc_trace(mVcdFile, o_reg_161, "o_reg_161");
    sc_trace(mVcdFile, ap_block_state82, "ap_block_state82");
    sc_trace(mVcdFile, phi_mul_reg_172, "phi_mul_reg_172");
    sc_trace(mVcdFile, tmp_8_reg_184, "tmp_8_reg_184");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, tmp_8_be_phi_fu_210_p6, "tmp_8_be_phi_fu_210_p6");
    sc_trace(mVcdFile, ap_CS_fsm_state72, "ap_CS_fsm_state72");
    sc_trace(mVcdFile, i_reg_195, "i_reg_195");
    sc_trace(mVcdFile, tmp_8_be_reg_206, "tmp_8_be_reg_206");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_ARREADY, "ap_reg_ioackin_mem_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_AWREADY, "ap_reg_ioackin_mem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_mem_WREADY, "ap_reg_ioackin_mem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_mem_WREADY, "ap_sig_ioackin_mem_WREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state59, "ap_CS_fsm_state59");
    sc_trace(mVcdFile, grp_fu_230_p0, "grp_fu_230_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, b_cast_fu_303_p1, "b_cast_fu_303_p1");
    sc_trace(mVcdFile, input_element_to_int_fu_393_p1, "input_element_to_int_fu_393_p1");
    sc_trace(mVcdFile, tmp_11_fu_396_p4, "tmp_11_fu_396_p4");
    sc_trace(mVcdFile, tmp_12_fu_406_p1, "tmp_12_fu_406_p1");
    sc_trace(mVcdFile, tmp_13_fu_422_p2, "tmp_13_fu_422_p2");
    sc_trace(mVcdFile, weight_element_to_in_fu_446_p1, "weight_element_to_in_fu_446_p1");
    sc_trace(mVcdFile, tmp_17_fu_449_p4, "tmp_17_fu_449_p4");
    sc_trace(mVcdFile, tmp_18_fu_459_p1, "tmp_18_fu_459_p1");
    sc_trace(mVcdFile, tmp_19_fu_475_p2, "tmp_19_fu_475_p2");
    sc_trace(mVcdFile, tmp_10_to_int_fu_484_p1, "tmp_10_to_int_fu_484_p1");
    sc_trace(mVcdFile, tmp_26_fu_488_p4, "tmp_26_fu_488_p4");
    sc_trace(mVcdFile, tmp_27_fu_498_p1, "tmp_27_fu_498_p1");
    sc_trace(mVcdFile, tmp_28_fu_514_p2, "tmp_28_fu_514_p2");
    sc_trace(mVcdFile, tmp_30_fu_518_p2, "tmp_30_fu_518_p2");
    sc_trace(mVcdFile, grp_fu_230_opcode, "grp_fu_230_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fc_layer.hdltvin.dat");
    mHdltvoutHandle.open("fc_layer.hdltvout.dat");
}

fc_layer::~fc_layer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fc_layer_CTRL_BUS_s_axi_U;
    delete fc_layer_mem_m_axi_U;
    delete fc_layer_fadd_32nbkb_U0;
    delete fc_layer_fmul_32ncud_U1;
    delete fc_layer_fcmp_32ndEe_U2;
    delete fc_layer_mul_32s_eOg_U3;
}

void fc_layer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fc_layer::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void fc_layer::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv32_0;
}

void fc_layer::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void fc_layer::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void fc_layer::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void fc_layer::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void fc_layer::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void fc_layer::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv4_F;
}

void fc_layer::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_mem_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_ARREADY.read())))) {
            ap_reg_ioackin_mem_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_mem_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_AWREADY.read())))) {
            ap_reg_ioackin_mem_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_mem_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_mem_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, mem_WREADY.read())))) {
            ap_reg_ioackin_mem_WREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_332_p2.read()))) {
        b_reg_127 = b_1_reg_606.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        b_reg_127 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read())) {
        i_reg_195 = i_1_reg_663.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_reg_195 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_307_p2.read()))) {
        o_reg_161 = ap_const_lv31_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state82.read()) && 
                !(esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())))) {
        o_reg_161 = o_1_reg_629.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_332_p2.read()))) {
        phi_mul1_reg_138 = next_mul2_reg_598.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        phi_mul1_reg_138 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_332_p2.read()))) {
        phi_mul3_reg_150 = next_mul4_reg_593.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        phi_mul3_reg_150 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_307_p2.read()))) {
        phi_mul_reg_172 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state82.read()) && 
                !(esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())))) {
        phi_mul_reg_172 = next_mul_reg_616.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_15_reg_711.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_753.read()))) {
        tmp_8_be_reg_206 = output_element_1_reg_762.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_711.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_753.read())))) {
        tmp_8_be_reg_206 = tmp_8_reg_184.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read())) {
        tmp_8_reg_184 = tmp_8_be_phi_fu_210_p6.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tmp_8_reg_184 = output_element_reg_650.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        b_1_reg_606 = b_1_fu_312_p2.read();
        next_mul2_reg_598 = next_mul2_fu_298_p2.read();
        next_mul4_reg_593 = next_mul4_fu_293_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        batch_size_read_reg_552 = batch_size.read();
        enable_relu_read_reg_531 = enable_relu.read();
        num_inputs_read_reg_544 = num_inputs.read();
        num_outputs_read_reg_536 = num_outputs.read();
        tmp_2_reg_562 = output_offset.read().range(31, 2);
        tmp_reg_557 = input_offset.read().range(31, 2);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        i_1_reg_663 = i_1_fu_367_p2.read();
        i_cast_reg_655 = i_cast_fu_358_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        input_element_reg_689 = mem_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        next_mul_reg_616 = next_mul_fu_323_p2.read();
        o_1_reg_629 = o_1_fu_337_p2.read();
        o_cast_reg_621 = o_cast_fu_328_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state49.read())) {
        notlhs1_reg_738 = notlhs1_fu_463_p2.read();
        notrhs1_reg_743 = notrhs1_fu_469_p2.read();
        tmp_21_reg_748 = grp_fu_230_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        notlhs8_reg_696 = notlhs8_fu_410_p2.read();
        notrhs9_reg_701 = notrhs9_fu_416_p2.read();
        tmp_14_reg_706 = grp_fu_230_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read())) {
        notlhs_reg_767 = notlhs_fu_502_p2.read();
        notrhs_reg_772 = notrhs_fu_508_p2.read();
        tmp_29_reg_777 = grp_fu_230_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        num_weights_reg_571 = grp_fu_251_p2.read();
        tmp2_reg_588 = tmp2_fu_288_p2.read();
        tmp_4_reg_583 = tmp_4_fu_285_p1.read();
        tmp_s_reg_577 = tmp_s_fu_282_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state71.read())) {
        output_element_1_reg_762 = grp_fu_221_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        output_element_reg_650 = mem_RDATA.read();
    }
    if (((esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && 
  esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_1)))) {
        reg_240 = grp_fu_236_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_332_p2.read()))) {
        tmp1_reg_634 = tmp1_fu_343_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        tmp3_reg_673 = tmp3_fu_379_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(tmp_5_fu_362_p2.read(), ap_const_lv1_1))) {
        tmp4_reg_668 = tmp4_fu_373_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_15_reg_711.read()))) {
        tmp5_reg_715 = tmp5_fu_431_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_10_reg_678 = tmp_10_fu_383_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read())) {
        tmp_15_reg_711 = tmp_15_fu_426_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        tmp_16_reg_720 = tmp_16_fu_435_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_1_reg_567 = tmp_1_fu_277_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1))) {
        tmp_22_reg_782 = tmp_22_fu_523_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) {
        tmp_24_reg_757 = grp_fu_226_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read())) {
        tmp_25_reg_753 = tmp_25_fu_479_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_3_fu_307_p2.read()))) {
        tmp_6_reg_611 = tmp_6_fu_318_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_9_reg_639 = tmp_9_fu_348_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
        weight_element_reg_731 = mem_RDATA.read();
    }
}

void fc_layer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fc_layer::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void fc_layer::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void fc_layer::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void fc_layer::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void fc_layer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fc_layer::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void fc_layer::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void fc_layer::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void fc_layer::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void fc_layer::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void fc_layer::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void fc_layer::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void fc_layer::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void fc_layer::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void fc_layer::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void fc_layer::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void fc_layer::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void fc_layer::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void fc_layer::thread_ap_CS_fsm_state49() {
    ap_CS_fsm_state49 = ap_CS_fsm.read()[48];
}

void fc_layer::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void fc_layer::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void fc_layer::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void fc_layer::thread_ap_CS_fsm_state59() {
    ap_CS_fsm_state59 = ap_CS_fsm.read()[58];
}

void fc_layer::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void fc_layer::thread_ap_CS_fsm_state71() {
    ap_CS_fsm_state71 = ap_CS_fsm.read()[70];
}

void fc_layer::thread_ap_CS_fsm_state72() {
    ap_CS_fsm_state72 = ap_CS_fsm.read()[71];
}

void fc_layer::thread_ap_CS_fsm_state75() {
    ap_CS_fsm_state75 = ap_CS_fsm.read()[74];
}

void fc_layer::thread_ap_CS_fsm_state76() {
    ap_CS_fsm_state76 = ap_CS_fsm.read()[75];
}

void fc_layer::thread_ap_CS_fsm_state77() {
    ap_CS_fsm_state77 = ap_CS_fsm.read()[76];
}

void fc_layer::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void fc_layer::thread_ap_CS_fsm_state82() {
    ap_CS_fsm_state82 = ap_CS_fsm.read()[81];
}

void fc_layer::thread_ap_CS_fsm_state83() {
    ap_CS_fsm_state83 = ap_CS_fsm.read()[82];
}

void fc_layer::thread_ap_CS_fsm_state84() {
    ap_CS_fsm_state84 = ap_CS_fsm.read()[83];
}

void fc_layer::thread_ap_CS_fsm_state89() {
    ap_CS_fsm_state89 = ap_CS_fsm.read()[88];
}

void fc_layer::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void fc_layer::thread_ap_block_state82() {
    ap_block_state82 = (esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read()));
}

void fc_layer::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_307_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fc_layer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fc_layer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_307_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fc_layer::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void fc_layer::thread_ap_sig_ioackin_mem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) {
        ap_sig_ioackin_mem_ARREADY = mem_ARREADY.read();
    } else {
        ap_sig_ioackin_mem_ARREADY = ap_const_logic_1;
    }
}

void fc_layer::thread_ap_sig_ioackin_mem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_AWREADY.read())) {
        ap_sig_ioackin_mem_AWREADY = mem_AWREADY.read();
    } else {
        ap_sig_ioackin_mem_AWREADY = ap_const_logic_1;
    }
}

void fc_layer::thread_ap_sig_ioackin_mem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())) {
        ap_sig_ioackin_mem_WREADY = mem_WREADY.read();
    } else {
        ap_sig_ioackin_mem_WREADY = ap_const_logic_1;
    }
}

void fc_layer::thread_b_1_fu_312_p2() {
    b_1_fu_312_p2 = (!b_reg_127.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(b_reg_127.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void fc_layer::thread_b_cast_fu_303_p1() {
    b_cast_fu_303_p1 = esl_zext<32,31>(b_reg_127.read());
}

void fc_layer::thread_grp_fu_230_opcode() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()))) {
        grp_fu_230_opcode = ap_const_lv5_1;
    } else if ((esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()))) {
        grp_fu_230_opcode = ap_const_lv5_2;
    } else {
        grp_fu_230_opcode = "XXXXX";
    }
}

void fc_layer::thread_grp_fu_230_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        grp_fu_230_p0 = weight_element_reg_731.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        grp_fu_230_p0 = input_element_reg_689.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_230_p0 = tmp_8_reg_184.read();
    } else {
        grp_fu_230_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fc_layer::thread_grp_fu_236_p2() {
    grp_fu_236_p2 = (!o_cast_reg_621.read().is_01() || !tmp_6_reg_611.read().is_01())? sc_lv<32>(): (sc_biguint<32>(o_cast_reg_621.read()) + sc_biguint<32>(tmp_6_reg_611.read()));
}

void fc_layer::thread_i_1_fu_367_p2() {
    i_1_fu_367_p2 = (!i_reg_195.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_reg_195.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void fc_layer::thread_i_cast_fu_358_p1() {
    i_cast_fu_358_p1 = esl_zext<32,31>(i_reg_195.read());
}

void fc_layer::thread_input_element_to_int_fu_393_p1() {
    input_element_to_int_fu_393_p1 = input_element_reg_689.read();
}

void fc_layer::thread_mem_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
            mem_ARADDR = tmp_16_reg_720.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
            mem_ARADDR = tmp_10_reg_678.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            mem_ARADDR = tmp_9_reg_639.read();
        } else {
            mem_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        mem_ARADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fc_layer::thread_mem_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_ARREADY.read())))) {
        mem_ARVALID = ap_const_logic_1;
    } else {
        mem_ARVALID = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_AWREADY.read())))) {
        mem_AWVALID = ap_const_logic_1;
    } else {
        mem_AWVALID = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state82.read()) && 
          esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && 
          !(esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()) && 
          esl_seteq<1,1,1>(mem_BVALID.read(), ap_const_logic_1)))) {
        mem_BREADY = ap_const_logic_1;
    } else {
        mem_BREADY = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
          esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
          esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1)))) {
        mem_RREADY = ap_const_logic_1;
    } else {
        mem_RREADY = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read())) {
            mem_WDATA = tmp_8_reg_184.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read())) {
            mem_WDATA = tmp_22_reg_782.read();
        } else {
            mem_WDATA =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        mem_WDATA =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void fc_layer::thread_mem_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_mem_WREADY.read())))) {
        mem_WVALID = ap_const_logic_1;
    } else {
        mem_WVALID = ap_const_logic_0;
    }
}

void fc_layer::thread_mem_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        mem_blk_n_AR = m_axi_mem_ARREADY.read();
    } else {
        mem_blk_n_AR = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()))) {
        mem_blk_n_AW = m_axi_mem_AWREADY.read();
    } else {
        mem_blk_n_AW = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_B() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state82.read()) && 
          esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()))) {
        mem_blk_n_B = m_axi_mem_BVALID.read();
    } else {
        mem_blk_n_B = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()))) {
        mem_blk_n_R = m_axi_mem_RVALID.read();
    } else {
        mem_blk_n_R = ap_const_logic_1;
    }
}

void fc_layer::thread_mem_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()))) {
        mem_blk_n_W = m_axi_mem_WREADY.read();
    } else {
        mem_blk_n_W = ap_const_logic_1;
    }
}

void fc_layer::thread_next_mul2_fu_298_p2() {
    next_mul2_fu_298_p2 = (!phi_mul1_reg_138.read().is_01() || !num_inputs_read_reg_544.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_138.read()) + sc_bigint<32>(num_inputs_read_reg_544.read()));
}

void fc_layer::thread_next_mul4_fu_293_p2() {
    next_mul4_fu_293_p2 = (!phi_mul3_reg_150.read().is_01() || !num_outputs_read_reg_536.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul3_reg_150.read()) + sc_bigint<32>(num_outputs_read_reg_536.read()));
}

void fc_layer::thread_next_mul_fu_323_p2() {
    next_mul_fu_323_p2 = (!phi_mul_reg_172.read().is_01() || !num_inputs_read_reg_544.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_172.read()) + sc_bigint<32>(num_inputs_read_reg_544.read()));
}

void fc_layer::thread_notlhs1_fu_463_p2() {
    notlhs1_fu_463_p2 = (!tmp_17_fu_449_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_17_fu_449_p4.read() != ap_const_lv8_FF);
}

void fc_layer::thread_notlhs8_fu_410_p2() {
    notlhs8_fu_410_p2 = (!tmp_11_fu_396_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_11_fu_396_p4.read() != ap_const_lv8_FF);
}

void fc_layer::thread_notlhs_fu_502_p2() {
    notlhs_fu_502_p2 = (!tmp_26_fu_488_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_26_fu_488_p4.read() != ap_const_lv8_FF);
}

void fc_layer::thread_notrhs1_fu_469_p2() {
    notrhs1_fu_469_p2 = (!tmp_18_fu_459_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_18_fu_459_p1.read() == ap_const_lv23_0);
}

void fc_layer::thread_notrhs9_fu_416_p2() {
    notrhs9_fu_416_p2 = (!tmp_12_fu_406_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_12_fu_406_p1.read() == ap_const_lv23_0);
}

void fc_layer::thread_notrhs_fu_508_p2() {
    notrhs_fu_508_p2 = (!tmp_27_fu_498_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_27_fu_498_p1.read() == ap_const_lv23_0);
}

void fc_layer::thread_o_1_fu_337_p2() {
    o_1_fu_337_p2 = (!o_reg_161.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(o_reg_161.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void fc_layer::thread_o_cast_fu_328_p1() {
    o_cast_fu_328_p1 = esl_zext<32,31>(o_reg_161.read());
}

void fc_layer::thread_tmp1_fu_343_p2() {
    tmp1_fu_343_p2 = (!tmp_s_reg_577.read().is_01() || !o_cast_fu_328_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_s_reg_577.read()) + sc_biguint<32>(o_cast_fu_328_p1.read()));
}

void fc_layer::thread_tmp2_fu_288_p2() {
    tmp2_fu_288_p2 = (!tmp_s_fu_282_p1.read().is_01() || !num_outputs_read_reg_536.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_s_fu_282_p1.read()) + sc_bigint<32>(num_outputs_read_reg_536.read()));
}

void fc_layer::thread_tmp3_fu_379_p2() {
    tmp3_fu_379_p2 = (!tmp4_reg_668.read().is_01() || !num_weights_reg_571.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp4_reg_668.read()) + sc_biguint<32>(num_weights_reg_571.read()));
}

void fc_layer::thread_tmp4_fu_373_p2() {
    tmp4_fu_373_p2 = (!phi_mul1_reg_138.read().is_01() || !i_cast_fu_358_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_138.read()) + sc_biguint<32>(i_cast_fu_358_p1.read()));
}

void fc_layer::thread_tmp5_fu_431_p2() {
    tmp5_fu_431_p2 = (!tmp_s_reg_577.read().is_01() || !i_cast_reg_655.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_s_reg_577.read()) + sc_biguint<32>(i_cast_reg_655.read()));
}

void fc_layer::thread_tmp_10_fu_383_p2() {
    tmp_10_fu_383_p2 = (!tmp3_reg_673.read().is_01() || !tmp2_reg_588.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp3_reg_673.read()) + sc_biguint<32>(tmp2_reg_588.read()));
}

void fc_layer::thread_tmp_10_to_int_fu_484_p1() {
    tmp_10_to_int_fu_484_p1 = tmp_8_reg_184.read();
}

void fc_layer::thread_tmp_11_fu_396_p4() {
    tmp_11_fu_396_p4 = input_element_to_int_fu_393_p1.read().range(30, 23);
}

void fc_layer::thread_tmp_12_fu_406_p1() {
    tmp_12_fu_406_p1 = input_element_to_int_fu_393_p1.read().range(23-1, 0);
}

void fc_layer::thread_tmp_13_fu_422_p2() {
    tmp_13_fu_422_p2 = (notrhs9_reg_701.read() | notlhs8_reg_696.read());
}

void fc_layer::thread_tmp_15_fu_426_p2() {
    tmp_15_fu_426_p2 = (tmp_13_fu_422_p2.read() & tmp_14_reg_706.read());
}

void fc_layer::thread_tmp_16_fu_435_p2() {
    tmp_16_fu_435_p2 = (!tmp5_reg_715.read().is_01() || !phi_mul_reg_172.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp5_reg_715.read()) + sc_biguint<32>(phi_mul_reg_172.read()));
}

void fc_layer::thread_tmp_17_fu_449_p4() {
    tmp_17_fu_449_p4 = weight_element_to_in_fu_446_p1.read().range(30, 23);
}

void fc_layer::thread_tmp_18_fu_459_p1() {
    tmp_18_fu_459_p1 = weight_element_to_in_fu_446_p1.read().range(23-1, 0);
}

void fc_layer::thread_tmp_19_fu_475_p2() {
    tmp_19_fu_475_p2 = (notrhs1_reg_743.read() | notlhs1_reg_738.read());
}

void fc_layer::thread_tmp_1_fu_277_p2() {
    tmp_1_fu_277_p2 = (!enable_relu_read_reg_531.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(enable_relu_read_reg_531.read() == ap_const_lv32_0);
}

void fc_layer::thread_tmp_22_fu_523_p3() {
    tmp_22_fu_523_p3 = (!tmp_30_fu_518_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_30_fu_518_p2.read()[0].to_bool())? tmp_8_reg_184.read(): ap_const_lv32_0);
}

void fc_layer::thread_tmp_25_fu_479_p2() {
    tmp_25_fu_479_p2 = (tmp_19_fu_475_p2.read() & tmp_21_reg_748.read());
}

void fc_layer::thread_tmp_26_fu_488_p4() {
    tmp_26_fu_488_p4 = tmp_10_to_int_fu_484_p1.read().range(30, 23);
}

void fc_layer::thread_tmp_27_fu_498_p1() {
    tmp_27_fu_498_p1 = tmp_10_to_int_fu_484_p1.read().range(23-1, 0);
}

void fc_layer::thread_tmp_28_fu_514_p2() {
    tmp_28_fu_514_p2 = (notrhs_reg_772.read() | notlhs_reg_767.read());
}

void fc_layer::thread_tmp_30_fu_518_p2() {
    tmp_30_fu_518_p2 = (tmp_28_fu_514_p2.read() & tmp_29_reg_777.read());
}

void fc_layer::thread_tmp_3_fu_307_p2() {
    tmp_3_fu_307_p2 = (!b_cast_fu_303_p1.read().is_01() || !batch_size_read_reg_552.read().is_01())? sc_lv<1>(): (sc_bigint<32>(b_cast_fu_303_p1.read()) < sc_bigint<32>(batch_size_read_reg_552.read()));
}

void fc_layer::thread_tmp_4_fu_285_p1() {
    tmp_4_fu_285_p1 = esl_zext<32,30>(tmp_2_reg_562.read());
}

void fc_layer::thread_tmp_5_fu_362_p2() {
    tmp_5_fu_362_p2 = (!i_cast_fu_358_p1.read().is_01() || !num_inputs_read_reg_544.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_cast_fu_358_p1.read()) < sc_bigint<32>(num_inputs_read_reg_544.read()));
}

void fc_layer::thread_tmp_6_fu_318_p2() {
    tmp_6_fu_318_p2 = (!phi_mul3_reg_150.read().is_01() || !tmp_4_reg_583.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul3_reg_150.read()) + sc_biguint<32>(tmp_4_reg_583.read()));
}

void fc_layer::thread_tmp_7_fu_332_p2() {
    tmp_7_fu_332_p2 = (!o_cast_fu_328_p1.read().is_01() || !num_outputs_read_reg_536.read().is_01())? sc_lv<1>(): (sc_bigint<32>(o_cast_fu_328_p1.read()) < sc_bigint<32>(num_outputs_read_reg_536.read()));
}

void fc_layer::thread_tmp_8_be_phi_fu_210_p6() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_15_reg_711.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state72.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_25_reg_753.read()))) {
        tmp_8_be_phi_fu_210_p6 = output_element_1_reg_762.read();
    } else {
        tmp_8_be_phi_fu_210_p6 = tmp_8_be_reg_206.read();
    }
}

void fc_layer::thread_tmp_9_fu_348_p2() {
    tmp_9_fu_348_p2 = (!tmp1_reg_634.read().is_01() || !num_weights_reg_571.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp1_reg_634.read()) + sc_biguint<32>(num_weights_reg_571.read()));
}

void fc_layer::thread_tmp_s_fu_282_p1() {
    tmp_s_fu_282_p1 = esl_zext<32,30>(tmp_reg_557.read());
}

void fc_layer::thread_weight_element_to_in_fu_446_p1() {
    weight_element_to_in_fu_446_p1 = weight_element_reg_731.read();
}

void fc_layer::thread_ap_NS_fsm() {
    if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        ap_NS_fsm = ap_ST_fsm_state3;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state4;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_3_fu_307_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state9;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_7_fu_332_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state8;
        } else {
            ap_NS_fsm = ap_ST_fsm_state10;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state12;
        } else {
            ap_NS_fsm = ap_ST_fsm_state11;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state19;
        } else {
            ap_NS_fsm = ap_ST_fsm_state18;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()) && esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state83;
        } else if ((esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_362_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state73;
        } else {
            ap_NS_fsm = ap_ST_fsm_state21;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state24;
        } else {
            ap_NS_fsm = ap_ST_fsm_state23;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state31;
        } else {
            ap_NS_fsm = ap_ST_fsm_state30;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_15_reg_711.read()))) {
            ap_NS_fsm = ap_ST_fsm_state72;
        } else {
            ap_NS_fsm = ap_ST_fsm_state37;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_ARREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state39;
        } else {
            ap_NS_fsm = ap_ST_fsm_state38;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && esl_seteq<1,1,1>(mem_RVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state46;
        } else {
            ap_NS_fsm = ap_ST_fsm_state45;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_25_reg_753.read()))) {
            ap_NS_fsm = ap_ST_fsm_state72;
        } else {
            ap_NS_fsm = ap_ST_fsm_state52;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        ap_NS_fsm = ap_ST_fsm_state68;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state70;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state71;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state71))
    {
        ap_NS_fsm = ap_ST_fsm_state72;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state72))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state73))
    {
        ap_NS_fsm = ap_ST_fsm_state74;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state74))
    {
        ap_NS_fsm = ap_ST_fsm_state75;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state75))
    {
        ap_NS_fsm = ap_ST_fsm_state76;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state76))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state76.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state77;
        } else {
            ap_NS_fsm = ap_ST_fsm_state76;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state77))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state77.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state78;
        } else {
            ap_NS_fsm = ap_ST_fsm_state77;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state78))
    {
        ap_NS_fsm = ap_ST_fsm_state79;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state79))
    {
        ap_NS_fsm = ap_ST_fsm_state80;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state80))
    {
        ap_NS_fsm = ap_ST_fsm_state81;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state81))
    {
        ap_NS_fsm = ap_ST_fsm_state82;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state82))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state82.read()) && !(esl_seteq<1,1,1>(tmp_1_reg_567.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, mem_BVALID.read())))) {
            ap_NS_fsm = ap_ST_fsm_state9;
        } else {
            ap_NS_fsm = ap_ST_fsm_state82;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state83))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_AWREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state84;
        } else {
            ap_NS_fsm = ap_ST_fsm_state83;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state84))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_mem_WREADY.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state85;
        } else {
            ap_NS_fsm = ap_ST_fsm_state84;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state85))
    {
        ap_NS_fsm = ap_ST_fsm_state86;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state86))
    {
        ap_NS_fsm = ap_ST_fsm_state87;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state87))
    {
        ap_NS_fsm = ap_ST_fsm_state88;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state88))
    {
        ap_NS_fsm = ap_ST_fsm_state89;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state89))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()) && esl_seteq<1,1,1>(mem_BVALID.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state82;
        } else {
            ap_NS_fsm = ap_ST_fsm_state89;
        }
    }
    else
    {
        ap_NS_fsm =  (sc_lv<89>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
void fc_layer::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_mem_AWVALID\" :  \"" << m_axi_mem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_AWREADY\" :  \"" << m_axi_mem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWADDR\" :  \"" << m_axi_mem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWID\" :  \"" << m_axi_mem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLEN\" :  \"" << m_axi_mem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWSIZE\" :  \"" << m_axi_mem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWBURST\" :  \"" << m_axi_mem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWLOCK\" :  \"" << m_axi_mem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWCACHE\" :  \"" << m_axi_mem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWPROT\" :  \"" << m_axi_mem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWQOS\" :  \"" << m_axi_mem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWREGION\" :  \"" << m_axi_mem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_AWUSER\" :  \"" << m_axi_mem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WVALID\" :  \"" << m_axi_mem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_WREADY\" :  \"" << m_axi_mem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WDATA\" :  \"" << m_axi_mem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WSTRB\" :  \"" << m_axi_mem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WLAST\" :  \"" << m_axi_mem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WID\" :  \"" << m_axi_mem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_WUSER\" :  \"" << m_axi_mem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARVALID\" :  \"" << m_axi_mem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_ARREADY\" :  \"" << m_axi_mem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARADDR\" :  \"" << m_axi_mem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARID\" :  \"" << m_axi_mem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLEN\" :  \"" << m_axi_mem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARSIZE\" :  \"" << m_axi_mem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARBURST\" :  \"" << m_axi_mem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARLOCK\" :  \"" << m_axi_mem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARCACHE\" :  \"" << m_axi_mem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARPROT\" :  \"" << m_axi_mem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARQOS\" :  \"" << m_axi_mem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARREGION\" :  \"" << m_axi_mem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_ARUSER\" :  \"" << m_axi_mem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RVALID\" :  \"" << m_axi_mem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_RREADY\" :  \"" << m_axi_mem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RDATA\" :  \"" << m_axi_mem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RLAST\" :  \"" << m_axi_mem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RID\" :  \"" << m_axi_mem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RUSER\" :  \"" << m_axi_mem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_RRESP\" :  \"" << m_axi_mem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BVALID\" :  \"" << m_axi_mem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_mem_BREADY\" :  \"" << m_axi_mem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BRESP\" :  \"" << m_axi_mem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BID\" :  \"" << m_axi_mem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_mem_BUSER\" :  \"" << m_axi_mem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

