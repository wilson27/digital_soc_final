-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc_layer is
generic (
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_TARGET_ADDR : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_ce : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fc_layer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fc_layer,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tsbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.239000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=25,HLS_SYN_FF=5927,HLS_SYN_LUT=2943}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (50 downto 0) := "000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (50 downto 0) := "000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (50 downto 0) := "000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (50 downto 0) := "000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (50 downto 0) := "000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (50 downto 0) := "000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (50 downto 0) := "000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (50 downto 0) := "000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (50 downto 0) := "000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (50 downto 0) := "001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (50 downto 0) := "010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (50 downto 0) := "100000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_size : STD_LOGIC_VECTOR (31 downto 0);
    signal num_inputs : STD_LOGIC_VECTOR (31 downto 0);
    signal num_outputs : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_relu : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_flag00000000 : BOOLEAN;
    signal tmp_5_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_flag00000000 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_5_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_flag00000000 : BOOLEAN;
    signal tmp_15_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal mem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal mem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal tmp_1_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RLAST : STD_LOGIC;
    signal mem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal mem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_177 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal enable_relu_read_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_outputs_read_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_inputs_read_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_585 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_reg_590 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_weights_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_631 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_flatten_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvar_flatten_next_reg_647 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal b_s_fu_321_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_s_reg_652 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_cast_mid2_fu_327_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_cast_mid2_reg_657 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_mid2_v_v_fu_334_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_mid2_v_v_reg_662 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal o_cast_mid2_cast_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_cast_mid2_cast_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_674 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid2_v_fu_348_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid2_v_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_9_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_ARREADY : STD_LOGIC;
    signal grp_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_mid2_v_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_6_mid2_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_mid2_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal output_element_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_mid2_reg_711 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state21_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_i_cast_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_5_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_5_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_387_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_730 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp4_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state22_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state46_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state58_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal tmp_10_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state23_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state35_pp0_stage2_iter1 : BOOLEAN;
    signal ap_predicate_op211_readreq_state35 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_state47_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state59_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal ap_block_state24_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state36_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state48_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state60_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal input_element_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state31_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_state43_pp0_stage10_iter1 : BOOLEAN;
    signal ap_block_state55_pp0_stage10_iter2 : BOOLEAN;
    signal ap_block_state67_pp0_stage10_iter3 : BOOLEAN;
    signal ap_block_pp0_stage10_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_input_element_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs8_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs8_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs9_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs9_reg_768 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_15_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_15_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_element_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state30_pp0_stage9_iter0 : BOOLEAN;
    signal ap_predicate_op218_read_state42 : BOOLEAN;
    signal ap_block_state42_pp0_stage9_iter1 : BOOLEAN;
    signal ap_block_state54_pp0_stage9_iter2 : BOOLEAN;
    signal ap_block_state66_pp0_stage9_iter3 : BOOLEAN;
    signal ap_block_pp0_stage9_flag00011001 : BOOLEAN;
    signal notlhs1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs1_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_26_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_26_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal notlhs_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_814 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal notrhs_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_544_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_mem_AWREADY : STD_LOGIC;
    signal o_op_fu_552_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal o_op_reg_839 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state78 : BOOLEAN;
    signal o_1_fu_558_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state32_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_state44_pp0_stage11_iter1 : BOOLEAN;
    signal ap_block_state56_pp0_stage11_iter2 : BOOLEAN;
    signal ap_block_pp0_stage11_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage10_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter2_state55 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal indvar_flatten_reg_141 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_reg_153 : STD_LOGIC_VECTOR (30 downto 0);
    signal b_reg_165 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_phi_fu_181_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_8_phi_fu_192_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_phi_fu_203_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter2_tmp_25_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11_flag00011001 : BOOLEAN;
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_mem_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_flag00001001 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00001001 : BOOLEAN;
    signal ap_reg_ioackin_mem_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_mem_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_mem_WREADY : STD_LOGIC;
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11_flag00000000 : BOOLEAN;
    signal cast1_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_cast_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_351_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_366_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_370_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal input_element_to_int_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_415_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_425_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_13_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_element_to_in_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_470_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_480_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_19_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_to_int_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_509_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_519_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_29_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_214_ce : STD_LOGIC;
    signal ap_block_state25_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state37_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state49_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state61_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state26_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state38_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state50_pp0_stage5_iter2 : BOOLEAN;
    signal ap_block_state62_pp0_stage5_iter3 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state27_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state39_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_state51_pp0_stage6_iter2 : BOOLEAN;
    signal ap_block_state63_pp0_stage6_iter3 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state28_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state40_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_state52_pp0_stage7_iter2 : BOOLEAN;
    signal ap_block_state64_pp0_stage7_iter3 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state29_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state41_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_state53_pp0_stage8_iter2 : BOOLEAN;
    signal ap_block_state65_pp0_stage8_iter3 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal ap_predicate_op219_fcmp_state43 : BOOLEAN;
    signal ap_predicate_op227_fcmp_state46 : BOOLEAN;
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_224_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage11_flag00000001 : BOOLEAN;
    signal ap_block_pp0_stage10_flag00000001 : BOOLEAN;
    signal grp_fu_245_ce : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_279_ce : STD_LOGIC;
    signal grp_fu_315_ce : STD_LOGIC;
    signal grp_fu_351_ce : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_366_ce : STD_LOGIC;
    signal grp_fu_370_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (50 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage9_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_279_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_279_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_351_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_1526 : BOOLEAN;
    signal ap_condition_1531 : BOOLEAN;
    signal ap_condition_1535 : BOOLEAN;
    signal ap_condition_1539 : BOOLEAN;

    component fc_layer_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_fcmp_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fc_layer_mul_32s_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_mul_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fc_layer_add_64nsg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fc_layer_mul_31nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        batch_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_inputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_outputs : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_relu : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc_layer_mem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fc_layer_CTRL_BUS_s_axi_U : component fc_layer_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_offset => input_offset,
        output_offset => output_offset,
        batch_size => batch_size,
        num_inputs => num_inputs,
        num_outputs => num_outputs,
        enable_relu => enable_relu);

    fc_layer_mem_m_axi_U : component fc_layer_mem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEM_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_ce,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RID => mem_RID,
        I_RUSER => mem_RUSER,
        I_RRESP => mem_RRESP,
        I_RLAST => mem_RLAST,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => reg_234,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => mem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY,
        I_BRESP => mem_BRESP,
        I_BID => mem_BID,
        I_BUSER => mem_BUSER);

    fc_layer_fadd_32nbkb_U0 : component fc_layer_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_8_phi_fu_192_p4,
        din1 => tmp_24_reg_809,
        ce => grp_fu_214_ce,
        dout => grp_fu_214_p2);

    fc_layer_fmul_32ncud_U1 : component fc_layer_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_reg_pp0_iter1_input_element_reg_756,
        din1 => weight_element_reg_783,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p2);

    fc_layer_fcmp_32ndEe_U2 : component fc_layer_fcmp_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_224_p0,
        din1 => ap_const_lv32_0,
        ce => grp_fu_224_ce,
        opcode => grp_fu_224_opcode,
        dout => grp_fu_224_p2);

    fc_layer_mul_32s_eOg_U3 : component fc_layer_mul_32s_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => num_outputs,
        din1 => num_inputs,
        ce => grp_fu_245_ce,
        dout => grp_fu_245_p2);

    fc_layer_mul_32nsfYi_U4 : component fc_layer_mul_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_279_p0,
        din1 => grp_fu_279_p1,
        ce => grp_fu_279_ce,
        dout => grp_fu_279_p2);

    fc_layer_add_64nsg8j_U5 : component fc_layer_add_64nsg8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => indvar_flatten_reg_141,
        din1 => ap_const_lv64_1,
        ce => grp_fu_315_ce,
        dout => grp_fu_315_p2);

    fc_layer_mul_31nshbi_U6 : component fc_layer_mul_31nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_351_p0,
        din1 => num_outputs_read_reg_569,
        ce => grp_fu_351_ce,
        dout => grp_fu_351_p2);

    fc_layer_mul_31nshbi_U7 : component fc_layer_mul_31nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_366_p0,
        din1 => num_inputs_read_reg_577,
        ce => grp_fu_366_ce,
        dout => grp_fu_366_p2);

    fc_layer_mul_31nshbi_U8 : component fc_layer_mul_31nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_370_p0,
        din1 => num_inputs_read_reg_577,
        ce => grp_fu_370_ce,
        dout => grp_fu_370_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                if ((ap_const_logic_1 = ap_ce)) then 
                    ap_CS_fsm <= ap_NS_fsm;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0) and (tmp_5_reg_726 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter2_state55)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter2_state55) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_ce = ap_const_logic_1) and (ap_const_boolean_1 = ap_predicate_op211_readreq_state35) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = mem_ARREADY) and (ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_ce = ap_const_logic_1) and (ap_const_boolean_1 = ap_predicate_op211_readreq_state35) and (ap_const_logic_1 = mem_ARREADY) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0)))) then 
                    ap_reg_ioackin_mem_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state72) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state79) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state72) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state79) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = mem_AWREADY)))) then 
                    ap_reg_ioackin_mem_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_mem_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state73) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1)))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state73) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = mem_WREADY)))) then 
                    ap_reg_ioackin_mem_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ce = ap_const_logic_1) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_5_reg_726) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_15_reg_773)) or ((ap_ce = ap_const_logic_1) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_5_reg_726) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter2_tmp_15_reg_773) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_26_reg_805)))) then 
                ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199 <= tmp_8_reg_188;
            elsif (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0))) then 
                ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199 <= ap_phi_precharge_reg_pp0_iter2_tmp_25_reg_199;
            end if; 
        end if;
    end process;

    b_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ce = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    b_reg_165 <= tmp_4_mid2_v_v_reg_662;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    b_reg_165 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    i_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ce = ap_const_logic_1)) then
                if ((ap_condition_1526 = ap_const_boolean_1)) then 
                    i_reg_177 <= i_1_reg_730;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    i_reg_177 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ce = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    indvar_flatten_reg_141 <= indvar_flatten_next_reg_647;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    indvar_flatten_reg_141 <= ap_const_lv64_0;
                end if;
            end if; 
        end if;
    end process;

    o_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ce = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                    o_reg_153 <= o_1_fu_558_p3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    o_reg_153 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    tmp_8_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ce = ap_const_logic_1)) then
                if ((ap_condition_1539 = ap_const_boolean_1)) then 
                    tmp_8_reg_188 <= tmp_25_phi_fu_203_p6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    tmp_8_reg_188 <= output_element_reg_706;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                    ap_reg_pp0_iter1_i_cast_reg_721(30 downto 0) <= i_cast_reg_721(30 downto 0);
                ap_reg_pp0_iter1_tmp_5_reg_726 <= tmp_5_reg_726;
                ap_reg_pp0_iter2_tmp_5_reg_726 <= ap_reg_pp0_iter1_tmp_5_reg_726;
                ap_reg_pp0_iter3_tmp_5_reg_726 <= ap_reg_pp0_iter2_tmp_5_reg_726;
                    i_cast_reg_721(30 downto 0) <= i_cast_fu_378_p1(30 downto 0);
                tmp_5_reg_726 <= tmp_5_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_input_element_reg_756 <= input_element_reg_756;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter2_tmp_15_reg_773 <= tmp_15_reg_773;
                ap_reg_pp0_iter3_tmp_15_reg_773 <= ap_reg_pp0_iter2_tmp_15_reg_773;
                ap_reg_pp0_iter3_tmp_26_reg_805 <= tmp_26_reg_805;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_flatten_reg_643) and (ap_const_lv1_0 = tmp_7_reg_636))) then
                b_s_reg_652 <= b_s_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                bound_reg_631 <= grp_fu_279_p2;
                num_weights_reg_609 <= grp_fu_245_p2;
                tmp2_reg_626 <= tmp2_fu_296_p2;
                    tmp_3_reg_615(29 downto 0) <= tmp_3_fu_290_p1(29 downto 0);
                    tmp_4_reg_621(29 downto 0) <= tmp_4_fu_293_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_ce = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then
                enable_relu_read_reg_564 <= enable_relu;
                num_inputs_read_reg_577 <= num_inputs;
                num_outputs_read_reg_569 <= num_outputs;
                tmp_2_reg_590 <= output_offset(31 downto 2);
                tmp_reg_585 <= input_offset(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                exitcond_flatten_reg_643 <= exitcond_flatten_fu_310_p2;
                tmp_7_reg_636 <= tmp_7_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                i_1_reg_730 <= i_1_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                indvar_flatten_next_reg_647 <= grp_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0))) then
                input_element_reg_756 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_15_reg_773) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_5_reg_726))) then
                notlhs1_reg_790 <= notlhs1_fu_484_p2;
                notrhs1_reg_795 <= notrhs1_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_5_reg_726) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                notlhs8_reg_763 <= notlhs8_fu_429_p2;
                notrhs9_reg_768 <= notrhs9_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                notlhs_reg_814 <= notlhs_fu_523_p2;
                notrhs_reg_819 <= notrhs_fu_529_p2;
                tmp_30_reg_824 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    o_cast_mid2_cast_reg_668(30 downto 0) <= o_cast_mid2_cast_fu_340_p1(30 downto 0);
                tmp1_reg_674 <= tmp1_fu_343_p2;
                tmp_4_mid2_v_v_reg_662 <= tmp_4_mid2_v_v_fu_334_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond_flatten_reg_643))) then
                o_cast_mid2_reg_657 <= o_cast_mid2_fu_327_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_ce = ap_const_logic_1) and not(((ap_const_lv1_0 = tmp_1_reg_605) and (ap_const_logic_0 = mem_BVALID))) and (ap_const_lv1_1 = tmp_7_reg_636))) then
                o_op_reg_839 <= o_op_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1) and (mem_RVALID = ap_const_logic_1))) then
                output_element_reg_706 <= mem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = tmp_1_reg_605) and (ap_const_logic_1 = ap_CS_fsm_state68) and (ap_ce = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_ce = ap_const_logic_1) and (ap_const_lv1_1 = tmp_1_reg_605)))) then
                reg_234 <= grp_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_reg_726 = ap_const_lv1_1) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                tmp3_reg_740 <= tmp3_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_5_fu_382_p2))) then
                tmp4_reg_735 <= tmp4_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                tmp_10_reg_745 <= tmp_10_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_5_reg_726) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                tmp_15_reg_773 <= tmp_15_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_605 <= tmp_1_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_15_reg_773) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_5_reg_726) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                tmp_21_reg_800 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                tmp_22_reg_829 <= tmp_22_fu_544_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_5_reg_726) and (ap_const_lv1_0 = ap_reg_pp0_iter2_tmp_15_reg_773) and (ap_const_lv1_0 = tmp_26_reg_805))) then
                tmp_24_reg_809 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = tmp_15_reg_773) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_5_reg_726))) then
                tmp_26_reg_805 <= tmp_26_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                tmp_4_mid2_reg_711 <= grp_fu_366_p2;
                tmp_s_reg_716 <= grp_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_4_mid2_v_reg_679(30 downto 0) <= tmp_4_mid2_v_fu_348_p1(30 downto 0);
                tmp_9_reg_685 <= tmp_9_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                tmp_6_mid2_reg_701 <= tmp_6_mid2_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_6_mid2_v_reg_696 <= grp_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_ce = ap_const_logic_1) and (ap_const_boolean_1 = ap_predicate_op218_read_state42) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0))) then
                weight_element_reg_783 <= mem_RDATA;
            end if;
        end if;
    end process;
    tmp_3_reg_615(31 downto 30) <= "00";
    tmp_4_reg_621(31 downto 30) <= "00";
    o_cast_mid2_cast_reg_668(31) <= '0';
    tmp_4_mid2_v_reg_679(31) <= '0';
    i_cast_reg_721(31) <= '0';
    ap_reg_pp0_iter1_i_cast_reg_721(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state78, tmp_1_reg_605, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state85, ap_CS_fsm_state12, ap_CS_fsm_state19, ap_ce, mem_RVALID, mem_BVALID, ap_CS_fsm_state68, exitcond_flatten_reg_643, ap_CS_fsm_state9, ap_sig_ioackin_mem_ARREADY, ap_enable_reg_pp0_iter2, ap_sig_ioackin_mem_AWREADY, ap_block_pp0_stage11_flag00011011, ap_block_pp0_stage10_flag00011011, ap_sig_ioackin_mem_WREADY, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage4_flag00011011, ap_block_pp0_stage5_flag00011011, ap_block_pp0_stage6_flag00011011, ap_block_pp0_stage7_flag00011011, ap_block_pp0_stage8_flag00011011, ap_block_pp0_stage9_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_ce = ap_const_logic_1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_flatten_reg_643))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1) and (mem_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_block_pp0_stage8_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_block_pp0_stage9_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if (((ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage10_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_block_pp0_stage11_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state68 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state68) and (ap_ce = ap_const_logic_1) and (ap_const_lv1_1 = tmp_1_reg_605))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state69;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state72) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state73;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_ce = ap_const_logic_1) and not(((ap_const_lv1_0 = tmp_1_reg_605) and (ap_const_logic_0 = mem_BVALID))))) then
                    ap_NS_fsm <= ap_ST_fsm_state86;
                else
                    ap_NS_fsm <= ap_ST_fsm_state78;
                end if;
            when ap_ST_fsm_state79 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state79) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state80) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_mem_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_ce = ap_const_logic_1) and (mem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(30);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(31);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(26);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(29);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state68 <= ap_CS_fsm(32);
    ap_CS_fsm_state69 <= ap_CS_fsm(33);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(34);
    ap_CS_fsm_state71 <= ap_CS_fsm(35);
    ap_CS_fsm_state72 <= ap_CS_fsm(36);
    ap_CS_fsm_state73 <= ap_CS_fsm(37);
    ap_CS_fsm_state78 <= ap_CS_fsm(42);
    ap_CS_fsm_state79 <= ap_CS_fsm(43);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(44);
    ap_CS_fsm_state85 <= ap_CS_fsm(49);
    ap_CS_fsm_state86 <= ap_CS_fsm(50);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage10_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_flag00000001_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_5_reg_726, mem_RVALID)
    begin
                ap_block_pp0_stage10_flag00000001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_pp0_stage10_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_5_reg_726, mem_RVALID)
    begin
                ap_block_pp0_stage10_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_0 = mem_RVALID));
    end process;


    ap_block_pp0_stage10_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_5_reg_726, ap_ce, mem_RVALID)
    begin
                ap_block_pp0_stage10_flag00011011 <= ((ap_ce = ap_const_logic_0) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_0 = mem_RVALID)));
    end process;

        ap_block_pp0_stage11_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_flag00000001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage11_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state35_io)
    begin
                ap_block_pp0_stage2_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state35_io));
    end process;


    ap_block_pp0_stage2_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_ce, ap_block_state35_io)
    begin
                ap_block_pp0_stage2_flag00011011 <= ((ap_ce = ap_const_logic_0) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state35_io)));
    end process;

        ap_block_pp0_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state24_io)
    begin
                ap_block_pp0_stage3_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state24_io));
    end process;


    ap_block_pp0_stage3_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter0, ap_ce, ap_block_state24_io)
    begin
                ap_block_pp0_stage3_flag00011011 <= ((ap_ce = ap_const_logic_0) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state24_io)));
    end process;

        ap_block_pp0_stage4_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage5_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage6_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage7_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage7_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage8_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_flag00011011_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage8_flag00011011 <= (ap_ce = ap_const_logic_0);
    end process;

        ap_block_pp0_stage9_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, mem_RVALID, ap_predicate_op218_read_state42)
    begin
                ap_block_pp0_stage9_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = mem_RVALID) and (ap_const_boolean_1 = ap_predicate_op218_read_state42));
    end process;


    ap_block_pp0_stage9_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, ap_ce, mem_RVALID, ap_predicate_op218_read_state42)
    begin
                ap_block_pp0_stage9_flag00011011 <= ((ap_ce = ap_const_logic_0) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = mem_RVALID) and (ap_const_boolean_1 = ap_predicate_op218_read_state42)));
    end process;

        ap_block_state21_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(tmp_5_reg_726, ap_sig_ioackin_mem_ARREADY)
    begin
                ap_block_state24_io <= ((tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY));
    end process;

        ap_block_state24_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_pp0_stage10_iter0_assign_proc : process(tmp_5_reg_726, mem_RVALID)
    begin
                ap_block_state31_pp0_stage10_iter0 <= ((tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_0 = mem_RVALID));
    end process;

        ap_block_state32_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(ap_sig_ioackin_mem_ARREADY, ap_predicate_op211_readreq_state35)
    begin
                ap_block_state35_io <= ((ap_const_logic_0 = ap_sig_ioackin_mem_ARREADY) and (ap_const_boolean_1 = ap_predicate_op211_readreq_state35));
    end process;

        ap_block_state35_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state42_pp0_stage9_iter1_assign_proc : process(mem_RVALID, ap_predicate_op218_read_state42)
    begin
                ap_block_state42_pp0_stage9_iter1 <= ((ap_const_logic_0 = mem_RVALID) and (ap_const_boolean_1 = ap_predicate_op218_read_state42));
    end process;

        ap_block_state43_pp0_stage10_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage11_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage5_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage6_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage7_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage8_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage9_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage10_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage11_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage5_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage6_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage7_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage8_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage9_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage10_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state78_assign_proc : process(tmp_1_reg_605, mem_BVALID)
    begin
                ap_block_state78 <= ((ap_const_lv1_0 = tmp_1_reg_605) and (ap_const_logic_0 = mem_BVALID));
    end process;


    ap_condition_1526_assign_proc : process(tmp_5_reg_726, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
                ap_condition_1526 <= ((tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0));
    end process;


    ap_condition_1531_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_5_reg_726, ap_block_pp0_stage3_flag00001001)
    begin
                ap_condition_1531 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_1535_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_predicate_op211_readreq_state35, ap_block_pp0_stage2_flag00001001)
    begin
                ap_condition_1535 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_predicate_op211_readreq_state35) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0));
    end process;


    ap_condition_1539_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_reg_pp0_iter3_tmp_5_reg_726, ap_block_pp0_stage10_flag00011001, ap_enable_reg_pp0_iter3)
    begin
                ap_condition_1539 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_1 = ap_reg_pp0_iter3_tmp_5_reg_726));
    end process;


    ap_condition_pp0_exit_iter2_state55_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter2_state55 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter2_state55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_ce, exitcond_flatten_reg_643, ap_CS_fsm_state9)
    begin
        if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_flatten_reg_643))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_precharge_reg_pp0_iter2_tmp_25_reg_199 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op211_readreq_state35_assign_proc : process(ap_reg_pp0_iter1_tmp_5_reg_726, tmp_15_fu_445_p2)
    begin
                ap_predicate_op211_readreq_state35 <= ((ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_5_reg_726) and (tmp_15_fu_445_p2 = ap_const_lv1_0));
    end process;


    ap_predicate_op218_read_state42_assign_proc : process(ap_reg_pp0_iter1_tmp_5_reg_726, tmp_15_reg_773)
    begin
                ap_predicate_op218_read_state42 <= ((ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_5_reg_726) and (ap_const_lv1_0 = tmp_15_reg_773));
    end process;


    ap_predicate_op219_fcmp_state43_assign_proc : process(ap_reg_pp0_iter1_tmp_5_reg_726, tmp_15_reg_773)
    begin
                ap_predicate_op219_fcmp_state43 <= ((ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_5_reg_726) and (ap_const_lv1_0 = tmp_15_reg_773));
    end process;


    ap_predicate_op227_fcmp_state46_assign_proc : process(tmp_15_reg_773, ap_reg_pp0_iter2_tmp_5_reg_726)
    begin
                ap_predicate_op227_fcmp_state46 <= ((ap_const_lv1_0 = tmp_15_reg_773) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_5_reg_726));
    end process;


    ap_ready_assign_proc : process(ap_ce, exitcond_flatten_reg_643, ap_CS_fsm_state9)
    begin
        if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond_flatten_reg_643))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_mem_ARREADY_assign_proc : process(mem_ARREADY, ap_reg_ioackin_mem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) then 
            ap_sig_ioackin_mem_ARREADY <= mem_ARREADY;
        else 
            ap_sig_ioackin_mem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_AWREADY_assign_proc : process(mem_AWREADY, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) then 
            ap_sig_ioackin_mem_AWREADY <= mem_AWREADY;
        else 
            ap_sig_ioackin_mem_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_mem_WREADY_assign_proc : process(mem_WREADY, ap_reg_ioackin_mem_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) then 
            ap_sig_ioackin_mem_WREADY <= mem_WREADY;
        else 
            ap_sig_ioackin_mem_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    b_s_fu_321_p2 <= std_logic_vector(unsigned(b_reg_165) + unsigned(ap_const_lv31_1));
    cast1_fu_275_p0 <= num_outputs;
    exitcond_flatten_fu_310_p2 <= "1" when (indvar_flatten_reg_141 = bound_reg_631) else "0";

    grp_fu_214_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage9, ap_ce, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage3_flag00011001, ap_block_pp0_stage10_flag00011001, ap_block_pp0_stage9_flag00011001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_flag00011001, ap_block_pp0_stage4_flag00011001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage6_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage7_flag00011001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_flag00011001, ap_CS_fsm_pp0_stage8)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))))) then 
            grp_fu_214_ce <= ap_const_logic_1;
        else 
            grp_fu_214_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage9, ap_ce, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage3_flag00011001, ap_block_pp0_stage9_flag00011001, ap_block_pp0_stage4_flag00011001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage5_flag00011001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage6_flag00011001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage7_flag00011001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_flag00011001, ap_CS_fsm_pp0_stage8)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage2, ap_ce, ap_CS_fsm_state68, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_block_pp0_stage2_flag00011001, ap_block_pp0_stage10_flag00011001, ap_CS_fsm_state71, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_flag00011001, ap_CS_fsm_state69, ap_CS_fsm_state70)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state68) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state71) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state70)))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_224_opcode_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_5_reg_726, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, tmp_1_reg_605, ap_CS_fsm_state68, ap_CS_fsm_pp0_stage11, ap_predicate_op219_fcmp_state43, ap_block_pp0_stage11_flag00000001, ap_block_pp0_stage10_flag00000001)
    begin
        if (((ap_const_lv1_0 = tmp_1_reg_605) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_fu_224_opcode <= ap_const_lv5_2;
        elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00000001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_predicate_op219_fcmp_state43) and (ap_block_pp0_stage10_flag00000001 = ap_const_boolean_0)))) then 
            grp_fu_224_opcode <= ap_const_lv5_1;
        else 
            grp_fu_224_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_224_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00000000, ap_enable_reg_pp0_iter1, tmp_8_reg_188, ap_CS_fsm_state68, input_element_reg_756, weight_element_reg_783, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_224_p0 <= tmp_8_reg_188;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            grp_fu_224_p0 <= weight_element_reg_783;
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_flag00000000 = ap_const_boolean_0))) then 
            grp_fu_224_p0 <= input_element_reg_756;
        else 
            grp_fu_224_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_230_p2 <= std_logic_vector(unsigned(o_cast_mid2_cast_reg_668) + unsigned(tmp_6_mid2_reg_701));

    grp_fu_245_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_fu_245_ce <= ap_const_logic_1;
        else 
            grp_fu_245_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_279_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state7, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_fu_279_ce <= ap_const_logic_1;
        else 
            grp_fu_279_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_279_p0 <= grp_fu_279_p00(32 - 1 downto 0);
    grp_fu_279_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast1_fu_275_p0),64));
    grp_fu_279_p1 <= grp_fu_279_p10(32 - 1 downto 0);
    grp_fu_279_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_size),64));

    grp_fu_315_ce_assign_proc : process(ap_ce, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_315_ce <= ap_const_logic_1;
        else 
            grp_fu_315_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_351_ce_assign_proc : process(ap_CS_fsm_state12, ap_ce, ap_CS_fsm_state11, ap_sig_ioackin_mem_ARREADY, ap_CS_fsm_state17, ap_CS_fsm_state14, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_sig_ioackin_mem_ARREADY = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_351_ce <= ap_const_logic_1;
        else 
            grp_fu_351_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_351_p0 <= grp_fu_351_p00(31 - 1 downto 0);
    grp_fu_351_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_mid2_v_v_reg_662),32));

    grp_fu_366_ce_assign_proc : process(ap_CS_fsm_state19, ap_ce, mem_RVALID, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (mem_RVALID = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_366_ce <= ap_const_logic_1;
        else 
            grp_fu_366_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_366_p0 <= tmp_4_mid2_v_reg_679(31 - 1 downto 0);

    grp_fu_370_ce_assign_proc : process(ap_CS_fsm_state19, ap_ce, mem_RVALID, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_ce) and ((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (mem_RVALID = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_fu_370_ce <= ap_const_logic_1;
        else 
            grp_fu_370_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_370_p0 <= o_cast_mid2_cast_reg_668(31 - 1 downto 0);
    i_1_fu_387_p2 <= std_logic_vector(unsigned(i_phi_fu_181_p4) + unsigned(ap_const_lv31_1));
    i_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_phi_fu_181_p4),32));

    i_phi_fu_181_p4_assign_proc : process(tmp_5_reg_726, ap_enable_reg_pp0_iter1, i_reg_177, ap_CS_fsm_pp0_stage0, i_1_reg_730, ap_block_pp0_stage0_flag00000000)
    begin
        if (((tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_phi_fu_181_p4 <= i_1_reg_730;
        else 
            i_phi_fu_181_p4 <= i_reg_177;
        end if; 
    end process;

    input_element_to_int_fu_412_p1 <= input_element_reg_756;

    mem_ARADDR_assign_proc : process(ap_CS_fsm_state12, ap_ce, tmp_9_reg_685, tmp_10_reg_745, tmp_16_fu_455_p2, ap_reg_ioackin_mem_ARREADY, ap_condition_1531, ap_condition_1535)
    begin
        if (((ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY))) then
            if ((ap_condition_1535 = ap_const_boolean_1)) then 
                mem_ARADDR <= tmp_16_fu_455_p2;
            elsif ((ap_condition_1531 = ap_const_boolean_1)) then 
                mem_ARADDR <= tmp_10_reg_745;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                mem_ARADDR <= tmp_9_reg_685;
            else 
                mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_5_reg_726, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_ce, ap_predicate_op211_readreq_state35, ap_reg_ioackin_mem_ARREADY, ap_block_pp0_stage3_flag00001001, ap_block_pp0_stage2_flag00001001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY) and (ap_block_pp0_stage3_flag00001001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_ce = ap_const_logic_1) and (ap_const_boolean_1 = ap_predicate_op211_readreq_state35) and (ap_const_logic_0 = ap_reg_ioackin_mem_ARREADY) and (ap_block_pp0_stage2_flag00001001 = ap_const_boolean_0)))) then 
            mem_ARVALID <= ap_const_logic_1;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(ap_CS_fsm_state72, ap_CS_fsm_state79, ap_ce, ap_reg_ioackin_mem_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state72) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state79) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_AWREADY)))) then 
            mem_AWVALID <= ap_const_logic_1;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state78, tmp_1_reg_605, ap_CS_fsm_state85, ap_ce, mem_BVALID)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_const_lv1_0 = tmp_1_reg_605) and (ap_ce = ap_const_logic_1) and not(((ap_const_lv1_0 = tmp_1_reg_605) and (ap_const_logic_0 = mem_BVALID)))) or ((ap_const_logic_1 = ap_CS_fsm_state85) and (ap_ce = ap_const_logic_1) and (mem_BVALID = ap_const_logic_1)))) then 
            mem_BREADY <= ap_const_logic_1;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_5_reg_726, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_state19, ap_ce, mem_RVALID, ap_block_pp0_stage10_flag00011001, ap_predicate_op218_read_state42, ap_block_pp0_stage9_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1) and (mem_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_ce = ap_const_logic_1) and (ap_block_pp0_stage10_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_ce = ap_const_logic_1) and (ap_const_boolean_1 = ap_predicate_op218_read_state42) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0)))) then 
            mem_RREADY <= ap_const_logic_1;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WDATA_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state80, ap_ce, tmp_8_reg_188, tmp_22_reg_829, ap_reg_ioackin_mem_WREADY)
    begin
        if (((ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
                mem_WDATA <= tmp_8_reg_188;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                mem_WDATA <= tmp_22_reg_829;
            else 
                mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            mem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state80, ap_ce, ap_reg_ioackin_mem_WREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state73) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)) or ((ap_const_logic_1 = ap_CS_fsm_state80) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_mem_WREADY)))) then 
            mem_WVALID <= ap_const_logic_1;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_blk_n_AR_assign_proc : process(m_axi_mem_ARREADY, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_flag00000000, tmp_5_reg_726, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_flag00000000, ap_reg_pp0_iter1_tmp_5_reg_726, tmp_15_fu_445_p2, ap_CS_fsm_state12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0) and (tmp_5_reg_726 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_5_reg_726) and (tmp_15_fu_445_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_AW_assign_proc : process(m_axi_mem_AWREADY, ap_CS_fsm_state72, ap_CS_fsm_state79)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            mem_blk_n_AW <= m_axi_mem_AWREADY;
        else 
            mem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_B_assign_proc : process(m_axi_mem_BVALID, ap_CS_fsm_state78, tmp_1_reg_605, ap_CS_fsm_state85)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state78) and (ap_const_lv1_0 = tmp_1_reg_605)) or (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            mem_blk_n_B <= m_axi_mem_BVALID;
        else 
            mem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(m_axi_mem_RVALID, ap_enable_reg_pp0_iter0, tmp_5_reg_726, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00000000, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_5_reg_726, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_flag00000000, tmp_15_reg_773, ap_CS_fsm_state19)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (tmp_5_reg_726 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_5_reg_726) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_15_reg_773)) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_W_assign_proc : process(m_axi_mem_WREADY, ap_CS_fsm_state73, ap_CS_fsm_state80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state80))) then 
            mem_blk_n_W <= m_axi_mem_WREADY;
        else 
            mem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    notlhs1_fu_484_p2 <= "0" when (tmp_17_fu_470_p4 = ap_const_lv8_FF) else "1";
    notlhs8_fu_429_p2 <= "0" when (tmp_11_fu_415_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_523_p2 <= "0" when (tmp_27_fu_509_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_490_p2 <= "1" when (tmp_18_fu_480_p1 = ap_const_lv23_0) else "0";
    notrhs9_fu_435_p2 <= "1" when (tmp_12_fu_425_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_529_p2 <= "1" when (tmp_28_fu_519_p1 = ap_const_lv23_0) else "0";
    o_1_fu_558_p3 <= 
        o_op_reg_839 when (tmp_7_reg_636(0) = '1') else 
        ap_const_lv31_1;
    o_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_reg_153),32));
    o_cast_mid2_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_cast_mid2_reg_657),32));
    o_cast_mid2_fu_327_p3 <= 
        o_reg_153 when (tmp_7_reg_636(0) = '1') else 
        ap_const_lv31_0;
    o_op_fu_552_p2 <= std_logic_vector(unsigned(o_reg_153) + unsigned(ap_const_lv31_1));
    tmp1_fu_343_p2 <= std_logic_vector(unsigned(tmp_3_reg_615) + unsigned(o_cast_mid2_cast_fu_340_p1));
    tmp2_fu_296_p2 <= std_logic_vector(unsigned(tmp_3_fu_290_p1) + unsigned(num_outputs_read_reg_569));
    tmp3_fu_398_p2 <= std_logic_vector(unsigned(tmp4_reg_735) + unsigned(num_weights_reg_609));
    tmp4_fu_393_p2 <= std_logic_vector(unsigned(tmp_4_mid2_reg_711) + unsigned(i_cast_fu_378_p1));
    tmp5_fu_451_p2 <= std_logic_vector(unsigned(tmp_3_reg_615) + unsigned(ap_reg_pp0_iter1_i_cast_reg_721));
    tmp_10_fu_402_p2 <= std_logic_vector(unsigned(tmp3_reg_740) + unsigned(tmp2_reg_626));
    tmp_10_to_int_fu_505_p1 <= tmp_8_reg_188;
    tmp_11_fu_415_p4 <= input_element_to_int_fu_412_p1(30 downto 23);
    tmp_12_fu_425_p1 <= input_element_to_int_fu_412_p1(23 - 1 downto 0);
    tmp_13_fu_441_p2 <= (notrhs9_reg_768 or notlhs8_reg_763);
    tmp_15_fu_445_p2 <= (tmp_13_fu_441_p2 and grp_fu_224_p2);
    tmp_16_fu_455_p2 <= std_logic_vector(unsigned(tmp5_fu_451_p2) + unsigned(tmp_s_reg_716));
    tmp_17_fu_470_p4 <= weight_element_to_in_fu_467_p1(30 downto 23);
    tmp_18_fu_480_p1 <= weight_element_to_in_fu_467_p1(23 - 1 downto 0);
    tmp_19_fu_496_p2 <= (notrhs1_reg_795 or notlhs1_reg_790);
    tmp_1_fu_285_p2 <= "1" when (enable_relu_read_reg_564 = ap_const_lv32_0) else "0";
    tmp_22_fu_544_p3 <= 
        tmp_8_reg_188 when (tmp_31_fu_539_p2(0) = '1') else 
        ap_const_lv32_0;

    tmp_25_phi_fu_203_p6_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00000000, ap_reg_pp0_iter3_tmp_5_reg_726, ap_reg_pp0_iter3_tmp_15_reg_773, ap_reg_pp0_iter3_tmp_26_reg_805, ap_enable_reg_pp0_iter3, ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199, grp_fu_214_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_1 = ap_reg_pp0_iter3_tmp_5_reg_726) and (ap_const_lv1_0 = ap_reg_pp0_iter3_tmp_15_reg_773) and (ap_const_lv1_0 = ap_reg_pp0_iter3_tmp_26_reg_805))) then 
            tmp_25_phi_fu_203_p6 <= grp_fu_214_p2;
        else 
            tmp_25_phi_fu_203_p6 <= ap_phi_precharge_reg_pp0_iter3_tmp_25_reg_199;
        end if; 
    end process;

    tmp_26_fu_500_p2 <= (tmp_19_fu_496_p2 and tmp_21_reg_800);
    tmp_27_fu_509_p4 <= tmp_10_to_int_fu_505_p1(30 downto 23);
    tmp_28_fu_519_p1 <= tmp_10_to_int_fu_505_p1(23 - 1 downto 0);
    tmp_29_fu_535_p2 <= (notrhs_reg_819 or notlhs_reg_814);
    tmp_31_fu_539_p2 <= (tmp_29_fu_535_p2 and tmp_30_reg_824);
    tmp_3_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_585),32));
    tmp_4_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_590),32));
    tmp_4_mid2_v_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_mid2_v_v_reg_662),32));
    tmp_4_mid2_v_v_fu_334_p3 <= 
        b_reg_165 when (tmp_7_reg_636(0) = '1') else 
        b_s_reg_652;
    tmp_5_fu_382_p2 <= "1" when (signed(i_cast_fu_378_p1) < signed(num_inputs_read_reg_577)) else "0";
    tmp_6_mid2_fu_374_p2 <= std_logic_vector(unsigned(tmp_6_mid2_v_reg_696) + unsigned(tmp_4_reg_621));
    tmp_7_fu_305_p2 <= "1" when (signed(o_cast_fu_301_p1) < signed(num_outputs_read_reg_569)) else "0";

    tmp_8_phi_fu_192_p4_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_flag00000000, tmp_8_reg_188, ap_reg_pp0_iter3_tmp_5_reg_726, ap_enable_reg_pp0_iter3, tmp_25_phi_fu_203_p6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_1 = ap_reg_pp0_iter3_tmp_5_reg_726))) then 
            tmp_8_phi_fu_192_p4 <= tmp_25_phi_fu_203_p6;
        else 
            tmp_8_phi_fu_192_p4 <= tmp_8_reg_188;
        end if; 
    end process;

    tmp_9_fu_356_p2 <= std_logic_vector(unsigned(tmp1_reg_674) + unsigned(num_weights_reg_609));
    weight_element_to_in_fu_467_p1 <= weight_element_reg_783;
end behav;
