// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XFC_LAYER_H
#define XFC_LAYER_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xfc_layer_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Ctrl_bus_BaseAddress;
} XFc_layer_Config;
#endif

typedef struct {
    u32 Ctrl_bus_BaseAddress;
    u32 IsReady;
} XFc_layer;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XFc_layer_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XFc_layer_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XFc_layer_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XFc_layer_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XFc_layer_Initialize(XFc_layer *InstancePtr, u16 DeviceId);
XFc_layer_Config* XFc_layer_LookupConfig(u16 DeviceId);
int XFc_layer_CfgInitialize(XFc_layer *InstancePtr, XFc_layer_Config *ConfigPtr);
#else
int XFc_layer_Initialize(XFc_layer *InstancePtr, const char* InstanceName);
int XFc_layer_Release(XFc_layer *InstancePtr);
#endif

void XFc_layer_Start(XFc_layer *InstancePtr);
u32 XFc_layer_IsDone(XFc_layer *InstancePtr);
u32 XFc_layer_IsIdle(XFc_layer *InstancePtr);
u32 XFc_layer_IsReady(XFc_layer *InstancePtr);
void XFc_layer_EnableAutoRestart(XFc_layer *InstancePtr);
void XFc_layer_DisableAutoRestart(XFc_layer *InstancePtr);

void XFc_layer_Set_input_offset(XFc_layer *InstancePtr, u32 Data);
u32 XFc_layer_Get_input_offset(XFc_layer *InstancePtr);
void XFc_layer_Set_output_offset(XFc_layer *InstancePtr, u32 Data);
u32 XFc_layer_Get_output_offset(XFc_layer *InstancePtr);
void XFc_layer_Set_batch_size(XFc_layer *InstancePtr, u32 Data);
u32 XFc_layer_Get_batch_size(XFc_layer *InstancePtr);
void XFc_layer_Set_num_inputs(XFc_layer *InstancePtr, u32 Data);
u32 XFc_layer_Get_num_inputs(XFc_layer *InstancePtr);
void XFc_layer_Set_num_outputs(XFc_layer *InstancePtr, u32 Data);
u32 XFc_layer_Get_num_outputs(XFc_layer *InstancePtr);
void XFc_layer_Set_enable_relu(XFc_layer *InstancePtr, u32 Data);
u32 XFc_layer_Get_enable_relu(XFc_layer *InstancePtr);

void XFc_layer_InterruptGlobalEnable(XFc_layer *InstancePtr);
void XFc_layer_InterruptGlobalDisable(XFc_layer *InstancePtr);
void XFc_layer_InterruptEnable(XFc_layer *InstancePtr, u32 Mask);
void XFc_layer_InterruptDisable(XFc_layer *InstancePtr, u32 Mask);
void XFc_layer_InterruptClear(XFc_layer *InstancePtr, u32 Mask);
u32 XFc_layer_InterruptGetEnabled(XFc_layer *InstancePtr);
u32 XFc_layer_InterruptGetStatus(XFc_layer *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
